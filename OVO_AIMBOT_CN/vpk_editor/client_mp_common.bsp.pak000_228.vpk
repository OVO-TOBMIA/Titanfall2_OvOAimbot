"Basic"
{
	"$writeColor" "1"
	"$writeAlpha" 			"0"
	"$writeCloakToAlpha" 	"0"

	"$translucent"			"0"

	"Proxies"
	{
		//CHange the alpha base off of script input
		"EntityScript"
		{
			"scriptFuncName" "VMTCallback_GetCloakFactor"
			"resultVar"	"$cloakAlphaScale"
		}
	}
}

"pilot_base"
{
	raceOrSex					"race_human_male" //TODO: Get code work for this

	"global"
	{
		///////////////////////////////////////////////////
		// other pilot set files overwrite these defaults
		///////////////////////////////////////////////////
		bodymodel			"models/humans/pilots/pilot_medium_reaper_m.mdl"
		armsmodel			"models/weapons/arms/pov_pilot_medium_reaper_m.mdl"
		cockpitmodel		"models/weapons/arms/human_pov_cockpit.mdl"
		///////////////////////////////////////////////////
		//
		///////////////////////////////////////////////////

		ui_targetinfo				"ui/targetinfo_pilot"

		weaponClass					"human"
		automantle					1
		healthpacks					1
		jump						1
		dodge						0
		slide						1
		fov 90
		viewmodelfov 90
		health						200
		healthShield				400
		mechanical					0
		ArmorType					normal
		leech_range					64
		impactSpeed					380
		pitchOffsetScale			9.2
		doFaceAnim					true
		aiEnemy_priority			10
		footstepImpactTable			"pilot_foostep"
		landingImpactTable			"pilot_landing"
		slideEffectTable			"pilot_slide"
		sound_slide_prefix			"pilotslide"
		deathcamRotateSpeed			8
		viewmodelDuckOffset			-0.75
		viewPunchSpring				punch_pilot

		headshotFX 					"P_headshot_pilot"

		viewkickFallDistMin			10
		viewkickFallDistMax			70
		viewkickFallDistMaxScale	12

		slidedecel					50
		slidevelocitydecay			0.7

		sprintViewOffset			-6.0
		sprintStartDelay			0.2
		sprintStartDuration			0.8
		sprintStartFastDuration		0.2
		sprintEndDuration			0.15
		sprinttiltMaxRoll			2

		passThroughThickness		32

		context_action_can_melee	1
		context_action_can_use		1

		aimAngleBackwardEnd			-120
		aimAngleForwardStart		-60
		aimAngleForwardEnd			60
		aimAngleBackwardStart		120

		aimassist_adspull_centerAttachmentName		"CHESTFOCUS"
		aimassist_adspull_centerRadius				11.0
		aimassist_adspull_headshotAttachmentName	"HEADSHOT"
		aimassist_adspull_headshotRadius			13.0

		chasecamDistanceMax			75
		chasecamMaxOrbitDepth		20
		chasecamMaxPitchUp			-45
		chasecamOffsetUp			0
		chasecamOffsetRight			18
		chasecamOffsetForward		0

		melee_cone_trace_range		400
		melee_cone_trace_angle		40

		rumbleOnJump				"rumble_pilotOnJump"
		rumbleOnDoubleJump			"rumble_pilotOnDoubleJump"
		rumbleOnWallrunStart		"rumble_pilotOnWallrunStart"
		rumbleOnWallrunTimeout		"rumble_pilotOnWallrunTimeout"
		rumbleOnWallHangStart		"rumble_pilotOnWallHangStart"
		rumbleOnLandingSoft			"rumble_pilotOnLandingSoft"
		rumbleOnLandingHard			"rumble_pilotOnLandingHard"
		rumbleOnSlideBegin			"rumble_pilotOnSlideBegin"
		rumbleOnZiplineAttach		"rumble_pilotOnZiplineAttach"
		rumbleOnZiplineDetach		"rumble_pilotOnZiplineDetach"

		cockpitSwayTurnAngleFactor		-0.6
		cockpitSwayTurnAngleRollFactor	0.2
		cockpitSwayTurnOriginFactor		-0.15
		cockpitSwayMoveAngleFactor		-0.4
		cockpitSwayMoveAngleRollFactor	-0.2
		cockpitSwayMoveOriginFactor		-0.15
		cockpitSwayGain					1.0

		grapple_detachLengthMin				33
		grapple_detachLengthMax				50
		grapple_detachAwaySpeed				500
		grapple_gravityFracMin				0.25
		grapple_gravityFracMax				0.7
		grapple_detachVerticalBoost			200
		grapple_detachVerticalMaxSpeed		200
		grapple_detachSpeedLoss				300
		grapple_detachSpeedLossMin			430
		grapple_detachLowSpeedThreshold		250
		grapple_detachLowSpeedTime			1.5
		grapple_detachLowSpeedWallTime		1.2
		grapple_detachLowSpeedGroundTime	0.7
		grapple_impactVerticalBoost			300
		grapple_impactVerticalMaxSpeed		300
		grapple_power_regen_delay			3
		grapple_power_regen_rate			3
		grapple_airSpeedMax					420
		grapple_airAccel					650

		//deathcamDistanceMin 75
		//deathcamMinHeight 5
		//deathcamExtraHeight 10

		deathcamDistanceMin			170
		deathcamDistanceMax			250
		deathcamDistanceGrowRate	70
		deathcamExtraHeight			40
		deathcamMinHeight			30
		deathcamRotateSpeed			8

		physicsIgnoreBelowMass	10
		physicsSoftBelowMass	100
		physicsPushMassLimit	5000
		physicsPushSpeedLimit	50

		//damageImpulseScaleZ		2.5
		//damageImpulseSpeedZLimit		600
		damageImpulseSpeedBoostLimit	1000

		gibModel0						"models/gibs/human_gibs.mdl"

		sound_superJump					"Player.SuperJump"
		sound_superJumpFail				"Player.SuperJumpFail"
		sound_dodge_1p					""
		sound_dodge_3p					""
		sound_dodgeFail					""
		sound_groundImpact				"Pilot.GroundImpact"
		sound_wallrunImpact				"wallrun_impact"
		sound_wallrunSlip				""
		sound_wallrunFall				""
		sound_wallHangStart				"Default.WallCling_Attach"
		sound_wallHangComplete			"Pilot_CrouchStand_1P"
		sound_wallHangFall				"Default.WallCling_Detach"

		sound_freefall_start_1p			"Jumpjet_Freefall_Start_1P"
		sound_freefall_start_3p			"Jumpjet_Freefall_Start_3P"
		sound_freefall_body_1p			"Jumpjet_Freefall_Body_1P"
		sound_freefall_body_3p			"Jumpjet_Freefall_Body_3P"
		sound_freefall_finish_1p		"Jumpjet_Freefall_End_1P"
		sound_freefall_finish_3p		"Jumpjet_Freefall_End_3P"

		sound_jumpjet_jump_start_1p		"Jumpjet_Jump_Start_1P"
		sound_jumpjet_jump_start_3p		"Jumpjet_Jump_Start_3P"
		sound_jumpjet_jump_body_1p		"Jumpjet_Jump_Body_1P"
		sound_jumpjet_jump_body_3p		"Jumpjet_Jump_Body_3P"
		sound_jumpjet_jump_finish_1p	"Jumpjet_Jump_End_1P"
		sound_jumpjet_jump_finish_3p	"Jumpjet_Jump_End_3P"

		sound_jumpjet_jet_start_1p		"Jumpjet_Jet_Start_1P"
		sound_jumpjet_jet_start_3p		"Jumpjet_Jet_Start_3P"
		sound_jumpjet_jet_body_1p		"Jumpjet_Jet_Body_1P"
		sound_jumpjet_jet_body_3p		"Jumpjet_Jet_Body_3P"
		sound_jumpjet_jet_finish_1p		"Jumpjet_Jet_End_1P"
		sound_jumpjet_jet_finish_3p		"Jumpjet_Jet_End_3P"

		sound_jumpjet_wallrun_start_1p	"Jumpjet_Wallrun_Start_1P"
		sound_jumpjet_wallrun_start_3p	"Jumpjet_Wallrun_Start_3P"
		sound_jumpjet_wallrun_body_1p	"Jumpjet_Wallrun_Body_1P"
		sound_jumpjet_wallrun_body_3p	"Jumpjet_Wallrun_Body_3P"
		sound_jumpjet_wallrun_finish_1p	"Jumpjet_Wallrun_End_1P"
		sound_jumpjet_wallrun_finish_3p	"Jumpjet_Wallrun_End_3P"

		sound_pain_layer1_loop 			"Pilot_Wounded_Loop_1P"
		sound_pain_layer1_end  			"Pilot_WoundedLoop_End_1P"
		sound_pain_layer2_start 		"Pilot_Critical_Breath_Start_1P"
		sound_pain_layer2_loop 			"Pilot_Critical_Drone_Loop_1P"
		sound_pain_layer3_loop			"Pilot_Critical_Breath_Loop_1P"
		sound_pain_layer3_end 			"Pilot_Wounded_BreathLoop_End_1P"

		wallrun_hangTimeLimit		100
		wallrun_timeLimit			100.0

		ClassMods
		{
			pas_stealth_movement
			{
			}

			pas_wall_runner
			{
				wallrun_timeLimit		"2.5++"
				wallrun_hangTimeLimit	"21++"
			}

			pas_pilot_hardcore_settings
			{
				health 50
			}

			triple_jump
			{
			}
		}
	}
	"crouch"
	{
		footstepWalkSoundRadius	0
		footstepRunSoundRadius	0
		footstepMinSpeed		80
		footstepInterval 		450

		viewheight 				"0 0 38"
		firstpersonproxyoffset 	"0 0 -38"
		hull_min 				"-16 -16 0"
		hull_max 				"16 16 47"
	}

	"dead"
	{
		viewheight 				"0 0 14"
	}

	"observe"
	{
		hull_min 				"-10 -10 -10"
		hull_max 				"10 10 10"
	}

	"stand"
	{
		footstepWalkSoundRadius	100
		footstepRunSoundRadius	300
		footstepMinSpeed		30
		footstepInterval		400
		footstepIntervalSprint	275

		viewheight 				"0 0 60"
		firstpersonproxyoffset 	"0 0 -60"
		hull_min 				"-16 -16 0"
		hull_max 				"16 16 72"
	}
}

WeaponData
{
	// General
	"printname"   									"#WPN_G2"
	"shortprintname"								"#WPN_G2_SHORT"
	"description" 									"#WPN_G2_DESC"
	"longdesc"										"#WPN_G2_LONGDESC"

	"menu_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_g2a5"
	"hud_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_g2a5"

	"weaponClass" 									"human"
	"body_type"										"medium"
	"fire_mode"   									"semi-auto"
	"pickup_hold_prompt"  							"Hold [USE] [WEAPONNAME]"
	"pickup_press_prompt" 							"[USE] [WEAPONNAME]"
	"minimap_reveal_distance"						"32000"
	"leveled_pickup"								"1"

	"damage_flags"									"DF_BULLET | DF_KNOCK_BACK | DF_DISMEMBERMENT"

	// Menu
	"menu_category"                                 "ar"
	"menu_anim_class"                               "large"
	"stat_damage" 									"90"
	"stat_range"  									"65"
	"stat_accuracy"   								"85"
	"stat_rof"										"33"
	"is_smart_pistol"								"1"

	// Models
	"viewmodel"   									"models/weapons/g2/ptpov_g2a4.mdl"
	"playermodel" 									"models/weapons/g2/w_g2a4.mdl"

	// Effects
	"tracer_effect"   								"P_wpn_tracer"
	"tracer_effect_first_person"                    "P_wpn_tracer"
	"vortex_absorb_effect"							"wpn_vortex_projectile_rifle_FP"
	"vortex_absorb_effect_third_person"				"wpn_vortex_projectile_rifle"
	"vortex_absorb_sound"							"Vortex_Shield_AbsorbBulletSmall"
	"vortex_absorb_sound_1P_VS_3P"					"Vortex_Shield_AbsorbBulletSmall_1P_VS_3P"
	"projectile_adjust_to_gun_barrel"				"1"

	"sound_dryfire"									"assault_rifle_dryfire"
	"sound_pickup"									"wpn_pickup_Rifle_1P"
	"sound_trigger_pull"							"assault_rifle_dryfire"
	"sound_trigger_release"							"assault_rifle_dryfire"
	"sound_zoom_in"									"Weapon_G2A4_ADS_In"
	"sound_zoom_out"								"Weapon_G2A4_ADS_Out"

	"fx_shell_eject_view"							"wpn_shelleject_rifle_assault_FP"
	"fx_shell_eject_world"							"wpn_shelleject_rifle_assault"
	"fx_shell_eject_attach"							"shell"

	"fx_muzzle_flash_view"							"wpn_muzzleflash_smg_FP"
	"fx_muzzle_flash_world"							"wpn_muzzleflash_smg"
	"fx_muzzle_flash_attach"						"muzzle_flash"

	//Sounds
	"fire_sound_1_player_1p"						"Weapon_G2A4_Fire_1P"
	"fire_sound_1_player_3p"						"Weapon_G2A4_Fire_3P"
	"fire_sound_1_npc"								"Weapon_G2A4_Fire_NPC"
	"fire_sound_2_player_1p"						"Weapon_bulletCasings.Bounce"
	"fire_sound_2_player_3p"						"Weapon_bulletCasings.Bounce"

	"low_ammo_sound_name_1"							"G2A4_LowAmmo_Shot1"
	"low_ammo_sound_name_2"							"G2A4_LowAmmo_Shot2"
	"low_ammo_sound_name_3"							"G2A4_LowAmmo_Shot3"
	"low_ammo_sound_name_4"							"G2A4_LowAmmo_Shot4"
	"low_ammo_sound_name_5"							"G2A4_LowAmmo_Shot5"
	"low_ammo_sound_name_6"							"G2A4_LowAmmo_Shot6"

	// Network
	"net_optimize"		                            "1"

	"damage_type" 									"bullet"

	"explosionradius" 								"0"
	"critical_hit_damage_scale"						"1"

	// Ammo
	"ammo_clip_size"   								"14"

   "titanarmor_critical_hit_required"              "1"
	"critical_hit"									"1"

	dof_zoom_focusArea_horizontal					0.027
	dof_zoom_focusArea_top							0.07
	dof_zoom_focusArea_bottom						-0.012


	MP_BASE
	{
		"ammo_default_total"							"140"
		"ammo_stockpile_max"							"140"
		"ammo_no_remove_from_stockpile"					"1"
		"ammo_min_to_fire"								"1"

		"aimassist_adspull_weaponclass"					"precise"

		// Damage - When Used by Players
		"damage_near_value"   							"40"
		"damage_far_value"								"35"
		"damage_near_value_titanarmor"					"140"
		"damage_far_value_titanarmor" 					"110"
		"damage_rodeo" 									"220"
		"damage_near_distance"							"1500"
		"damage_far_distance" 							"2000"

   	 	"damage_very_far_value"							"<KEEP_DEFAULT>"
   		"damage_very_far_distance"						"<KEEP_DEFAULT>"

		"damage_headshot_scale"							"1.5"

		"red_crosshair_range" 							"1500"

		// Damage - When Used by NPCs
		"npc_damage_near_value"   						"20"
		"npc_damage_far_value"							"15"
		"npc_damage_near_value_titanarmor"				"25"
		"npc_damage_far_value_titanarmor" 				"25"

		"npc_max_range"   								"3000"

		"enable_highlight_networking_on_creation"		"<KEEP_DEFAULT>"

		"viewkick_air_scale_ads"						"3.0"
		"red_crosshair_range" 							"10000000"

		"damage_heavyarmor_nontitan_scale"				"0.35"
		"smart_ammo_search_distance"  					"10000000"
		"smart_ammo_max_targeted_burst"					"12"
		"smart_ammo_targeting_time_min"					"0.00"//"0.37"
		"smart_ammo_targeting_time_max"					"0.00"//"0.65"
		"smart_ammo_targeting_time_min_npc"				"0.1"
		"smart_ammo_targeting_time_max_npc"				"0.2"
	}

	SP_BASE
	{
		"ammo_default_total"							"70"
		"ammo_stockpile_max"							"112"
		"ammo_no_remove_from_stockpile"					"0"
		"ammo_min_to_fire"								"1"

		"aimassist_adspull_weaponclass"					"precise_sp"

		// Damage - When Used by Players
		"damage_near_value"   							"45"
		"damage_far_value"								"35"
		"damage_near_value_titanarmor"					"45"
		"damage_far_value_titanarmor" 					"25"
		"damage_rodeo" 									"220"
		"damage_near_distance"							"1250"
		"damage_far_distance" 							"1400"

   	 	"damage_very_far_value"							"<KEEP_DEFAULT>"
   		"damage_very_far_distance"						"<KEEP_DEFAULT>"

		"damage_headshot_scale"							"2"

		"red_crosshair_range" 							"1250"

		// Damage - When Used by NPCs
		"npc_damage_near_value"   						"20"
		"npc_damage_far_value"							"15"
		"npc_damage_near_value_titanarmor"				"<KEEP_DEFAULT>"
		"npc_damage_far_value_titanarmor" 				"<KEEP_DEFAULT>"

		"npc_max_range"   								"4000"

		"enable_highlight_networking_on_creation"		"1"

		"viewkick_air_scale_ads"						"1"

		"damage_heavyarmor_nontitan_scale"				"1"
	}

	// NPC
	"proficiency_poor_spreadscale"					"4.5"
	"proficiency_average_spreadscale" 				"3.2"
	"proficiency_good_spreadscale"					"2.8"
	"proficiency_very_good_spreadscale"   			"2.2"

	"npc_min_engage_range"							"0"
	"npc_max_engage_range"							"2000"
	"npc_min_engage_range_heavy_armor"				"500"
	"npc_max_engage_range_heavy_armor"				"3000"

	"npc_min_burst"   								"1"
	"npc_max_burst"   								"1"
	"npc_rest_time_between_bursts_min"				"0.3"
	"npc_rest_time_between_bursts_max"				"0.5"


	"viewmodel_offset_ads"							"0 0 0"

	"dof_zoom_nearDepthStart"						"6.161"
	"dof_zoom_nearDepthEnd"							"10.765"
	"dof_nearDepthStart"							"5.0"
	"dof_nearDepthEnd"								"7.5"


	// Behavior
	"fire_rate"   									"5.5"
	"smart_ammo_allow_search_while_firing"			"1"
	"smart_ammo_allow_ads_lock"						"1" // "0" is default
	"zoom_time_in"									"0.15"
	"zoom_time_out"   								"0.15"
	"zoom_fov"										"35"
	"reload_time" 									"2.2"
	"reload_time_late1" 							"1.16"
	"reload_time_late2" 							"0.59"
	"reloadempty_time"								"2.64"
	"reloadempty_time_late1"						"1.60"
	"reloadempty_time_late2"						"1.03"
	"reloadempty_time_late3"						"0.84"
	"holster_time"									"0.5"
	"deploy_time" 									"0.8"
	"lower_time"  									"0.25"
	"raise_time"  									"0.3"
	"vortex_refire_behavior"  						"bullet"
	"allow_empty_fire"								"0"
	"reload_enabled"  								"1"
	"allow_empty_click"   							"1"
	"empty_reload_only"   							"0"
	"trigger_snipercam"   							"0"
	"allow_headshots" 								"1"
	"headshot_distance" 							"1400"
	"primary_fire_does_not_block_sprint"			"0"
	"ads_move_speed_scale"							"0.5"
	"aimassist_disable_hipfire"						"0"
	"aimassist_disable_ads"							"0"
	"aimassist_disable_hipfire_titansonly"			"0"
	"aimassist_disable_ads_titansonly"				"0"

	"sprint_fractional_anims"						"0"

	// Spread
	"spread_stand_hip"								"5.5"
	"spread_stand_hip_run"							"8.0"
	"spread_stand_hip_sprint"                       "11"

	"spread_stand_ads"								"0.0" //"0.10"
	"spread_crouch_ads"   							"0.0" //"0.05"
	"spread_air_ads"  								"0.0" //"0.5"

	"spread_crouch_hip"   							"4.5"
	"spread_air_hip"  								"11"

	"spread_kick_on_fire_stand_hip"   				"0.7"
	"spread_kick_on_fire_stand_ads"   				"0.075"
	"spread_kick_on_fire_crouch_hip"  				"0.6"
	"spread_kick_on_fire_crouch_ads"  				"0.05"
	"spread_kick_on_fire_air_hip" 					"0.7"
	"spread_kick_on_fire_air_ads" 					"0.15"

	"spread_max_kick_stand_hip"   					"8.0"
	"spread_max_kick_stand_ads"   					"0.0"
	"spread_max_kick_crouch_hip"  					"5.0"
	"spread_max_kick_crouch_ads"  					"0.0"
	"spread_max_kick_air_hip" 						"8.0"
	"spread_max_kick_air_ads" 						"0.0"

	"spread_decay_rate"   							"3"
	"spread_decay_delay"  							"0.1"

	"ammo_suck_behavior"							"primary_weapons"

	// View Kick
	"viewkick_spring" 								"hemlok"

	"viewkick_pitch_base" 							"-0.17"
	"viewkick_pitch_random"   						"0.17"
	"viewkick_pitch_softScale"						"0.3"
	"viewkick_pitch_hardScale"						"1.0"

	"viewkick_yaw_base"   							"0.1"
	"viewkick_yaw_random" 							"0.25"
	"viewkick_yaw_softScale"  						"0.3"
	"viewkick_yaw_hardScale"  						"2.0"

	"viewkick_roll_base"  							"0"
	"viewkick_roll_randomMin" 						"0.4"
	"viewkick_roll_randomMax" 						"0.6"
	"viewkick_roll_softScale" 						"0.25"
	"viewkick_roll_hardScale" 						"3"

	"viewkick_hipfire_weaponFraction" 				"0.5"
	"viewkick_hipfire_weaponFraction_vmScale" 		"0.5"
	"viewkick_ads_weaponFraction" 					"0.3"
	"viewkick_ads_weaponFraction_vmScale" 			"0.5"

	//"viewkick_scale_firstshot_hipfire"			"0.0"
	"viewkick_scale_firstshot_ads"					"0.75"
	"viewkick_scale_min_hipfire"  					"0.3"
	"viewkick_scale_max_hipfire"  					"1.5"
	"viewkick_scale_min_ads"  						"0.3"
	"viewkick_scale_max_ads"  						"0.5"
	"viewkick_scale_valuePerShot" 					"1"
	"viewkick_scale_valueLerpStart"   				"0"
	"viewkick_scale_valueLerpEnd" 					"3"
	"viewkick_scale_valueDecayDelay"  				"0.15"
	"viewkick_scale_valueDecayRate"   				"30"

	"viewkick_perm_pitch_base" 						"-0.20"[$PS4]
	"viewkick_perm_pitch_base" 						"-0.20"[$DURANGO]
	"viewkick_perm_pitch_base" 						"0.0"[$WINDOWS]
	"viewkick_perm_pitch_random"   					"0.05"
	"viewkick_perm_yaw_base"   						"0.0"
	"viewkick_perm_yaw_random" 						"0.2"
	"viewkick_perm_yaw_random_innerexclude"			"0.0"
	//
	"viewmodel_shake_forward"						"1.25"
	"viewmodel_shake_up"							"0.1"
	"viewmodel_shake_right"							"0.0"


	// Bob
	"bob_cycle_time"  								"0.4"
	"bob_vert_dist"   								"0.19"
	"bob_horz_dist"   								"0.1"
	"bob_max_speed"   								"150"
	"bob_pitch"   									"0.75"
	"bob_yaw" 										"-1.7"
	"bob_roll"										"1.2"

	// Bob_Zoomed
	"bob_cycle_time_zoomed"  						"0.4"
	"bob_vert_dist_zoomed"   						"0.01"
	"bob_horz_dist_zoomed"   						"0.01"
	"bob_max_speed_zoomed"   						"150"
	//"bob_pitch_zoomed"   							"0.002"
	//"bob_yaw_zoomed" 								"-.002"
	//"bob_roll_zoomed"								".002"

	// Rumble
	"fire_rumble"									"rumble_assault_rifle"

	// Sway
	"sway_rotate_attach"  							"SWAY_ROTATE"
	"sway_min_x"  									"-0.5"
	"sway_min_y"  									"-0.5"
	"sway_min_z"  									"-0.6"
	"sway_max_x"  									"0.5"
	"sway_max_y"  									"0.5"
	"sway_max_z"  									"0.6"
	"sway_min_pitch"  								"-3"
	"sway_min_yaw"									"-2.5"
	"sway_min_roll"   								"-4"
	"sway_max_pitch"  								"3"
	"sway_max_yaw"									"2.5"
	"sway_max_roll"   								"4"
	"sway_translate_gain" 							"2.5"
	"sway_rotate_gain"								"7"
	"sway_move_forward_translate_x"   				"-0.1"
	"sway_move_forward_translate_z"   				"-0.5"
	"sway_move_back_translate_x"  					"0.2"
	"sway_move_back_translate_z"  					"-0.2"
	"sway_move_left_translate_y"  					"-1"
	"sway_move_left_translate_z"  					"-0.5"
	"sway_move_left_rotate_roll"  					"-4"
	"sway_move_right_translate_y" 					"1"
	"sway_move_right_translate_z" 					"-0.5"
	"sway_move_right_rotate_roll" 					"4"
	"sway_move_up_translate_z"						"-1"
	"sway_move_down_translate_z"  					"1"
	"sway_turn_left_rotate_yaw"   					"-2.5"
	"sway_turn_right_rotate_yaw"  					"2.5"

	"sway_turn_left_translate_y"  					".5"
	"sway_turn_right_translate_y"  					"-.5"
	"sway_turn_up_translate_z"  					".2"
	"sway_turn_down_translate_z"  					"-.2"
	"sway_turn_up_translate_x"  					".1"
	"sway_turn_down_translate_x"  					"-.1"

	"sway_turn_left_rotate_roll"   					"4"
	"sway_turn_right_rotate_roll"  					"-4"
	"sway_turn_up_rotate_pitch"   					"3"
	"sway_turn_down_rotate_pitch" 					"-3"
	"sway_turn_up_rotate_roll"   					"-0.8"
	"sway_turn_down_rotate_roll" 					"0.8"

	// Zoomed Sway
	"sway_rotate_attach_zoomed"						"SWAY_ROTATE_ZOOMED"
	"sway_rotate_attach_blend_time_zoomed"			"0.2"
	"sway_rotate_gain_zoomed"						"5"

	"sway_min_yaw_zoomed"							"-0.04"
	"sway_max_yaw_zoomed"							"0.04"
	"sway_turn_left_rotate_yaw_zoomed"				"-0.085"
	"sway_turn_right_rotate_yaw_zoomed"				"0.085"

	"sway_min_roll_zoomed"   						"-1"
	"sway_max_roll_zoomed"   						"1"
	"sway_turn_left_rotate_roll_zoomed"   			"-1"
	"sway_turn_right_rotate_roll_zoomed"  			"1"

	"sway_move_right_rotate_roll_zoomed" 			"0.2"
	"sway_move_left_rotate_roll_zoomed"  			"-0.2"

	"sway_min_pitch_zoomed"  						"-0.03"
	"sway_max_pitch_zoomed"  						"0.04"
	"sway_turn_up_rotate_pitch_zoomed"				"0.07"
	"sway_turn_down_rotate_pitch_zoomed"			"-0.07"

	// WeaponED Unhandled Key/Values and custom script Key/Values
	"deployfirst_time"								"0.8"
	"sprintcycle_time"								"0.55"
	"smart_ammo_search_angle" 						"360"
	"smart_ammo_search_npcs"						"0"
	"smart_ammo_search_players"						"1"
	"smart_ammo_search_projectiles"					"0"
	"smart_ammo_titans_block_los"					"1"
	"smart_ammo_track_cloaked_targets"				"1"
	"smart_ammo_targeting_time_modifier_projectile_owner"	"0.00"
	"smart_ammo_target_max_locks_normal"			"10"	// divide health by damage near
	"smart_ammo_target_npc_lock_factor"				"10"		// smart pistol does head shots at 2x damage
	"smart_ammo_new_target_delay"					"0.5"
	"smart_ammo_draw_acquisition_lines"				"1"
	"smart_ammo_hud_lock_style"						"pilot_pistol"
	"smart_ammo_hud_type" 							"smart_pistol"
	"smart_ammo_target_confirmed_sound"				"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_target_confirming_sound"			"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_looping_sound_acquiring"			"Weapon_SmartPistol_TargetLockingLoop"
	"smart_ammo_lock_type"							"small"
	"smart_ammo_alert_npc_fraction"					"0.1" 	// unaware since lock on fraction will not go above 1
	"smart_ammo_allow_hip_fire_lock"				"1"
	"smart_ammo_lock_effect_3p"						"P_smartpistol_lockon"
	"smart_ammo_lock_effect_attachment"				"muzzle_flash"
	"smart_ammo_player_targets_must_be_tracked"		"0"
	"smart_ammo_npc_targets_must_be_tracked"		"0"
	"smart_ammo_tracker_status_effects"				"0"
	"smart_ammo_tracked_targets_check_visibility"	"0"

	// Bodygroups:
	"bodygroup1_name"	"g2a4_sight_on"
	"bodygroup1_set"	"1"
	"bodygroup2_name"	"sight_acgs"
	"bodygroup2_set"	"0"
	"bodygroup3_name"	"sight_hcog"
	"bodygroup3_set"	"0"
	"bodygroup4_name"	"sight_cro"
	"bodygroup4_set"	"0"
	"bodygroup5_name"	"proscreen"
	"bodygroup5_set"	"0"

    "clip_bodygroup"						"g2a4_magazine"
    "clip_bodygroup_index_shown"			"0"
    "clip_bodygroup_index_hidden"			"1"
    "clip_bodygroup_show_for_milestone_0"	"1"
    "clip_bodygroup_show_for_milestone_1"	"0"
    "clip_bodygroup_show_for_milestone_2"	"1"
    "clip_bodygroup_show_for_milestone_3"	"1"
	"threat_scope_enabled"			"1"


	Mods
	{
		hcog
		{
			"bodygroup1_set"		"0"
			"bodygroup2_set"	    "0"
			"bodygroup3_set"	    "1"
			"bodygroup4_set"	    "0"
			"zoom_fov"				"35"

			"dof_zoom_nearDepthStart"						"6.652"
			"dof_zoom_nearDepthEnd"							"8.734"

			"viewmodel_offset_ads"							"0 -8.7 -1.22"
			"ui1_enable"		"0"
			"ui2_enable"		"1"
			"ui5_enable"		"1"
			"ui6_enable"		"1"
			dof_zoom_focusArea_horizontal					0.085
			dof_zoom_focusArea_top							0.18
			dof_zoom_focusArea_bottom						-0.06
		}
		iron_sights
		{
		}
		redline_sight
		{
			"bodygroup1_set"	    "0"
			"bodygroup2_set"		"1"
			"bodygroup3_set"		"0"
			"bodygroup4_set"		"0"

			"viewmodel_offset_ads"							"0 -9.15 -.85"

			"dof_zoom_nearDepthStart"						"5.691"
			"dof_zoom_nearDepthEnd"							"6.745"

			"ui1_enable"												"0"
			"ui2_enable"	"1"
			"ui3_enable"												"1"
			"zoom_fov"						"25"
			dof_zoom_focusArea_horizontal					0.073
			dof_zoom_focusArea_top							0.080
			dof_zoom_focusArea_bottom						-0.041
		}
		threat_scope
		{
			"bodygroup1_set"	    "0"
			"bodygroup2_set"		"0"
			"bodygroup3_set"		"0"
			"bodygroup4_set"		"1"

			"ui1_enable"	"0"
			"ui2_enable"	"1"
			"ui4_enable"	"1"

			"viewmodel_offset_ads"							"0 -9.6 -.87"
			"dof_zoom_nearDepthStart"						"5.737"
			"dof_zoom_nearDepthEnd"							"6.226"

			"threat_scope_enabled"			"1"
			"threat_scope_bounds_tagname1"	"SCR_TR_CRO"
			"threat_scope_bounds_tagname2"	"SCR_BL_CRO"
			dof_zoom_focusArea_horizontal					0.068
			dof_zoom_focusArea_top							0.065
			dof_zoom_focusArea_bottom						-0.046
		}
		smart_lock
		{
		}
		pro_screen
		{
			"ui8_enable"		"1"
			"bodygroup5_set"	"1"
		}
		pas_run_and_gun
		{
			"primary_fire_does_not_block_sprint"			"1"
			"crosshair_force_sprint_fade_disabled"          "1"
		}
		pas_fast_reload
		{
			"reload_time"								"*0.7"
			"reload_time_late1"							"*0.7"
			"reloadempty_time"							"*0.7"
			"reloadempty_time_late1"					"*0.7"
		}
		pas_fast_ads
		{
			//Fast ADS
			"zoom_time_in"									"*0.5"
			"zoom_time_out"   								"*0.6"
		}
		pas_fast_swap
		{
			//Fast Swap
			"fast_swap_to"									"1"
		}
		extended_ammo
		{
			"ammo_stockpile_max"				"270"
			"ammo_clip_size"   					"18"
			"ammo_default_total"				"270"
		}

		burn_mod_g2
		{
			"is_burn_mod"		"1"

			//FX
			"tracer_effect"   								"P_wpn_tracer_BC"
			"tracer_effect_first_person"                    "P_wpn_tracer_BC"
			"fx_muzzle_flash_view"							"wpn_muzzleflash_smg_elec_FP"
			"fx_muzzle_flash_world"							"wpn_muzzleflash_smg_elec"

			"damage_near_value"   							"++10"
			"damage_far_value"								"++15"
			"damage_near_value_titanarmor"					"240"
			"damage_far_value_titanarmor" 					"210"

		}
		tactical_cdr_on_kill
		{

		}
	}

	"ui1_enable"		"1"
	"ui1_draw_cloaked"	"1"
	UiData1
	{
		"ui"								"ui/g2a4_sights"
		"mesh"							"models/weapons/attachments/g2a4_rui_upper"
		Args
		{
			vis							player_zoomfrac
		}
	}

	"ui2_enable"		"1"
	UiData2
	{
		"ui"								"ui/g2a4_ammo_counter"
		"mesh"							"models/weapons/attachments/g2a4_rui_lower"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize						weapon_clipSize
			clipCount					weapon_stockpileClipCount
		}
	}

	"ui3_enable"		"0"
	"ui3_draw_cloaked"	"1"
	UiData3
	{
		"ui"								"ui/acgs_redline"
		"mesh"							"models/weapons/attachments/acgs_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui4_enable"		"0"
	"ui4_draw_cloaked"	"1"
	UiData4
	{
		"ui"							"ui/cro_threat_front"
		"mesh"							"models/weapons/attachments/cro_rui_upper"
		Args
		{
			zoomFrac					player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui5_enable"		"0"
	"ui5_draw_cloaked"	"1"
	UiData5
	{
		"ui"								"ui/hcog_upper"
		"mesh"						"models/weapons/attachments/hcog2_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui6_enable"		"0"
	"ui6_draw_cloaked"	"1"
	UiData6
	{
		"ui"								"ui/hcog_lower"
		"mesh"						"models/weapons/attachments/hcog2_rui_lower"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui8_enable"		"0"
	UiData8
	{
		"ui"									"ui/pro_screen_panel"
		"mesh"							"models/weapons/attachments/pro_screen_rui_upper"
		Args
		{
			proValue							proscreen_int0
			proOwnedByPlayer			proscreen_owner_is_player
		}
	}

	active_crosshair_count				"1"
	rui_crosshair_index					"0"

	RUI_CrosshairData
	{
		DefaultArgs
		{
			adjustedSpread			weapon_spread
			adsFrac 					player_zoomFrac
			isSprinting					player_is_sprinting
			isReloading				weapon_is_reloading
			teamColor					crosshair_team_color
			isAmped					weapon_is_amped
		}

		Crosshair_1
		{
			"ui"							"ui/crosshair_wingman_n"
			"base_spread"				"0"
			Args
			{
				//isFiring				weapon_is_firing
			}
		}
	}
}
WeaponData
{
	// General
	"printname"   									"#WPN_WINGMAN_N"
	"shortprintname"								"#WPN_WINGMAN_N_SHORT"
	"description" 									"#WPN_WINGMAN_N_DESC"
	"longdesc" 										"#WPN_WINGMAN_N_LONGDESC"

	"fast_swap_to"									"1"

	"menu_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_wingman_elite"
	"hud_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_wingman_elite"

	"weaponClass" 									"human"
	"weaponSubClass"								"sidearm"
	"body_type"										"light"
	"fire_mode"   									"semi-auto"
	"pickup_hold_prompt"  							"Hold [USE] [WEAPONNAME]"
	"pickup_press_prompt" 							"[USE] [WEAPONNAME]"
	"minimap_reveal_distance"						"32000"
	"leveled_pickup"								"1"

	"OnWeaponPrimaryAttack"							"OnWeaponPrimaryAttack_weapon_sniper"

	"damage_flags"									"DF_BULLET | DF_KNOCK_BACK | DF_DISMEMBERMENT"

	// Menu
	"menu_category"                                 "handgun"
	"menu_anim_class"                               "small"
	"stat_damage" 									"91"
	"stat_range"  									"60"
	"stat_accuracy"   								"25"
	"stat_rof"										"27"

	// Models
	"viewmodel"   									"models/weapons/wingman_elite/ptpov_wingman_elite.mdl"
	"playermodel" 									"models/weapons/wingman_elite/w_wingman_elite.mdl"
	"projectilemodel" 								"models/weapons/bullets/projectile_20mm.mdl"
	
	"smart_ammo_search_distance"  					"10000000"
	"smart_ammo_max_targeted_burst"					"12"
	"smart_ammo_targeting_time_min"					"0.00"
	"smart_ammo_targeting_time_max"					"0.00"
	"smart_ammo_targeting_time_min_npc"				"0.1"
	"smart_ammo_targeting_time_max_npc"				"0.1"

	// Effects
//	"tracer_effect_first_person"                    "P_wpn_tracer"
//	"tracer_effect"   								"P_wpn_tracer"
	"impact_effect_table" 							"wingman_elite"
	"vortex_absorb_effect"							"wpn_vortex_projectile_rifle_FP"
	"vortex_absorb_effect_third_person"				"wpn_vortex_projectile_rifle"
	"vortex_absorb_sound"							"Vortex_Shield_AbsorbBulletSmall"
	"vortex_absorb_sound_1P_VS_3P"					"Vortex_Shield_AbsorbBulletSmall_1P_VS_3P"
	"projectile_adjust_to_gun_barrel"				"1"

	"projectile_trail_effect_0" 					"weapon_kraber_projectile"
	"projectile_do_predict_impact_effects"			"1"//0"


	//"fx_shell_eject_view"							"wpn_shelleject_pistol_FP"
	//"fx_shell_eject_world"							"wpn_shelleject_pistol"
	//"fx_shell_eject_attach"							"shell"

	"fx_muzzle_flash_view"							"wpn_muzzleflash_pistol_FP"
	"fx_muzzle_flash_world"							"wpn_muzzleflash_pistol"
	"fx_muzzle_flash_attach"						"muzzle_flash"

	// Sounds
	"sound_dryfire"									"pistol_dryfire"
	"sound_pickup"									"wpn_pickup_Pistol_1P"
	"fire_sound_1"									"Weapon_bulletCasings.Bounce"
	"fire_sound_2_player_1p"						"Weapon_Wingman_Elite_Fire_1P"
	"fire_sound_2_player_3p"						"Weapon_Wingman_Elite_Fire_3P"
	"fire_sound_2_npc"								"Weapon_Wingman_Fire_NPC"
	"sound_zoom_in"									"Weapon_Wingman_ADS_In"
	"sound_zoom_out"								"Weapon_Wingman_ADS_Out"

	"low_ammo_sound_name_1"							"Wingman_LowAmmo_Shot1"
	"low_ammo_sound_name_2"							"Wingman_LowAmmo_Shot2"
	"low_ammo_sound_name_3"							"Wingman_LowAmmo_Shot3"

	// Network
	"net_optimize"		                            "0"

	"damage_type" 									"bullet"

	"critical_hit_damage_scale"						"1"

	"ammo_clip_size"   								"6"
  	"titanarmor_critical_hit_required"              "1"

	dof_zoom_focusArea_horizontal					0.06
	dof_zoom_focusArea_top							0.070
	dof_zoom_focusArea_bottom						-0.011


	"ammo_default_total"							"160"
	"ammo_stockpile_max"							"160"
	"ammo_no_remove_from_stockpile"					"1"
	"ammo_min_to_fire"								"1"

	"aimassist_adspull_weaponclass"					"precise"

	"critical_hit"									"1"

	// Bolt info
	"bolt_hitsize"									"0.0"
	"bolt_hitsize_grow1_time"						"0.035"
	"bolt_hitsize_grow1_size"						"0.5"
	"bolt_hitsize_grow2_time"						"0.08"
	"bolt_hitsize_grow2_size"						"1.0"
	"bolt_hitsize_growfinal_lerptime"				"0.18"
	"bolt_hitsize_growfinal_size"					"2.0"

	"bolt_gravity_enabled"							"1"
	"bolt_gravity_amount"							"0.2500"//0.500"

	"bolt_bounce_frac"								"0.000"
	"projectile_damage_reduction_per_bounce"		"0.0"
	"projectile_damages_owner"						"0"
	"projectile_ricochet_max_count"					"0"

	"pass_through_depth"							"32"
	"pass_through_damage_preserved_scale"			"1"

	"bolt_speed"									"12000"

	// Damage - When Used by Players
	"damage_near_value"   							"75"
	"damage_far_value"								"55"
	"damage_near_distance"							"1500"
	"damage_far_distance" 							"2000"
	"damage_near_value_titanarmor"					"300"
	"damage_far_value_titanarmor" 					"250"
	"damage_rodeo" 									"350"

   	"damage_very_far_value"							"35"
   	"damage_very_far_distance"						"3500"

	"damage_headshot_scale"							"2"

	"red_crosshair_range" 							"1500"

	// Damage - When Used by NPCs
	"npc_damage_near_value"   						"10"
	"npc_damage_far_value"							"8"
	"npc_damage_near_distance"						"1000"
	"npc_damage_far_distance" 						"1200"

	// NPC
	"npc_min_engage_range"							"0"
	"npc_max_engage_range"							"1000"
	"npc_min_engage_range_heavy_armor"				"200"
	"npc_max_engage_range_heavy_armor"				"2000"
	"npc_min_range"   								"0"
	"npc_max_range"   								"8000"

	"npc_min_burst"   								"1"
	"npc_max_burst"   								"3"
	"npc_rest_time_between_bursts_min"				"0.3"
	"npc_rest_time_between_bursts_max"				"0.6"

	"damage_heavyarmor_nontitan_scale"				"0.35"

	"proficiency_poor_spreadscale"					"5.0"
	"proficiency_average_spreadscale" 				"5.0"
	"proficiency_good_spreadscale"					"1.66667"
	"proficiency_very_good_spreadscale"   			"1.66667"

	"viewmodel_offset_ads"							"0 0 0"
	"dof_zoom_nearDepthStart"						"4.750"
	"dof_zoom_nearDepthEnd"							"11.000"
	"dof_nearDepthStart"							"3.683"
	"dof_nearDepthEnd"								"6.652"

	// Behavior
	"fire_rate"   									"2.6"
	"smart_ammo_allow_search_while_firing"			"1"
	"smart_ammo_allow_ads_lock"						"1" // "0" is default

	"zoom_time_in"									"0.1"
	"zoom_time_out"   								"0.1"
	"zoom_fov"										"50"
	"reload_time" 									"2.1"
	"reload_time_late1" 							"1.75"
	"reload_time_late2" 							"0.60"
	"reloadempty_time"								"2.1"
	"reloadempty_time_late1"						"1.75"
	"reloadempty_time_late2"						"0.65"
	"holster_time"									"0.1"
	"deploy_time" 									"0.1"
	"lower_time"  									"0.1"
	"raise_time"  									"0.1"
	"vortex_refire_behavior"  						"bullet"
	"allow_empty_fire"								"0"
	"reload_enabled"  								"1"
	"allow_empty_click"   							"1"
	"empty_reload_only"   							"0"
	"trigger_snipercam"   							"1"
	"allow_headshots" 								"1"
//	"headshot_distance" 							"1400"
	"primary_fire_does_not_block_sprint"			"0"
	"ads_move_speed_scale"							"0.75"
	"aimassist_disable_hipfire"						"0"
	"aimassist_disable_ads"							"0"
	"aimassist_disable_hipfire_titansonly"			"0"
	"aimassist_disable_ads_titansonly"				"0"

	"sprint_fractional_anims"						"0"

	"impulse_force"   								"10"
	"ammo_suck_behavior"							"primary_weapons"

	// View Kick
	"viewkick_spring" 								"magnum"

	"viewkick_pitch_base" 							"-0.5"
	"viewkick_pitch_random"   						".2"
	"viewkick_pitch_softScale"						"0.4"
	"viewkick_pitch_hardScale"						"2.0"

	"viewkick_yaw_base"   							"0.05"
	"viewkick_yaw_random" 							"0.0"
	"viewkick_yaw_softScale"  						"0.5"
	"viewkick_yaw_hardScale"  						"1.5"

	"viewkick_roll_base"  							"0"
	"viewkick_roll_randomMin" 						"0.2"
	"viewkick_roll_randomMax" 						"0.4"
	"viewkick_roll_softScale" 						"0.2"
	"viewkick_roll_hardScale" 						"2.25"

	"viewkick_hipfire_weaponFraction" 				"0.25"
	"viewkick_hipfire_weaponFraction_vmScale" 		"0.0"
	"viewkick_ads_weaponFraction" 					"0.35"
	"viewkick_ads_weaponFraction_vmScale" 			"0.0"

	"viewkick_perm_pitch_base"				 		"0.0"
	"viewkick_perm_pitch_random"   					"0.0"
	"viewkick_perm_yaw_base"   						"0.0"
	"viewkick_perm_yaw_random" 						"0.0"

	//
	"viewmodel_shake_forward"						"0.5"
	"viewmodel_shake_up"							"0.2"
	"viewmodel_shake_right"							"0.0"

	// Bob
	"bob_cycle_time"  								"0.4"
	"bob_vert_dist"   								"0.19"
	"bob_horz_dist"   								"0.1"
	"bob_max_speed"   								"150"
	"bob_pitch"   									"0.75"
	"bob_yaw" 										"-1.7"
	"bob_roll"										"1.2"

	// Bob_Zoomed
	"bob_cycle_time_zoomed"  						"0.4"
	"bob_vert_dist_zoomed"   						"0.01"
	"bob_horz_dist_zoomed"   						"0.01"
	"bob_max_speed_zoomed"   						"150"
	//"bob_pitch_zoomed"   							"0.002"
	//"bob_yaw_zoomed" 								"-.002"
	//"bob_roll_zoomed"								".002"

	// Rumble
	"fire_rumble"									"rumble_pistol_heavy"

	// Sway
	"sway_rotate_attach"  							"SWAY_ROTATE"
	"sway_min_x"  									"-0.5"
	"sway_min_y"  									"-0.5"
	"sway_min_z"  									"-0.6"
	"sway_max_x"  									"0.5"
	"sway_max_y"  									"0.5"
	"sway_max_z"  									"0.6"
	"sway_min_pitch"  								"-3"
	"sway_min_yaw"									"-2.5"
	"sway_min_roll"   								"-4"
	"sway_max_pitch"  								"3"
	"sway_max_yaw"									"2.5"
	"sway_max_roll"   								"4"
	"sway_translate_gain" 							"2.5"
	"sway_rotate_gain"								"7"
	"sway_move_forward_translate_x"   				"-0.1"
	"sway_move_forward_translate_z"   				"-0.5"
	"sway_move_back_translate_x"  					"0.2"
	"sway_move_back_translate_z"  					"-0.2"
	"sway_move_left_translate_y"  					"-1"
	"sway_move_left_translate_z"  					"-0.5"
	"sway_move_left_rotate_roll"  					"-4"
	"sway_move_right_translate_y" 					"1"
	"sway_move_right_translate_z" 					"-0.5"
	"sway_move_right_rotate_roll" 					"4"
	"sway_move_up_translate_z"						"-1"
	"sway_move_down_translate_z"  					"1"
	"sway_turn_left_rotate_yaw"   					"-2.5"
	"sway_turn_right_rotate_yaw"  					"2.5"

	"sway_turn_left_translate_y"  					".5"
	"sway_turn_right_translate_y"  					"-.5"
	"sway_turn_up_translate_z"  					".2"
	"sway_turn_down_translate_z"  					"-.2"
	"sway_turn_up_translate_x"  					".1"
	"sway_turn_down_translate_x"  					"-.1"

	"sway_turn_left_rotate_roll"   					"4"
	"sway_turn_right_rotate_roll"  					"-4"
	"sway_turn_up_rotate_pitch"   					"3"
	"sway_turn_down_rotate_pitch" 					"-3"
	"sway_turn_up_rotate_roll"   					"-0.8"
	"sway_turn_down_rotate_roll" 					"0.8"

	// Zoomed Sway
	"sway_rotate_attach_zoomed"						"SWAY_ROTATE_ZOOMED"
	"sway_rotate_attach_blend_time_zoomed"			"0.2"
	"sway_rotate_gain_zoomed"						"5"

	"sway_min_yaw_zoomed"							"-0.04"
	"sway_max_yaw_zoomed"							"0.04"
	"sway_turn_left_rotate_yaw_zoomed"				"-0.085"
	"sway_turn_right_rotate_yaw_zoomed"				"0.085"

	"sway_min_roll_zoomed"   						"-1"
	"sway_max_roll_zoomed"   						"1"
	"sway_turn_left_rotate_roll_zoomed"   			"-1"
	"sway_turn_right_rotate_roll_zoomed"  			"1"

	"sway_move_right_rotate_roll_zoomed" 			"0.2"
	"sway_move_left_rotate_roll_zoomed"  			"-0.2"

	"sway_min_pitch_zoomed"  						"-0.03"
	"sway_max_pitch_zoomed"  						"0.04"
	"sway_turn_up_rotate_pitch_zoomed"				"0.07"
	"sway_turn_down_rotate_pitch_zoomed"			"-0.07"

	// Spread
	"spread_stand_hip" 								"0"
	"spread_stand_hip_run" 							"0"
	"spread_stand_hip_sprint"						"0"
	"spread_crouch_hip"								"0"
	"spread_air_hip"	   							"0"
	"spread_stand_ads"  							"0" //"0.15"
	"spread_crouch_ads"  							"0" //"0.1"
	"spread_air_ads"   								"0" //"0.25"

	"spread_kick_on_fire_stand_hip"					"0"
	"spread_kick_on_fire_crouch_hip"				"0"
	"spread_kick_on_fire_air_hip"					"0"
	"spread_kick_on_fire_stand_ads"					"0"
	"spread_kick_on_fire_crouch_ads"				"0"
	"spread_kick_on_fire_air_ads"					"0"

	"spread_max_kick_stand_hip"						"0"
	"spread_max_kick_crouch_hip"					"0"
	"spread_max_kick_air_hip"						"0"
	"spread_max_kick_stand_ads"						"0"
	"spread_max_kick_crouch_ads"					"0"
	"spread_max_kick_air_ads"						"0"

	"spread_decay_rate"   							"11.0"
	"spread_decay_delay"  							".21"

	// WeaponED Unhandled Key/Values and custom script Key/Values
	"sprintcycle_time"								"0.55"
	"deployfirst_time"								"1.25"
	"activitymodifier"								"pistol"
	"holster_type"									"pistol"
	"smart_ammo_allow_search_while_firing"			"1"
	"smart_ammo_allow_ads_lock"						"1" // "0" is default
	"smart_ammo_search_angle" 						"360"
	"smart_ammo_search_npcs"						"0"
	"smart_ammo_search_players"						"1"
	"smart_ammo_search_projectiles"					"0"
	"smart_ammo_titans_block_los"					"1"
	"smart_ammo_track_cloaked_targets"				"1"
	"smart_ammo_targeting_time_modifier_projectile_owner"	"0.00"
	"smart_ammo_target_max_locks_normal"			"10"	// divide health by damage near
	"smart_ammo_target_npc_lock_factor"				"10"		// smart pistol does head shots at 2x damage
	"smart_ammo_new_target_delay"					"0.1"
	"smart_ammo_draw_acquisition_lines"				"0"
	"smart_ammo_hud_lock_style"						"pilot_pistol"
	"smart_ammo_hud_type" 							"smart_pistol"
	"smart_ammo_target_confirmed_sound"				"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_target_confirming_sound"			"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_looping_sound_acquiring"			"Weapon_SmartPistol_TargetLockingLoop"
	"smart_ammo_lock_type"							"small"
	"smart_ammo_alert_npc_fraction"					"0.1" 	// unaware since lock on fraction will not go above 1
	"smart_ammo_allow_hip_fire_lock"				"1"
	"smart_ammo_lock_effect_3p"						"P_smartpistol_lockon"
	"smart_ammo_lock_effect_attachment"				"muzzle_flash"
	"smart_ammo_player_targets_must_be_tracked"		"0"
	"smart_ammo_npc_targets_must_be_tracked"		"0"
	"smart_ammo_tracker_status_effects"				"0"
	"smart_ammo_tracked_targets_check_visibility"	"0"
	"threat_scope_enabled"			"1"
	
	// Bodygroups:
	"bodygroup1_name"	"suppressor_cyl_sm"
	"bodygroup1_set"	"0"
	"bodygroup2_name"	"suppressor_sq_sm"
	"bodygroup2_set"	"0"
    "bodygroup3_name"	"sight_cqh"
	"bodygroup3_set"	"0"
	"bodygroup4_name"	"sight_acgs"
	"bodygroup4_set"	"0"
	"bodygroup5_name"	"sight_cro"
	"bodygroup5_set"	"0"
	"bodygroup6_name"	"proscreen"
	"bodygroup6_set"	"0"


    "clip_bodygroup"						"b3wing_magazine"
    "clip_bodygroup_index_shown"			"0"
    "clip_bodygroup_index_hidden"			"1"
    "clip_bodygroup_show_for_milestone_0"	"1"
    "clip_bodygroup_show_for_milestone_1"	"0"
    "clip_bodygroup_show_for_milestone_2"	"1"
    "clip_bodygroup_show_for_milestone_3"	"1"

	Mods
	{
		iron_sights
		{
		}
		extended_ammo
		{
			"ammo_stockpile_max"				"160"
			"ammo_clip_size"   					"8"
			"ammo_default_total"				"160"
		}
		silencer //HACK JFS: Doesn't get applied on amped weapons. See bug 170460
		{
			"silenced"							"1"
			"fire_sound_2_player_1p"			"Weapon_Wingman_FireSuppressed_1P"
			"fire_sound_2_player_3p"			"Weapon_Wingman_FireSuppressed_3P"
			"fire_sound_2_npc"					"Weapon_Wingman_FireSuppressed_NPC"
			"damage_near_value"   				"--10"
			"damage_far_value"					"--10"
			"damage_very_far_value"				"--10"
			"bodygroup2_set"					"1"

			//"rumble"  						"4"
			"tracer_effect"   					"P_wpn_tracer_pistol"
			"minimap_reveal_distance"			"1"

			"fx_muzzle_flash_view"				"wpn_muzzleflash_pistol_sup_FP"
			"fx_muzzle_flash_world"				"wpn_muzzleflash_pistol_sup"
			"fx_muzzle_flash_attach"			"muzzle_flash_suppressor_sq"
		}
		hcog
		{
			"bodygroup3_set"	"1"
			"bodygroup4_set"	"0"
			"bodygroup5_set"	"0"
			"viewmodel_offset_ads"							"0 -6.7 -0.75"
			"zoom_fov"										"35"
			"anim_alt_idleAttack"	"1"

			"dof_zoom_nearDepthStart"						"6.161"
			"dof_zoom_nearDepthEnd"							"9.204"
		}
		redline_sight
		{
			"bodygroup3_set"	"0"
			"bodygroup4_set"	"1"
			"bodygroup5_set"	"0"
			"viewmodel_offset_ads"							"0 -9 -0.78"
			"dof_zoom_nearDepthStart"						"4.491"
			"dof_zoom_nearDepthEnd"							"5.545"
		}
		threat_scope
		{
			"bodygroup3_set"	"0"
			"bodygroup4_set"	"0"
			"bodygroup5_set"	"1"
			"threat_scope_enabled"			"1"
			"threat_scope_bounds_tagname1"	"SCR_TR_CRO"
			"threat_scope_bounds_tagname2"	"SCR_BL_CRO"
			"viewmodel_offset_ads"							"0 -9 -0.78"
			"dof_zoom_nearDepthStart"						"4.491"
			"dof_zoom_nearDepthEnd"							"5.545"
		}
		pro_screen
		{
			"ui8_enable"		"1"
			"bodygroup6_set"	"1"
		}
		tactical_cdr_on_kill
		{

		}
		pas_fast_reload
		{
			"reload_time"								"*0.7"
			"reload_time_late1"							"*0.7"
			"reloadempty_time"							"*0.7"
			"reloadempty_time_late1"					"*0.7"
		}
		pas_run_and_gun
		{
			"primary_fire_does_not_block_sprint"			"1"
			"crosshair_force_sprint_fade_disabled"          "1"
		}
		pas_fast_ads
		{
			//Fast ADS
			"zoom_time_in"									"*0.5"
			"zoom_time_out"   								"*0.6"
		}
		pas_fast_swap
		{
			//Fast Swap
			"fast_swap_to"									"1"
		}
		ricochet
		{
			"bolt_bounce_frac"								"0.7"
			"projectile_damage_reduction_per_bounce"		"0.0"
			"projectile_damages_owner"						"0"
			"projectile_ricochet_max_count"					"2"
		}
		burn_mod_wingman_n
		{
			//FX
			"tracer_effect"   								"P_wpn_tracer_BC"
			"tracer_effect_first_person"                    "P_wpn_tracer_BC"
			"fx_muzzle_flash_view"							"wpn_muzzleflash_pistol_elec_FP"
			"fx_muzzle_flash_world"							"wpn_muzzleflash_pistol_elec"
			"projectile_trail_effect_0" 					"weapon_kraber_projectile_burn"
			"impact_effect_table"		 					"titan_bullet_elec"

			"is_burn_mod"		"1"

			"damage_near_value"   							"++20"
			"damage_far_value"								"++20"
   	 		"damage_very_far_value"							"++20"
			"damage_near_value_titanarmor"					"450"
			"damage_far_value_titanarmor" 					"400"
		}
	}

	"ui1_enable"		"1"
	UiData1
	{
		"ui"							"ui/b3wing_ammo_counter"
		"mesh"					"models/weapons/attachments/b3wing_rui_lower"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui6_enable"		"1"
	"ui6_draw_cloaked"	"1"
	UiData6
	{
		"ui"								"ui/r97_reticle"
		"mesh"							"models/weapons/attachments/r97_rui_upper"
		Args
		{
			vis							player_zoomfrac
		}
	}

	"ui8_enable"		"0"
	UiData8
	{
		"ui"									"ui/pro_screen_panel"
		"mesh"							"models/weapons/attachments/pro_screen_rui_upper"
		Args
		{
			proValue							proscreen_int0
			proOwnedByPlayer			proscreen_owner_is_player
		}
	}

	active_crosshair_count				"1"
	rui_crosshair_index					"0"

	RUI_CrosshairData
	{
		DefaultArgs
		{
			adjustedSpread				weapon_spread
			adsFrac 					player_zoomFrac
			isSprinting					player_is_sprinting
			isReloading					weapon_is_reloading
			teamColor					crosshair_team_color
			isAmped						weapon_is_amped
			crosshairMovementX          crosshair_movement_x
			crosshairMovementY          crosshair_movement_y
		}

		Crosshair_1
		{
			"ui"						"ui/crosshair_wingman_n"
			"base_spread"				"0"
			Args
			{
				isFiring				weapon_is_firing
			}
		}
	}
}
WeaponData
{
	// General
	"printname"   									"#WPN_VINSON"
	"shortprintname"								"#WPN_VINSON_SHORT"
	"description" 									"#WPN_VINSON_DESC"
	"longdesc"										"#WPN_VINSON_LONGDESC"

	"menu_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_vinson"
	"hud_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_vinson"

	"weaponClass" 									"human"
	"body_type"										"medium"
	"fire_mode"   									"auto"
	"pickup_hold_prompt"  							"Hold [USE] [WEAPONNAME]"
	"pickup_press_prompt" 							"[USE] [WEAPONNAME]"
	"minimap_reveal_distance"						"32000"
	"leveled_pickup"								"1"

	"damage_flags"									"DF_BULLET | DF_DISMEMBERMENT"

	// Menu
	"menu_category"                                 "ar"
	"menu_anim_class"                               "medium"
	"stat_damage" 									"70"
	"stat_range"  									"65"
	"stat_accuracy"   								"45"
	"stat_rof"										"60"

	// Models
	"viewmodel"   									"models/weapons/vinson/ptpov_vinson.mdl"
	"playermodel" 									"models/weapons/vinson/w_vinson.mdl"

	// Effects
	"tracer_effect"   								"P_wpn_tracer"
	"tracer_effect_first_person"                    "P_wpn_tracer"
	"vortex_absorb_effect"							"wpn_vortex_projectile_rifle_FP"
	"vortex_absorb_effect_third_person"				"wpn_vortex_projectile_rifle"
	"vortex_absorb_sound"							"Vortex_Shield_AbsorbBulletSmall"
	"vortex_absorb_sound_1P_VS_3P"					"Vortex_Shield_AbsorbBulletSmall_1P_VS_3P"
	"projectile_adjust_to_gun_barrel"				"1"

	"fx_shell_eject_view"							"wpn_shelleject_rifle_assault_FP"
	"fx_shell_eject_world"							"wpn_shelleject_rifle_assault"
	"fx_shell_eject_attach"							"shell"

	"fx_muzzle_flash_view"							"wpn_muzzleflash_smg_FP"
	"fx_muzzle_flash_world"							"wpn_muzzleflash_smg"
	"fx_muzzle_flash_attach"						"muzzle_flash"

	//Sounds
	"sound_dryfire"									"Weapon_Vinson_Trigger"
	"sound_pickup"									"wpn_pickup_Rifle_1P"
	"sound_trigger_pull"							"Weapon_Vinson_Trigger"
	"fire_sound_1_player_1p"						"Vinson_shell"
	"fire_sound_1_player_3p"						"Weapon_bulletCasings.Bounce"
	"fire_sound_2_player_1p"						"Weapon_Vinson_SecondShot_1P"
	"fire_sound_2_player_3p"						"Weapon_Vinson_SecondShot_3P"
	"fire_sound_2_npc"								"Weapon_Vinson_SecondShot_NPC"
//	"fire_sound_3_player_1p"						"Weapon_HemlokSMG_Fire_First_1P"
//	"fire_sound_3_player_3p"						"Weapon_HemlokSMG_Fire_First_3P"
	"sound_zoom_in"									"Weapon_R101_ADS_In"
	"sound_zoom_out"								"Weapon_R101_ADS_Out"

	"burst_or_looping_fire_sound_start_1p"			"Weapon_Vinson_FirstShot_1P"
	"burst_or_looping_fire_sound_middle_1p"			"Weapon_Vinson_Loop_1P"
	"burst_or_looping_fire_sound_end_1p"			"Weapon_Vinson_LoopEnd_1P"

	"burst_or_looping_fire_sound_start_3p"			""
	"burst_or_looping_fire_sound_middle_3p"			"Weapon_Vinson_Loop_3P"
	"burst_or_looping_fire_sound_end_3p"			"Weapon_Vinson_LoopEnd_3P"

	"burst_or_looping_fire_sound_start_npc"			""
	"burst_or_looping_fire_sound_middle_npc"		"Weapon_Vinson_Loop_3p_NPC_a"
	"burst_or_looping_fire_sound_end_npc"			"Weapon_Vinson_LoopEnd_NPC"

	"looping_sounds"								"1"

	"low_ammo_sound_name_1"							"Vinson_LowAmmo_Shot1"

	// Network
	"net_optimize"		                            "1"

	"damage_type" 									"bullet"

	"explosion_damage"								"0"

	"explosionradius" 								"0"
	"critical_hit_damage_scale"						"1"

	// Ammo
	"ammo_clip_size"   								"30"

	dof_zoom_focusArea_horizontal					0.04
	dof_zoom_focusArea_top							0.060
	dof_zoom_focusArea_bottom						-0.0055


    "titanarmor_critical_hit_required"              "1"
	"critical_hit"									"1"

	MP_BASE
	{
		"ammo_default_total"							"300"
		"ammo_stockpile_max"							"300"
		"ammo_no_remove_from_stockpile"					"1"
		"ammo_min_to_fire"								"1"

		"aimassist_adspull_weaponclass"					"precise"

		"damage_near_value"   							"30"//35
		"damage_far_value"								"20"//30
		"damage_near_value_titanarmor"					"100"
		"damage_far_value_titanarmor" 					"80"
		"damage_rodeo" 									"100"
		"damage_near_distance"							"1500"
		"damage_far_distance" 							"2000"

   	 	"damage_very_far_value"							"15"
   		"damage_very_far_distance"						"3500"

		"damage_headshot_scale"							"1.5"

		"red_crosshair_range" 							"1500"

		"npc_damage_near_value"   						"24"
		"npc_damage_far_value"							"15"
		"npc_damage_near_value_titanarmor"				"0"
		"npc_damage_far_value_titanarmor" 				"0"

		"npc_max_range"   								"2500"
		"npc_max_engage_range"							"2000"
		"npc_max_engage_range_heavy_armor"				"2500"

		"enable_highlight_networking_on_creation"		"<KEEP_DEFAULT>"

		"viewkick_air_scale_ads"						"2.0"

		"damage_heavyarmor_nontitan_scale"				"0.35"
		"red_crosshair_range" 							"1"

		"smart_ammo_search_distance"  					"10000000"
		"smart_ammo_max_targeted_burst"					"12"
		"smart_ammo_targeting_time_min"					"0.00"
		"smart_ammo_targeting_time_max"					"0.00"
		"smart_ammo_targeting_time_min_npc"				"0.1"
		"smart_ammo_targeting_time_max_npc"				"0.1"

	}

	SP_BASE
	{
		"ammo_default_total"							"150"
		"ammo_stockpile_max"							"240"
		"ammo_no_remove_from_stockpile"					"0"
		"ammo_min_to_fire"								"1"

		"aimassist_adspull_weaponclass"					"precise_sp"

		"damage_near_value"   							"35"
		"damage_far_value"								"20"
		"damage_near_value_titanarmor"					"33"
		"damage_far_value_titanarmor" 					"19"
		"damage_rodeo" 									"100"
		"damage_near_distance"							"1250"
		"damage_far_distance" 							"1400"

   	 	"damage_very_far_value"							"<KEEP_DEFAULT>"
   		"damage_very_far_distance"						"<KEEP_DEFAULT>"

		"damage_headshot_scale"							"3"

		"red_crosshair_range" 							"1250"

		"npc_damage_near_value"   						"17"
		"npc_damage_far_value"							"10"
		"npc_damage_near_value_titanarmor"				"<KEEP_DEFAULT>"
		"npc_damage_far_value_titanarmor" 				"<KEEP_DEFAULT>"

		"npc_max_range"   								"4000"
		"npc_max_engage_range"							"2000"
		"npc_max_engage_range_heavy_armor"				"3000"

		"enable_highlight_networking_on_creation"		"1"

		"viewkick_air_scale_ads"						"1"

		"damage_heavyarmor_nontitan_scale"				"1"
	}

	// NPC
	"proficiency_poor_spreadscale"					"5.0"
	"proficiency_average_spreadscale" 				"3.5"
	"proficiency_good_spreadscale"					"3.0"
	"proficiency_very_good_spreadscale"   			"2.5"
	"proficiency_perfect_spreadscale"   			"1.75"

	"npc_min_engage_range"							"0"
	"npc_min_engage_range_heavy_armor"				"500"

	"npc_min_burst"   								"2"
	"npc_max_burst"   								"3"
	"npc_rest_time_between_bursts_min"				"0.8"
	"npc_rest_time_between_bursts_max"				"1.2"

	"viewmodel_offset_ads"							"0 0 0"
	"dof_zoom_nearDepthStart"						"6.380"
	"dof_zoom_nearDepthEnd"							"8.550"
	"dof_nearDepthStart"							"2.683"
	"dof_nearDepthEnd"								"5.652"

	// Behavior
	"fire_rate"   									"10"

	"smart_ammo_allow_search_while_firing"			"1"
	"smart_ammo_allow_ads_lock"						"1" // "0" is default
	"zoom_time_in"									"0.1"
	"zoom_time_out"   								"0.1"
	"smart_ammo_allow_search_while_firing"			"1"
	"smart_ammo_allow_ads_lock"						"1" // "0" is default
	"smart_ammo_search_angle" 						"360"
	"smart_ammo_search_npcs"						"0"
	"smart_ammo_search_players"						"1"
	"smart_ammo_search_projectiles"					"0"
	"smart_ammo_titans_block_los"					"1"
	"smart_ammo_track_cloaked_targets"				"1"
	"smart_ammo_targeting_time_modifier_projectile_owner"	"0.00"
	"smart_ammo_target_max_locks_normal"			"10"	// divide health by damage near
	"smart_ammo_target_npc_lock_factor"				"10"		// smart pistol does head shots at 2x damage
	"smart_ammo_new_target_delay"					"0.1"
	"smart_ammo_draw_acquisition_lines"				"0"
	"smart_ammo_hud_lock_style"						"pilot_pistol"
	"smart_ammo_hud_type" 							"smart_pistol"
	"smart_ammo_target_confirmed_sound"				"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_target_confirming_sound"			"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_looping_sound_acquiring"			"Weapon_SmartPistol_TargetLockingLoop"
	"smart_ammo_lock_type"							"small"
	"smart_ammo_alert_npc_fraction"					"0.1" 	// unaware since lock on fraction will not go above 1
	"smart_ammo_allow_hip_fire_lock"				"1"
	"smart_ammo_lock_effect_3p"						"P_smartpistol_lockon"
	"smart_ammo_lock_effect_attachment"				"muzzle_flash"
	"smart_ammo_player_targets_must_be_tracked"		"0"
	"smart_ammo_npc_targets_must_be_tracked"		"0"
	"smart_ammo_tracker_status_effects"				"0"
	"smart_ammo_tracked_targets_check_visibility"	"0"
	"threat_scope_enabled"			"1"
	"zoom_fov"										"35"
	"reload_time" 									"2.073"
	"reload_time_late1"								"0.6"
	"reloadempty_time"								"2.7"
	"reloadempty_time_late1"						"1.4"
	"reloadempty_time_late2"						"0.5"
	"holster_time"									"0.5"
	"deploy_time" 									"0.7"
	"lower_time"  									"0.25"
	"raise_time"  									"0.3"
	"vortex_refire_behavior"  						"bullet"
	"allow_empty_fire"								"0"
	"reload_enabled"  								"1"
	"allow_empty_click"   							"1"
	"empty_reload_only"   							"0"
	"trigger_snipercam"   							"0"
	"allow_headshots" 								"1"
	"headshot_distance" 							"1400"
	"primary_fire_does_not_block_sprint"			"0"
	"ads_move_speed_scale"							"0.5"
	"aimassist_disable_hipfire"						"0"
	"aimassist_disable_ads"							"0"
	"aimassist_disable_hipfire_titansonly"			"1"
	"aimassist_disable_ads_titansonly"				"1"

	"sprint_fractional_anims"						"0"

	// Spread

	"spread_stand_hip"								"1.0"
	"spread_stand_hip_run"							"1.0"
	"spread_stand_hip_sprint"                       "1.0"
	"spread_crouch_hip"   							"1.0"
	"spread_air_hip"  								"5.0"

	"spread_stand_ads"								"0.0" //"0.35"
	"spread_crouch_ads"   							"0.0" //"0.35"
	"spread_air_ads"  								"0.0" //"0.5"

	"spread_kick_on_fire_stand_hip"   				"0.5"
	"spread_kick_on_fire_crouch_hip"  				"0.5"
	"spread_kick_on_fire_air_hip" 					"0.5"


	"spread_kick_on_fire_stand_ads"   				"0"
	"spread_kick_on_fire_crouch_ads"  				"0"
	"spread_kick_on_fire_air_ads" 					"0"

	"spread_max_kick_stand_hip"   					"2.0"
	"spread_max_kick_crouch_hip"  					"2.0"
	"spread_max_kick_air_hip" 						"2.0"

	"spread_max_kick_stand_ads"   					"0"
	"spread_max_kick_crouch_ads"  					"0"
	"spread_max_kick_air_ads" 						"5"

	"spread_wallrunning"  							"5.0"
	"spread_wallhanging"  							"6.5"

	"spread_decay_delay"  							"0.1"
	"spread_decay_rate"   							"4"

	"ammo_suck_behavior"							"primary_weapons"

	// View Kick
	"viewkick_spring" 								"rspn101"

	"viewkick_pitch_base" 							"0.0"
	"viewkick_pitch_random"   						"0.1"
	"viewkick_pitch_softScale"						"1" //"0.25"
	"viewkick_pitch_hardScale"						"0" //"0.75"

	"viewkick_yaw_base"   							"-0.25"
	"viewkick_yaw_random" 							"1.125"
	"viewkick_yaw_random_innerexclude"				"0.1"
	"viewkick_yaw_softScale"  						"0.5"
	"viewkick_yaw_hardScale"  						"0.5"

	"viewkick_roll_base"  							"0"
	"viewkick_roll_randomMin" 						"0.2"
	"viewkick_roll_randomMax" 						"0.5"
	"viewkick_roll_softScale" 						"1"
	"viewkick_roll_hardScale" 						"0"
	"viewkick_hipfire_weaponFraction" 				"0.65"
	"viewkick_hipfire_weaponFraction_vmScale" 		"1.7"
	"viewkick_ads_weaponFraction" 					"0.0"
	"viewkick_ads_weaponFraction_vmScale" 			"1.0"

	"viewkick_scale_firstshot_hipfire"		 		"2"
	"viewkick_scale_firstshot_ads"					"0"
	"viewkick_scale_min_hipfire"  					"1.5"
	"viewkick_scale_max_hipfire"  					"2.0"
	"viewkick_scale_min_ads"  						"1.5"
	"viewkick_scale_max_ads"  						"2.0"
	"viewkick_scale_valuePerShot" 					"1.0"
	"viewkick_scale_valueLerpStart"   				"0"
	"viewkick_scale_valueLerpEnd" 					"3"
	"viewkick_scale_valueDecayDelay"  				"0.3"
	"viewkick_scale_valueDecayRate"   				"25"


	"viewkick_perm_pitch_base" 						"0"
	"viewkick_perm_pitch_random"   					"0"
	"viewkick_perm_yaw_base"   						"0"
	"viewkick_perm_yaw_random" 						"0"

	"viewkick_duck_scale"							"0.9"
	"viewkick_hover_scale"							"1.5"


	//
	"viewmodel_shake_forward"						"0.0"
	"viewmodel_shake_up"							"0.0"
	"viewmodel_shake_right"							"0.0"


	// Bob
	"bob_cycle_time"  								"0.4"
	"bob_vert_dist"   								"0.19"
	"bob_horz_dist"   								"0.1"
	"bob_max_speed"   								"173"
	"bob_pitch"   									"0.75"
	"bob_yaw" 										"-1.7"
	"bob_roll"										"1.2"

	// Bob_Zoomed
	"bob_cycle_time_zoomed"  						"0.4"
	"bob_vert_dist_zoomed"   						"0.01"
	"bob_horz_dist_zoomed"   						"0.01"
	"bob_max_speed_zoomed"   						"150"
	//"bob_pitch_zoomed"   							"0.002"
	//"bob_yaw_zoomed" 								"-.002"
	//"bob_roll_zoomed"								".002"


	// Rumble
	"fire_rumble"									"rumble_assault_rifle"

	// Sway
	"sway_rotate_attach"  							"SWAY_ROTATE"
	"sway_min_x"  									"-0.5"
	"sway_min_y"  									"-0.5"
	"sway_min_z"  									"-0.6"
	"sway_max_x"  									"0.5"
	"sway_max_y"  									"0.5"
	"sway_max_z"  									"0.6"
	"sway_min_pitch"  								"-3"
	"sway_min_yaw"									"-2.5"
	"sway_min_roll"   								"-4"
	"sway_max_pitch"  								"3"
	"sway_max_yaw"									"2.5"
	"sway_max_roll"   								"4"
	"sway_translate_gain" 							"2.5"
	"sway_rotate_gain"								"7"
	"sway_move_forward_translate_x"   				"-0.1"
	"sway_move_forward_translate_z"   				"-0.5"
	"sway_move_back_translate_x"  					"0.2"
	"sway_move_back_translate_z"  					"-0.2"
	"sway_move_left_translate_y"  					"-1"
	"sway_move_left_translate_z"  					"-0.5"
	"sway_move_left_rotate_roll"  					"-4"
	"sway_move_right_translate_y" 					"1"
	"sway_move_right_translate_z" 					"-0.5"
	"sway_move_right_rotate_roll" 					"4"
	"sway_move_up_translate_z"						"-1"
	"sway_move_down_translate_z"  					"1"
	"sway_turn_left_rotate_yaw"   					"-2.5"
	"sway_turn_right_rotate_yaw"  					"2.5"

	"sway_turn_left_translate_y"  					".5"
	"sway_turn_right_translate_y"  					"-.5"
	"sway_turn_up_translate_z"  					".2"
	"sway_turn_down_translate_z"  					"-.2"
	"sway_turn_up_translate_x"  					".1"
	"sway_turn_down_translate_x"  					"-.1"

	"sway_turn_left_rotate_roll"   					"4"
	"sway_turn_right_rotate_roll"  					"-4"
	"sway_turn_up_rotate_pitch"   					"3"
	"sway_turn_down_rotate_pitch" 					"-3"
	"sway_turn_up_rotate_roll"   					"-0.8"
	"sway_turn_down_rotate_roll" 					"0.8"

	// Zoomed Sway
	"sway_rotate_attach_zoomed"						"SWAY_ROTATE_ZOOMED"
	"sway_rotate_attach_blend_time_zoomed"			"0.2"
	"sway_rotate_gain_zoomed"						"5"

	"sway_min_yaw_zoomed"							"-0.04"
	"sway_max_yaw_zoomed"							"0.04"
	"sway_turn_left_rotate_yaw_zoomed"				"-0.085"
	"sway_turn_right_rotate_yaw_zoomed"				"0.085"

	"sway_min_roll_zoomed"   						"-1"
	"sway_max_roll_zoomed"   						"1"
	"sway_turn_left_rotate_roll_zoomed"   			"-1"
	"sway_turn_right_rotate_roll_zoomed"  			"1"

	"sway_move_right_rotate_roll_zoomed" 			"0.2"
	"sway_move_left_rotate_roll_zoomed"  			"-0.2"

	"sway_min_pitch_zoomed"  						"-0.03"
	"sway_max_pitch_zoomed"  						"0.04"
	"sway_turn_up_rotate_pitch_zoomed"				"0.07"
	"sway_turn_down_rotate_pitch_zoomed"			"-0.07"

	// WeaponED Unhandled Key/Values and custom script Key/Values
	"deployfirst_time"								"1.25"
	"sprintcycle_time"								"0.55"

	// Bodygroups:
	"bodygroup1_name"	"sight_rear_on"
	"bodygroup1_set"	"1"
	"bodygroup2_name"	"sight_hcog"
	"bodygroup2_set"	"0"
	"bodygroup3_name"	"sight_acgs"
	"bodygroup3_set"	"0"
	"bodygroup4_name"	"sight_cro"
	"bodygroup4_set"	"0"
	"bodygroup5_name"	"proscreen"
	"bodygroup5_set"	"0"
	//"bodygroup6_name"	"suppressor_sq_med"
	//"bodygroup6_set"	"0"

	Mods
	{
		iron_sights
		{

		}
		hcog
		{
			"bodygroup1_set"	            "0"
			"bodygroup2_set"	            "1"
			"bodygroup3_set"	            "0"
			"bodygroup4_set"	            "0"
			//"anim_alt_idleAttack"	"1"
			"viewmodel_offset_ads"							"0 -5 -.71"
			"dof_zoom_nearDepthStart"						"6.652"
			"dof_zoom_nearDepthEnd"							"8.734"
			"ui1_enable"												"0"
			"ui2_enable"												"0"
			"ui5_enable"		"1"
			"ui6_enable"		"1"
			dof_zoom_focusArea_horizontal					0.085
			dof_zoom_focusArea_top							0.18
			dof_zoom_focusArea_bottom						-0.06
		}

		redline_sight
		{
			"bodygroup1_set"	            "0"
			"bodygroup2_set"	            "0"
			"bodygroup3_set"	            "1"
			"bodygroup4_set"	            "0"
			"viewmodel_offset_ads"							"0 -5.6 -.33"
			"dof_zoom_nearDepthStart"						"5.691"
			"dof_zoom_nearDepthEnd"							"6.745"
			"ui1_enable"												"0"
			"ui2_enable"												"0"
			"ui3_enable"												"1"
			"zoom_fov"						"25"
			dof_zoom_focusArea_horizontal					0.085
			dof_zoom_focusArea_top							0.080
			dof_zoom_focusArea_bottom						-0.047
		}

		threat_scope
		{
			"bodygroup1_set"	            "0"
			"bodygroup2_set"	            "0"
			"bodygroup3_set"	            "0"
			"bodygroup4_set"	            "1"
			"ui1_enable"	"0"
			"ui2_enable"	"0"
			"ui3_enable"	"0"
			"ui4_enable"	"1"

			"viewmodel_offset_ads"							"0 -6 -.361"
			"dof_zoom_nearDepthStart"						"5.737"
			"dof_zoom_nearDepthEnd"							"6.226"

			"threat_scope_enabled"			"1"
			"threat_scope_bounds_tagname1"	"SCR_TR_CRO"
			"threat_scope_bounds_tagname2"	"SCR_BL_CRO"
			dof_zoom_focusArea_horizontal					0.068
			dof_zoom_focusArea_top							0.065
			dof_zoom_focusArea_bottom						-0.046
		}
		pas_run_and_gun
		{
			"primary_fire_does_not_block_sprint"			"1"
			"crosshair_force_sprint_fade_disabled"          "1"
		}
		smart_lock
		{

		}

		pro_screen
		{
			"ui8_enable"		"1"
			"bodygroup5_set"	"1"
		}
		extended_ammo
		{
			"ammo_stockpile_max"			"525"
			"ammo_clip_size"   				"36"
			"ammo_default_total"			"525"
		}
		pas_fast_reload
		{
			"reload_time"					"*0.7"
			"reload_time_late1"				"*0.7"
			"reloadempty_time"				"*0.7"
			"reloadempty_time_late1"		"*0.7"
		}
		pas_fast_ads
		{
			//Fast ADS
			"zoom_time_in"									"*0.5"
			"zoom_time_out"   								"*0.6"
		}
		pas_fast_swap
		{
			//Fast Swap
			"fast_swap_to"									"1"
		}
		burn_mod_vinson
		{
			"is_burn_mod"		            "1"

			//FX
			"tracer_effect"   				"P_wpn_tracer_BC"
			"tracer_effect_first_person"    "P_wpn_tracer_BC"
			"fx_muzzle_flash_view"			"wpn_muzzleflash_smg_elec_FP"
			"fx_muzzle_flash_world"			"wpn_muzzleflash_smg_elec"

			"damage_near_value"   							"++5"//35
			"damage_far_value"								"++5"//30
   	 		"damage_very_far_value"							"++3"
			"damage_near_value_titanarmor"					"200"
			"damage_far_value_titanarmor" 					"180"

		}
		test_impacts
		{
			"impact_effect_table"		"vinson_test"
		}
		tactical_cdr_on_kill
		{

		}

		training_low_ammo_disable
		{
			"low_ammo_fraction" 							"0.0"
		}

	}

	"ui1_enable"		"1"
	"ui1_draw_cloaked"	"1"
	UiData1
	{
		"ui"							"ui/vinson_sights"
		"mesh"							"models/weapons/attachments/vinson_rui_upper"
		Args
		{
			vis							player_zoomfrac
		}
	}

	"ui2_enable"		"1"
	"ui2_draw_cloaked"	"1"
	UiData2
	{
		"ui"							"ui/vinson_bar"
		"mesh"							"models/weapons/attachments/vinson_rui_lower"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui3_enable"		"0"
	"ui3_draw_cloaked"	"1"
	UiData3
	{
		"ui"							"ui/acgs_redline"
		"mesh"							"models/weapons/attachments/acgs_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui4_enable"		"0"
	"ui4_draw_cloaked"	"1"
	UiData4
	{
		"ui"							"ui/cro_threat_front"
		"mesh"							"models/weapons/attachments/cro_rui_upper"
		Args
		{
			zoomFrac					player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

		"ui5_enable"		"0"
	"ui5_draw_cloaked"	"1"
	UiData5
	{
		"ui"								"ui/hcog_upper"
		"mesh"						"models/weapons/attachments/hcog2_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui6_enable"		"0"
	"ui6_draw_cloaked"	"1"
	UiData6
	{
		"ui"								"ui/hcog_lower"
		"mesh"						"models/weapons/attachments/hcog2_rui_lower"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui8_enable"		"0"
	UiData8
	{
		"ui"									"ui/pro_screen_panel"
		"mesh"							"models/weapons/attachments/pro_screen_rui_upper"
		Args
		{
			proValue							proscreen_int0
			proOwnedByPlayer			proscreen_owner_is_player
		}
	}

	active_crosshair_count				"1"
	rui_crosshair_index					"0"

	RUI_CrosshairData
	{
		DefaultArgs
		{
			adjustedSpread				weapon_spread
			adsFrac 					player_zoomFrac
			isSprinting					player_is_sprinting
			isReloading					weapon_is_reloading
			teamColor					crosshair_team_color
			isAmped						weapon_is_amped
			crosshairMovementX          crosshair_movement_x
		    crosshairMovementY          crosshair_movement_y
		}

		Crosshair_0
		{
			"ui"						"ui/crosshair_alternator"
			"base_spread"				"1.5"
			Args
			{
				isFiring				weapon_is_firing
			}
		}
	}
}
WeaponData
{
	// General
	"printname"   									"#WPN_RSPN101"
	"shortprintname"								"#WPN_RSPN101_SHORT"
	"description" 									"#WPN_RSPN101_DESC"
	"longdesc"										"#WPN_RSPN101_LONGDESC"

	"menu_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_r102"
	"hud_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_r102"

	"weaponClass" 									"human"
	"weaponSubClass"								"rifle"
	"body_type"										"medium"
	"fire_mode"   									"auto"
	"pickup_hold_prompt"  							"Hold [USE] [WEAPONNAME]"
	"pickup_press_prompt" 							"[USE] [WEAPONNAME]"
	"minimap_reveal_distance"						"32000"
	"leveled_pickup"								"1"

	// Menu
	"menu_category"                                 "ar"
	"menu_anim_class"                               "medium"
	"stat_damage" 									"55"
	"stat_range"  									"65"
	"stat_accuracy"   								"90"
	"stat_rof"										"80"

	// Models
	"viewmodel"   									"models/weapons/rspn101/ptpov_rspn101.mdl"
	"playermodel" 									"models/weapons/rspn101/w_rspn101.mdl"
	"holstermodel"									"models/weapons/rspn101/w_rspn101_stow.mdl"
	"holster_type"									"rifle"

	// Effects
	"tracer_effect_first_person"                    "P_wpn_tracer"
	"tracer_effect"   								"P_wpn_tracer"
	"vortex_absorb_effect"							"wpn_vortex_projectile_rifle_FP"
	"vortex_absorb_effect_third_person"				"wpn_vortex_projectile_rifle"
	"vortex_absorb_sound"							"Vortex_Shield_AbsorbBulletSmall"
	"vortex_absorb_sound_1P_VS_3P"					"Vortex_Shield_AbsorbBulletSmall_1P_VS_3P"
	"projectile_adjust_to_gun_barrel"				"1"

	"fx_shell_eject_view"							"wpn_shelleject_rifle_assault_FP"
	"fx_shell_eject_world"							"wpn_shelleject_rifle_assault"
	"fx_shell_eject_attach"							"shell"

	"fx_muzzle_flash_view"							"wpn_muzzleflash_smg_FP"
	"fx_muzzle_flash_world"							"wpn_muzzleflash_smg"
	"fx_muzzle_flash_attach"						"muzzle_flash"

	//Sounds
	"sound_dryfire"									"assault_rifle_dryfire"
	"sound_pickup"									"wpn_pickup_Rifle_1P"
	"sound_trigger_pull"							"assault_rifle_dryfire"
	"fire_sound_1_player_1p"						"R101_shell"
	"fire_sound_1_player_3p"						"R101_shell"
	"fire_sound_2_player_1p"						"Weapon_R101_SecondShot_1P"
	"fire_sound_2_player_3p"						"Weapon_R101_SecondShot_3P"
	"fire_sound_2_npc"								"Weapon_r101_secondshot_npc"
	"sound_zoom_in"									"Weapon_R101_ADS_In"
	"sound_zoom_out"								"Weapon_R101_ADS_Out"

	"looping_sounds"								"1"

	"burst_or_looping_fire_sound_start_1p"			"Weapon_R101_FirstShot_1P"
	"burst_or_looping_fire_sound_middle_1p"			"Weapon_R101_Loop_1P"
	"burst_or_looping_fire_sound_end_1p"			"Weapon_R101_LoopEnd_1P"

	"burst_or_looping_fire_sound_start_3p"			""
	"burst_or_looping_fire_sound_middle_3p"			"Weapon_R101_Loop_3P"
	"burst_or_looping_fire_sound_end_3p"			"Weapon_R101_LoopEnd_3P"

	"burst_or_looping_fire_sound_start_npc"			""
	"burst_or_looping_fire_sound_middle_npc"		"weapon_r101_loop_3p_npc_a"
	"burst_or_looping_fire_sound_end_npc"			""

	"low_ammo_sound_name_1"							"R101_LowAmmo_Shot1"

	// Network
	"net_optimize"		                            "1"

	// Damage - When Used by Players
	"damage_type" 									"bullet"

	"explosion_damage"								"0"
	"damage_rodeo" 									"100"

	"explosionradius" 								"0"
	"critical_hit_damage_scale"						"1"


   "titanarmor_critical_hit_required"              "1"
	"critical_hit"									"1"



	MP_BASE
	{
		"ammo_clip_size"   								"24"
		"ammo_default_total"							"240"
		"ammo_stockpile_max"							"240"
		"ammo_no_remove_from_stockpile"					"1"
		"ammo_min_to_fire"								"1"

		"aimassist_adspull_weaponclass"					"precise"

		"damage_flags"									"DF_BULLET | DF_INSTANT | DF_DISMEMBERMENT"

		"damage_near_value"   							"25"//33
		"damage_far_value"								"17"//15

		"damage_near_value_titanarmor"					"70"
		"damage_far_value_titanarmor" 					"50"

		"damage_near_distance"							"1500"
		"damage_far_distance" 							"2000"

	    "damage_very_far_value"							"12"
	    "damage_very_far_distance"						"3500"



		"damage_headshot_scale"							"1.5"

		"red_crosshair_range" 							"1500"

		// NPC
		"proficiency_poor_spreadscale"					"5.0"
		"proficiency_average_spreadscale" 				"2.0"
		"proficiency_good_spreadscale"					"3.0"
		"proficiency_very_good_spreadscale"   			"2.5"
		"proficiency_perfect_spreadscale"   			"<KEEP_DEFAULT>"

		"npc_damage_near_value"   						"10"
		"npc_damage_far_value"							"8"
		"npc_damage_near_value_titanarmor"				"0"
		"npc_damage_far_value_titanarmor" 				"0"

		"npc_min_engage_range"							"0"

		"npc_max_range"   								"2500"
		"npc_max_engage_range"							"2000"
		"npc_min_engage_range_heavy_armor"				"500"
		"npc_max_engage_range_heavy_armor"				"2000"

		"enable_highlight_networking_on_creation"		"<KEEP_DEFAULT>"

		"viewkick_air_scale_ads"						"2.0"
		"spread_air_hip"  								"2.0"

		"damage_heavyarmor_nontitan_scale"				"0.35"
	}

	SP_BASE
	{
		"ammo_clip_size"   								"32"
		"ammo_default_total"							"160"
		"ammo_stockpile_max"							"256"
		"ammo_no_remove_from_stockpile"					"0"
		"ammo_min_to_fire"								"1"

		"aimassist_adspull_weaponclass"					"precise_sp"

		"damage_flags"									"DF_BULLET | DF_DISMEMBERMENT"

		"damage_near_value"   							"25"
		"damage_far_value"								"15"
		"damage_near_value_titanarmor"					"30"
		"damage_far_value_titanarmor" 					"22"
		"damage_near_distance"							"1250"
		"damage_far_distance" 							"1400"

   	 	"damage_very_far_value"							"<KEEP_DEFAULT>"
   		"damage_very_far_distance"						"<KEEP_DEFAULT>"

		"damage_headshot_scale"							"3"

		"red_crosshair_range" 							"1250"

		"enable_highlight_networking_on_creation"		"1"

		"viewkick_air_scale_ads"						"1"
		"spread_air_hip"  								"0"

		// NPC
		"proficiency_poor_spreadscale"					"5.0"
		"proficiency_average_spreadscale" 				"3.5"
		"proficiency_good_spreadscale"					"3.0"
		"proficiency_very_good_spreadscale"   			"2.5"
		"proficiency_perfect_spreadscale"   			"1.75"

                // new settings incoming:
		// "proficiency_very_good_spreadscale"   			"1.66667"
		// "proficiency_very_good_bias"  					"0.9"

		"npc_min_engage_range"							"0"
		"npc_min_engage_range_heavy_armor"				"500"

		"npc_damage_near_value"   						"13"
		"npc_damage_far_value"							"8"
		"npc_damage_near_value_titanarmor"				"<KEEP_DEFAULT>"
		"npc_damage_far_value_titanarmor" 				"<KEEP_DEFAULT>"

		"npc_max_range"   								"4000"
		"npc_max_engage_range"							"2000"
		"npc_max_engage_range_heavy_armor"				"3000"

		"damage_heavyarmor_nontitan_scale"				"1"
	}

	"proficiency_poor_additional_rest"				"0.2"
	"proficiency_average_additional_rest"			"0.2"
	"proficiency_good_additional_rest"				"0.2"

	"npc_min_burst"   								"2"
	"npc_max_burst"   								"4"
	"npc_rest_time_between_bursts_min"				"0.5"
	"npc_rest_time_between_bursts_max"				"0.8"

	// Behavior
	"fire_rate"   									"13.5"

	"zoom_time_in"									"0.25"
	"zoom_time_out"   								"0.2"
	"zoom_fov"										"35"

	"viewmodel_offset_ads"							"0 0 0"

	"dof_zoom_nearDepthStart"						"1.750"
	"dof_zoom_nearDepthEnd"							"6.500"
	"dof_nearDepthStart"							"1.241"
	"dof_nearDepthEnd"								"5.652"

	"reload_time" 									"2.2"
	"reload_time_late1"								"1.65"
	"reloadempty_time"								"2.92"
	"reloadempty_time_late1"						"2.38"
	"reloadempty_time_late2"						"1.46"
	"holster_time"									"0.5"
	"deploy_time" 									"0.7"
	"lower_time"  									"0.25"
	"raise_time"  									"0.3"
	"vortex_refire_behavior"  						"bullet"
	"allow_empty_fire"								"0"
	"reload_enabled"  								"1"
	"allow_empty_click"   							"1"
	"empty_reload_only"   							"0"
	"trigger_snipercam"   							"0"
	"allow_headshots" 								"1"
	"headshot_distance" 							"1400"
	"primary_fire_does_not_block_sprint"			"0"
	"ads_move_speed_scale"							"0.5"
	"aimassist_disable_hipfire"						"0"
	"aimassist_disable_ads"							"0"
	"aimassist_disable_hipfire_titansonly"			"0"
	"aimassist_disable_ads_titansonly"				"0"
	"sprint_fractional_anims"						"0"

	// Spread

	"spread_stand_hip"								"2.0"
	"spread_stand_hip_run"							"2.0"
	"spread_stand_hip_sprint"                       "2.0"
	"spread_crouch_hip"   							"2.0"


	"spread_stand_ads"								"0"
	"spread_crouch_ads"   							"0"
	"spread_air_ads"  								"0"

	"spread_kick_on_fire_stand_hip"   				"0.5"
	"spread_kick_on_fire_crouch_hip"  				"0.5"
	"spread_kick_on_fire_air_hip" 					"0.5"


	"spread_kick_on_fire_stand_ads"   				"0"
	"spread_kick_on_fire_crouch_ads"  				"0"
	"spread_kick_on_fire_air_ads" 					"0"

	"spread_max_kick_stand_hip"   					"8.0"
	"spread_max_kick_crouch_hip"  					"5.0"
	"spread_max_kick_air_hip" 						"8.0"

	"spread_max_kick_stand_ads"   					"0"
	"spread_max_kick_crouch_ads"  					"0"
	"spread_max_kick_air_ads" 						"0"

	"spread_wallhanging"  							"6.5"

	"spread_decay_delay"  							"0.05"
	"spread_decay_rate"   							"5"

	"ammo_suck_behavior"							"primary_weapons"

	// View Kick
	"viewkick_spring" 								"rspn101"

	"viewkick_pitch_base" 							"-0.25"
	"viewkick_pitch_random"   						"0.5"
	"viewkick_pitch_softScale"						"1"
	"viewkick_pitch_hardScale"						"0.5"

	"viewkick_yaw_base"   							"0.0"
	"viewkick_yaw_random" 							"0.5"
	"viewkick_yaw_random_innerexclude"				"0.15"
	"viewkick_yaw_softScale"  						"1.2"
	"viewkick_yaw_hardScale"  						"0.8"

	"viewkick_roll_base"  							"0"
	"viewkick_roll_randomMin" 						"0.3"
	"viewkick_roll_randomMax" 						"0.4"
	"viewkick_roll_softScale" 						"0.2"
	"viewkick_roll_hardScale" 						"1.85"

	"viewkick_hipfire_weaponFraction" 				"0.5"
	"viewkick_hipfire_weaponFraction_vmScale" 		"1.5"
	"viewkick_ads_weaponFraction" 					"0.0"
	"viewkick_ads_weaponFraction_vmScale" 			"1.0"

	//"viewkick_scale_firstshot_hipfire"			"0.0"
	"viewkick_scale_firstshot_ads"					"1.25"
	"viewkick_scale_min_hipfire"  					"1.5"
	"viewkick_scale_max_hipfire"  					"2.0"
	"viewkick_scale_min_ads"  						"1.5"
	"viewkick_scale_max_ads"  						"2.5"
	"viewkick_scale_valuePerShot" 					"1.0"
	"viewkick_scale_valueLerpStart"   				"0"
	"viewkick_scale_valueLerpEnd" 					"2"
	"viewkick_scale_valueDecayDelay"  				"0.3"
	"viewkick_scale_valueDecayRate"   				"25"


	"viewkick_perm_pitch_base" 						"0.0"
	"viewkick_perm_pitch_random"   					"0.0"
	"viewkick_perm_yaw_base"   						"0.0"
	"viewkick_perm_yaw_random" 						"0.0"

	"viewkick_duck_scale"							"0.9"



	//
	"viewmodel_shake_forward"						"0.0"
	"viewmodel_shake_up"							"0.0"
	"viewmodel_shake_right"							"0.0"


	// Bob
	"bob_cycle_time"  								"0.4"
	"bob_vert_dist"   								"0.19"
	"bob_horz_dist"   								"0.1"
	"bob_max_speed"   								"173"
	"bob_pitch"   									"0.75"
	"bob_yaw" 										"-1.7"
	"bob_roll"										"1.2"

	// Bob_Zoomed
	"bob_cycle_time_zoomed"  						"0.4"
	"bob_vert_dist_zoomed"   						"0.01"
	"bob_horz_dist_zoomed"   						"0.01"
	"bob_max_speed_zoomed"   						"150"
	//"bob_pitch_zoomed"   							"0.002"
	//"bob_yaw_zoomed" 								"-.002"
	//"bob_roll_zoomed"								".002"

	// Rumble
	"fire_rumble"									"rumble_assault_rifle"

	// Sway
	"sway_rotate_attach"  							"SWAY_ROTATE"
	"sway_min_x"  									"-0.5"
	"sway_min_y"  									"-0.5"
	"sway_min_z"  									"-0.6"
	"sway_max_x"  									"0.5"
	"sway_max_y"  									"0.5"
	"sway_max_z"  									"0.6"
	"sway_min_pitch"  								"-3"
	"sway_min_yaw"									"-2.5"
	"sway_min_roll"   								"-4"
	"sway_max_pitch"  								"3"
	"sway_max_yaw"									"2.5"
	"sway_max_roll"   								"4"
	"sway_translate_gain" 							"2.5"
	"sway_rotate_gain"								"7"
	"sway_move_forward_translate_x"   				"-0.1"
	"sway_move_forward_translate_z"   				"-0.5"
	"sway_move_back_translate_x"  					"0.2"
	"sway_move_back_translate_z"  					"-0.2"
	"sway_move_left_translate_y"  					"-1"
	"sway_move_left_translate_z"  					"-0.5"
	"sway_move_left_rotate_roll"  					"-4"
	"sway_move_right_translate_y" 					"1"
	"sway_move_right_translate_z" 					"-0.5"
	"sway_move_right_rotate_roll" 					"4"
	"sway_move_up_translate_z"						"-1"
	"sway_move_down_translate_z"  					"1"
	"sway_turn_left_rotate_yaw"   					"-2.5"
	"sway_turn_right_rotate_yaw"  					"2.5"

	"sway_turn_left_translate_y"  					".5"
	"sway_turn_right_translate_y"  					"-.5"
	"sway_turn_up_translate_z"  					".2"
	"sway_turn_down_translate_z"  					"-.2"
	"sway_turn_up_translate_x"  					".1"
	"sway_turn_down_translate_x"  					"-.1"

	"sway_turn_left_rotate_roll"   					"4"
	"sway_turn_right_rotate_roll"  					"-4"
	"sway_turn_up_rotate_pitch"   					"3"
	"sway_turn_down_rotate_pitch" 					"-3"
	"sway_turn_up_rotate_roll"   					"-0.8"
	"sway_turn_down_rotate_roll" 					"0.8"

	// Zoomed Sway
	"sway_rotate_attach_zoomed"						"SWAY_ROTATE_ZOOMED"
	"sway_rotate_attach_blend_time_zoomed"			"0.2"
	"sway_rotate_gain_zoomed"						"5"

	"sway_min_yaw_zoomed"							"-0.04"
	"sway_max_yaw_zoomed"							"0.04"
	"sway_turn_left_rotate_yaw_zoomed"				"-0.085"
	"sway_turn_right_rotate_yaw_zoomed"				"0.085"

	"sway_min_roll_zoomed"   						"-1"
	"sway_max_roll_zoomed"   						"1"
	"sway_turn_left_rotate_roll_zoomed"   			"-1"
	"sway_turn_right_rotate_roll_zoomed"  			"1"

	"sway_move_right_rotate_roll_zoomed" 			"0.2"
	"sway_move_left_rotate_roll_zoomed"  			"-0.2"

	"sway_min_pitch_zoomed"  						"-0.03"
	"sway_max_pitch_zoomed"  						"0.04"
	"sway_turn_up_rotate_pitch_zoomed"				"0.07"
	"sway_turn_down_rotate_pitch_zoomed"			"-0.07"

	// WeaponED Unhandled Key/Values and custom script Key/Values
	"deployfirst_time"								"1.25"
	"sprintcycle_time"								".55"

	// Bodygroups:
	"bodygroup1_name"	"r101_sight_on"
	"bodygroup1_set"	"1"
	"bodygroup2_name"	"sight_acgs"
	"bodygroup2_set"	"0"
	"bodygroup3_name"	"sight_hcog"
	"bodygroup3_set"	"0"
	"bodygroup4_name"	"sight_cro"
	"bodygroup4_set"	"0"
	"bodygroup5_name"	"proscreen"
	"bodygroup5_set"	"0"

	"clip_bodygroup"						"r101_magazine"
	"clip_bodygroup_index_shown"			"0"
	"clip_bodygroup_index_hidden"			"1"
	"clip_bodygroup_show_for_milestone_0"	"1"
	"clip_bodygroup_show_for_milestone_1"	"0"
	"clip_bodygroup_show_for_milestone_2"	"1"
	"clip_bodygroup_show_for_milestone_3"	"1"


	dof_zoom_focusArea_horizontal					0.061
	dof_zoom_focusArea_top							0.064
	dof_zoom_focusArea_bottom						-0.016

	Mods
	{

		iron_sights
		{

		}
		hcog
		{
			//"anim_alt_idleAttack"	"1"
			"bodygroup1_set"	"0"
			"bodygroup2_set"	"0"
			"bodygroup3_set"	"1"
			"bodygroup4_set"	"0"

			"ui1_enable"		"0"
			"ui5_enable"		"1"
			"ui6_enable"		"1"

			//"sway_min_yaw_zoomed"							"-0.13"
			//"sway_max_yaw_zoomed"							"0.13"
			//"sway_min_pitch_zoomed"  						"-0.11"
			//"sway_max_pitch_zoomed"  						"0.11"

			"dof_zoom_nearDepthStart"						"6.652"
			"dof_zoom_nearDepthEnd"							"8.734"
			"viewmodel_offset_ads"							"0 -2 -.75"

			dof_zoom_focusArea_horizontal					0.085
			dof_zoom_focusArea_top							0.18
			dof_zoom_focusArea_bottom						-0.06
		}

		redline_sight
		{
			"ui1_enable"		"0"
			"ui3_enable"		"1"

			"bodygroup1_set"	"0"
			"bodygroup2_set"	"1"
			"bodygroup3_set"	"0"
			"bodygroup4_set"	"0"
			"dof_zoom_nearDepthStart"						"5.691"
			"dof_zoom_nearDepthEnd"							"6.745"
			"viewmodel_offset_ads"							"0 -2.6 -.385"
			"zoom_fov"						"25"
			dof_zoom_focusArea_horizontal					0.073
			dof_zoom_focusArea_top							0.080
			dof_zoom_focusArea_bottom						-0.041
		}

		threat_scope
		{
			"bodygroup1_set"	"0"
			"bodygroup2_set"	"0"
			"bodygroup3_set"	"0"
			"bodygroup4_set"	"1"
			"dof_zoom_nearDepthStart"						"5.737"
			"dof_zoom_nearDepthEnd"							"6.226"
			"viewmodel_offset_ads"							"0 -3 -.405"

			"ui1_enable"		"0"
			"ui4_enable"		"1"

			"threat_scope_enabled"			"1"
			"threat_scope_bounds_tagname1"	"SCR_TR_CRO"
			"threat_scope_bounds_tagname2"	"SCR_BL_CRO"
			dof_zoom_focusArea_horizontal					0.068
			dof_zoom_focusArea_top							0.065
			dof_zoom_focusArea_bottom						-0.046
		}

		extended_ammo
		{
			"ammo_stockpile_max"				"450"
			"ammo_clip_size"   					"30"
			"ammo_default_total"				"450"
		}
		tactical_cdr_on_kill
		{

		}
		pas_run_and_gun
		{
			"primary_fire_does_not_block_sprint"			"1"
			"crosshair_force_sprint_fade_disabled"          "1"
		}
		smart_lock
		{

		}

		pro_screen
		{
			"ui8_enable"			"1"
			"bodygroup5_set"	"1"
		}

		pas_fast_reload
		{
			"reload_time"						"*0.7"
			"reload_time_late1"					"*0.7"
			"reloadempty_time"					"*0.7"
			"reloadempty_time_late1"			"*0.7"
		}
		pas_fast_ads
		{
			//Fast ADS
			"zoom_time_in"									"*0.5"
			"zoom_time_out"   								"*0.6"
		}
		pas_fast_swap
		{
			//Fast Swap
			"fast_swap_to"									"1"
		}
		burn_mod_rspn101
		{
			"is_burn_mod"		"1"

			//FX
			"tracer_effect"   								"P_wpn_tracer_BC"
			"tracer_effect_first_person"                    "P_wpn_tracer_BC"
			"fx_muzzle_flash_view"							"wpn_muzzleflash_smg_elec_FP"
			"fx_muzzle_flash_world"							"wpn_muzzleflash_smg_elec"

			"damage_near_value"   							"++10"
			"damage_far_value"								"++4"
			"damage_very_far_value"							"++4"
			"damage_near_value_titanarmor"					"170"
			"damage_far_value_titanarmor" 					"150"
		}
	}

	"ui1_enable"		"1"
	"ui1_draw_cloaked"	"1"
	UiData1
	{
		"ui"							"ui/r101_sights"
		"mesh"					"models/weapons/attachments/r101_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize						weapon_clipSize
		}
	}

	"ui2_enable"		"1"
	UiData2
	{
		"ui"								"ui/r101_ammo_counter"
		"mesh"							"models/weapons/attachments/r101_rui_lower"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize						weapon_clipSize
		}
	}

	"ui3_enable"		"0"
	"ui3_draw_cloaked"	"1"
	UiData3
	{
		"ui"								"ui/acgs_redline"
		"mesh"							"models/weapons/attachments/acgs_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize						weapon_clipSize
		}
	}

	"ui4_enable"		"0"
	"ui4_draw_cloaked"	"1"
	UiData4
	{
		"ui"							"ui/cro_threat_front"
		"mesh"					"models/weapons/attachments/cro_rui_upper"
		Args
		{
			zoomFrac					player_zoomfrac
			ammo						weapon_ammo
			clipSize						weapon_clipSize
		}
	}

	"ui5_enable"		"0"
	"ui5_draw_cloaked"	"1"
	UiData5
	{
		"ui"								"ui/hcog_upper"
		"mesh"						"models/weapons/attachments/hcog2_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize						weapon_clipSize
		}
	}

	"ui6_enable"		"0"
	"ui6_draw_cloaked"	"1"
	UiData6
	{
		"ui"								"ui/hcog_lower"
		"mesh"						"models/weapons/attachments/hcog2_rui_lower"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize						weapon_clipSize
		}
	}

	"ui8_enable"		"0"
	UiData8
	{
		"ui"									"ui/pro_screen_panel"
		"mesh"							"models/weapons/attachments/pro_screen_rui_upper"
		Args
		{
			proValue							proscreen_int0
			proOwnedByPlayer			proscreen_owner_is_player
		}
	}

	active_crosshair_count				"1"
	rui_crosshair_index					"0"

	RUI_CrosshairData
	{
		DefaultArgs
		{
			adjustedSpread				weapon_spread
			adsFrac 					player_zoomFrac
			isSprinting					player_is_sprinting
			isReloading					weapon_is_reloading
			teamColor					crosshair_team_color
			isAmped						weapon_is_amped
			crosshairMovementX          crosshair_movement_x
			crosshairMovementY          crosshair_movement_y
		}

		Crosshair_1
		{
			"ui"						"ui/crosshair_tri"
			"base_spread"				"0.0"
			Args
			{
				//isFiring				weapon_is_firing
			}
		}
	}
}
WeaponData
{
	// General
	"printname"   									"#WPN_RSPN101_OG"
	"shortprintname"								"#WPN_RSPN101_OG_SHORT"
	"description" 									"#WPN_RSPN101_OG_DESC"
	"longdesc"										"#WPN_RSPN101_OG_LONGDESC"

	"menu_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_r101_aog"
	"hud_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_r101_aog"

	"weaponClass" 									"human"
	"weaponSubClass"								"rifle"
	"body_type"										"medium"
	"fire_mode"   									"auto"
	"pickup_hold_prompt"  							"Hold [USE] [WEAPONNAME]"
	"pickup_press_prompt" 							"[USE] [WEAPONNAME]"
	"minimap_reveal_distance"						"32000"
	"leveled_pickup"								"1"

	// Menu
	"menu_category"                                 "ar"
	"menu_anim_class"                               "medium"
	"stat_damage" 									"55"
	"stat_range"  									"65"
	"stat_accuracy"   								"90"
	"stat_rof"										"80"

	// Models
	"viewmodel"   									"models/weapons/r101_sfp/ptpov_r101_sfp.mdl"
	"playermodel" 									"models/weapons/r101_sfp/w_r101_sfp.mdl"
	"holstermodel"									"models/weapons/r101_sfp/w_r101_sfp_stow.mdl"
	"holster_type"									"rifle"

	// Effects
	"bounce_effect_table"							"pulse_blade"
	"impact_effect_table" 							"pulse_blade"
	//"impact_effect_table" 							"pulse_bullet"
	"tracer_effect_first_person"                "P_wpn_tracer_pulse_BC"
	"tracer_effect"   							"P_wpn_tracer_pulse_BC"
	"vortex_absorb_effect"							"wpn_vortex_projectile_rifle_FP"
	"vortex_absorb_effect_third_person"				"wpn_vortex_projectile_rifle"
	"vortex_absorb_sound"							"Vortex_Shield_AbsorbBulletSmall"
	"vortex_absorb_sound_1P_VS_3P"					"Vortex_Shield_AbsorbBulletSmall_1P_VS_3P"
	"projectile_adjust_to_gun_barrel"				"1"

	"sound_dryfire"									"hemlok_dryfire"
	"sound_pickup"									"wpn_pickup_SMG_1P"
	"sound_trigger_pull"							"Weapon_Hemlok_Trigger"
	"sound_zoom_in"									"Weapon_Hemlok_ADS_In"
	"sound_zoom_out"								"Weapon_Hemlok_ADS_Out"

	"fx_shell_eject_view"							"wpn_shelleject_rifle_assault_FP"
	"fx_shell_eject_world"							"wpn_shelleject_rifle_assault"
	"fx_shell_eject_attach"							"shell"

	"fx_muzzle_flash_view"							"wpn_muzzleflash_pulse_FP"
	"fx_muzzle_flash_world"							"wpn_muzzleflash_pulse"
	"fx_muzzle_flash_attach"						"muzzle_flash"

	// Sound
	"looping_sounds"								"1"

	"fire_sound_1_player_1p"						"Weapon_bulletCasings.Bounce"
	"fire_sound_1_player_3p"						"Weapon_bulletCasings.Bounce"

	"fire_sound_2_player_1p"						"Weapon_HemlokSMG_Single_1P"
	"fire_sound_2_player_3p"						"Weapon_HemlokSMG_Single_3P"
	"fire_sound_2_npc"								"Weapon_HemlokSMG_Single_npc"

	"burst_or_looping_fire_sound_start_1p"			"Weapon_HemlokSMG_Fire_First_1P"
	"burst_or_looping_fire_sound_middle_1p"			"Weapon_HemlokSMG_Fire_Loop_1P"
	"burst_or_looping_fire_sound_end_1p"			"Weapon_HemlokSMG_Fire_Last_1P"

	"burst_or_looping_fire_sound_start_3p"			""
	"burst_or_looping_fire_sound_middle_3p"			"Weapon_HemlokSMG_Fire_Loop_3P"
	"burst_or_looping_fire_sound_end_3p"			"Weapon_HemlokSMG_Fire_Last_3P"

	"burst_or_looping_fire_sound_start_npc"			""
	"burst_or_looping_fire_sound_middle_npc"		"Weapon_HemlokSMG_Fire_Loop_NPC"
	"burst_or_looping_fire_sound_end_npc"			"Weapon_HemlokSMG_Fire_Last_NPC"

	"low_ammo_sound_name_1"							"HemlokSMG_LowAmmo_Shot1"

	// Network
	"net_optimize"		                            "1"

	// Damage - When Used by Players
	"damage_type" 									"bullet"
	//"is_smart_pistol"								"1" 
	"explosion_damage"								"0"
	"damage_rodeo" 									"100"

	"explosionradius" 								"0"
	"critical_hit_damage_scale"						"1"


   "titanarmor_critical_hit_required"              "1"
	"critical_hit"									"1"



	MP_BASE
	{
		"ammo_clip_size"   								"24"
		"ammo_default_total"							"240"
		"ammo_stockpile_max"							"240"
		"ammo_no_remove_from_stockpile"					"1"
		"ammo_min_to_fire"								"1"

		"aimassist_adspull_weaponclass"					"precise"

		"damage_flags"									"DF_BULLET | DF_INSTANT | DF_DISMEMBERMENT"

		"damage_near_value"   							"25"//33
		"damage_far_value"								"17"//15

		"damage_near_value_titanarmor"					"70"
		"damage_far_value_titanarmor" 					"50"

		"damage_near_distance"							"1500"
		"damage_far_distance" 							"2000"

	    "damage_very_far_value"							"12"
	    "damage_very_far_distance"						"3500"



		"damage_headshot_scale"							"1.5"

		"red_crosshair_range" 							"1500"
		"smart_ammo_search_distance"  					"10000000"
		"smart_ammo_max_targeted_burst"					"12"
		"smart_ammo_targeting_time_min"					"0.00"//"0.37"
		"smart_ammo_targeting_time_max"					"0.00"//"0.65"
		"smart_ammo_targeting_time_min_npc"				"0.1"
		"smart_ammo_targeting_time_max_npc"				"0.2"

		// NPC
		"proficiency_poor_spreadscale"					"5.0"
		"proficiency_average_spreadscale" 				"2.0"
		"proficiency_good_spreadscale"					"3.0"
		"proficiency_very_good_spreadscale"   			"2.5"
		"proficiency_perfect_spreadscale"   			"<KEEP_DEFAULT>"

		"npc_damage_near_value"   						"10"
		"npc_damage_far_value"							"8"
		"npc_damage_near_value_titanarmor"				"0"
		"npc_damage_far_value_titanarmor" 				"0"

		"npc_min_engage_range"							"0"

		"npc_max_range"   								"2500"
		"npc_max_engage_range"							"2000"
		"npc_min_engage_range_heavy_armor"				"500"
		"npc_max_engage_range_heavy_armor"				"2000"

		"enable_highlight_networking_on_creation"		"<KEEP_DEFAULT>"

		"viewkick_air_scale_ads"						"2.0"
		"spread_air_hip"  								"2.0"

		"damage_heavyarmor_nontitan_scale"				"0.35"
	}

	SP_BASE
	{
		"ammo_clip_size"   								"32"
		"ammo_default_total"							"160"
		"ammo_stockpile_max"							"256"
		"ammo_no_remove_from_stockpile"					"0"
		"ammo_min_to_fire"								"1"

		"aimassist_adspull_weaponclass"					"precise_sp"

		"damage_flags"									"DF_BULLET | DF_DISMEMBERMENT"

		"damage_near_value"   							"25"
		"damage_far_value"								"15"
		"damage_near_value_titanarmor"					"30"
		"damage_far_value_titanarmor" 					"22"
		"damage_near_distance"							"1250"
		"damage_far_distance" 							"1400"

   	 	"damage_very_far_value"							"<KEEP_DEFAULT>"
   		"damage_very_far_distance"						"<KEEP_DEFAULT>"

		"damage_headshot_scale"							"3"

		"red_crosshair_range" 							"1250"

		"enable_highlight_networking_on_creation"		"1"

		"viewkick_air_scale_ads"						"1"
		"spread_air_hip"  								"0"

		// NPC
		"proficiency_poor_spreadscale"					"5.0"
		"proficiency_average_spreadscale" 				"3.5"
		"proficiency_good_spreadscale"					"3.0"
		"proficiency_very_good_spreadscale"   			"2.5"
		"proficiency_perfect_spreadscale"   			"1.75"

                // new settings incoming:
		// "proficiency_very_good_spreadscale"   			"1.66667"
		// "proficiency_very_good_bias"  					"0.9"

		"npc_min_engage_range"							"0"
		"npc_min_engage_range_heavy_armor"				"500"

		"npc_damage_near_value"   						"13"
		"npc_damage_far_value"							"8"
		"npc_damage_near_value_titanarmor"				"<KEEP_DEFAULT>"
		"npc_damage_far_value_titanarmor" 				"<KEEP_DEFAULT>"

		"npc_max_range"   								"4000"
		"npc_max_engage_range"							"2000"
		"npc_max_engage_range_heavy_armor"				"3000"

		"damage_heavyarmor_nontitan_scale"				"1"
	}

	"proficiency_poor_additional_rest"				"0.2"
	"proficiency_average_additional_rest"			"0.2"
	"proficiency_good_additional_rest"				"0.2"

	"npc_min_burst"   								"2"
	"npc_max_burst"   								"4"
	"npc_rest_time_between_bursts_min"				"0.5"
	"npc_rest_time_between_bursts_max"				"0.8"

	// Behavior
	"fire_rate"   									"13.5"
	"smart_ammo_allow_search_while_firing"			"1"
	"smart_ammo_allow_ads_lock"						"1" // "0" is default
	"zoom_time_in"									"0.1"
	"zoom_time_out"   								"0.1"
	"zoom_fov"										"45"

	"viewmodel_offset_ads"							"0 0 -0.85"

	"dof_zoom_nearDepthStart"						"1.750"
	"dof_zoom_nearDepthEnd"							"6.500"
	"dof_nearDepthStart"							"1.241"
	"dof_nearDepthEnd"								"5.652"

	"reload_time" 									"2.2"
	"reload_time_late1"								"1.65"
	"reloadempty_time"								"2.92"
	"reloadempty_time_late1"						"2.38"
	"reloadempty_time_late2"						"1.46"
	"holster_time"									"0.5"
	"deploy_time" 									"0.7"
	"lower_time"  									"0.25"
	"raise_time"  									"0.3"
	"vortex_refire_behavior"  						"bullet"
	"allow_empty_fire"								"0"
	"reload_enabled"  								"1"
	"allow_empty_click"   							"1"
	"empty_reload_only"   							"0"
	"trigger_snipercam"   							"0"
	"allow_headshots" 								"1"
	"headshot_distance" 							"1400"
	"primary_fire_does_not_block_sprint"			"0"
	"ads_move_speed_scale"							"0.5"
	"aimassist_disable_hipfire"						"0"
	"aimassist_disable_ads"							"0"
	"aimassist_disable_hipfire_titansonly"			"0"
	"aimassist_disable_ads_titansonly"				"0"
	"sprint_fractional_anims"						"0"

	// Spread

	"spread_stand_hip"								"2.0"
	"spread_stand_hip_run"							"2.0"
	"spread_stand_hip_sprint"                       "2.0"
	"spread_crouch_hip"   							"2.0"


	"spread_stand_ads"								"0"
	"spread_crouch_ads"   							"0"
	"spread_air_ads"  								"0"

	"spread_kick_on_fire_stand_hip"   				"0.5"
	"spread_kick_on_fire_crouch_hip"  				"0.5"
	"spread_kick_on_fire_air_hip" 					"0.5"


	"spread_kick_on_fire_stand_ads"   				"0"
	"spread_kick_on_fire_crouch_ads"  				"0"
	"spread_kick_on_fire_air_ads" 					"0"

	"spread_max_kick_stand_hip"   					"8.0"
	"spread_max_kick_crouch_hip"  					"5.0"
	"spread_max_kick_air_hip" 						"8.0"

	"spread_max_kick_stand_ads"   					"0"
	"spread_max_kick_crouch_ads"  					"0"
	"spread_max_kick_air_ads" 						"0"

	"spread_wallhanging"  							"6.5"

	"spread_decay_delay"  							"0.05"
	"spread_decay_rate"   							"5"

	"ammo_suck_behavior"							"primary_weapons"

	// View Kick
	"viewkick_spring" 								"rspn101"

	"viewkick_pitch_base" 							"-0.25"
	"viewkick_pitch_random"   						"0.5"
	"viewkick_pitch_softScale"						"1"
	"viewkick_pitch_hardScale"						"0.5"

	"viewkick_yaw_base"   							"0.0"
	"viewkick_yaw_random" 							"0.5"
	"viewkick_yaw_random_innerexclude"				"0.15"
	"viewkick_yaw_softScale"  						"1.2"
	"viewkick_yaw_hardScale"  						"0.8"

	"viewkick_roll_base"  							"0"
	"viewkick_roll_randomMin" 						"0.3"
	"viewkick_roll_randomMax" 						"0.4"
	"viewkick_roll_softScale" 						"0.2"
	"viewkick_roll_hardScale" 						"1.85"

	"viewkick_hipfire_weaponFraction" 				"0.5"
	"viewkick_hipfire_weaponFraction_vmScale" 		"1.5"
	"viewkick_ads_weaponFraction" 					"0.0"
	"viewkick_ads_weaponFraction_vmScale" 			"1.0"

	//"viewkick_scale_firstshot_hipfire"			"0.0"
	"viewkick_scale_firstshot_ads"					"1.25"
	"viewkick_scale_min_hipfire"  					"1.5"
	"viewkick_scale_max_hipfire"  					"2.0"
	"viewkick_scale_min_ads"  						"1.5"
	"viewkick_scale_max_ads"  						"2.0"
	"viewkick_scale_valuePerShot" 					"1.0"
	"viewkick_scale_valueLerpStart"   				"0"
	"viewkick_scale_valueLerpEnd" 					"2"
	"viewkick_scale_valueDecayDelay"  				"0.3"
	"viewkick_scale_valueDecayRate"   				"25"


	"viewkick_perm_pitch_base" 						"0.0"
	"viewkick_perm_pitch_random"   					"0.0"
	"viewkick_perm_yaw_base"   						"0.0"
	"viewkick_perm_yaw_random" 						"0.0"

	"viewkick_duck_scale"							"0.9"



	//
	"viewmodel_shake_forward"						"0.0"
	"viewmodel_shake_up"							"0.0"
	"viewmodel_shake_right"							"0.0"


	// Bob
	"bob_cycle_time"  								"0.4"
	"bob_vert_dist"   								"0.19"
	"bob_horz_dist"   								"0.1"
	"bob_max_speed"   								"173"
	"bob_pitch"   									"0.75"
	"bob_yaw" 										"-1.7"
	"bob_roll"										"1.2"

	// Bob_Zoomed
	"bob_cycle_time_zoomed"  						"0.4"
	"bob_vert_dist_zoomed"   						"0.01"
	"bob_horz_dist_zoomed"   						"0.01"
	"bob_max_speed_zoomed"   						"150"
	//"bob_pitch_zoomed"   							"0.002"
	//"bob_yaw_zoomed" 								"-.002"
	//"bob_roll_zoomed"								".002"

	// Rumble
	"fire_rumble"									"rumble_assault_rifle"

	// Sway
	"sway_rotate_attach"  							"SWAY_ROTATE"
	"sway_min_x"  									"-0.5"
	"sway_min_y"  									"-0.5"
	"sway_min_z"  									"-0.6"
	"sway_max_x"  									"0.5"
	"sway_max_y"  									"0.5"
	"sway_max_z"  									"0.6"
	"sway_min_pitch"  								"-3"
	"sway_min_yaw"									"-2.5"
	"sway_min_roll"   								"-4"
	"sway_max_pitch"  								"3"
	"sway_max_yaw"									"2.5"
	"sway_max_roll"   								"4"
	"sway_translate_gain" 							"2.5"
	"sway_rotate_gain"								"7"
	"sway_move_forward_translate_x"   				"-0.1"
	"sway_move_forward_translate_z"   				"-0.5"
	"sway_move_back_translate_x"  					"0.2"
	"sway_move_back_translate_z"  					"-0.2"
	"sway_move_left_translate_y"  					"-1"
	"sway_move_left_translate_z"  					"-0.5"
	"sway_move_left_rotate_roll"  					"-4"
	"sway_move_right_translate_y" 					"1"
	"sway_move_right_translate_z" 					"-0.5"
	"sway_move_right_rotate_roll" 					"4"
	"sway_move_up_translate_z"						"-1"
	"sway_move_down_translate_z"  					"1"
	"sway_turn_left_rotate_yaw"   					"-2.5"
	"sway_turn_right_rotate_yaw"  					"2.5"

	"sway_turn_left_translate_y"  					".5"
	"sway_turn_right_translate_y"  					"-.5"
	"sway_turn_up_translate_z"  					".2"
	"sway_turn_down_translate_z"  					"-.2"
	"sway_turn_up_translate_x"  					".1"
	"sway_turn_down_translate_x"  					"-.1"

	"sway_turn_left_rotate_roll"   					"4"
	"sway_turn_right_rotate_roll"  					"-4"
	"sway_turn_up_rotate_pitch"   					"3"
	"sway_turn_down_rotate_pitch" 					"-3"
	"sway_turn_up_rotate_roll"   					"-0.8"
	"sway_turn_down_rotate_roll" 					"0.8"

	// Zoomed Sway
	"sway_rotate_attach_zoomed"						"SWAY_ROTATE_ZOOMED"
	"sway_rotate_attach_blend_time_zoomed"			"0.2"
	"sway_rotate_gain_zoomed"						"5"

	"sway_min_yaw_zoomed"							"-0.04"
	"sway_max_yaw_zoomed"							"0.04"
	"sway_turn_left_rotate_yaw_zoomed"				"-0.085"
	"sway_turn_right_rotate_yaw_zoomed"				"0.085"

	"sway_min_roll_zoomed"   						"-1"
	"sway_max_roll_zoomed"   						"1"
	"sway_turn_left_rotate_roll_zoomed"   			"-1"
	"sway_turn_right_rotate_roll_zoomed"  			"1"

	"sway_move_right_rotate_roll_zoomed" 			"0.2"
	"sway_move_left_rotate_roll_zoomed"  			"-0.2"

	"sway_min_pitch_zoomed"  						"-0.03"
	"sway_max_pitch_zoomed"  						"0.04"
	"sway_turn_up_rotate_pitch_zoomed"				"0.07"
	"sway_turn_down_rotate_pitch_zoomed"			"-0.07"

	// WeaponED Unhandled Key/Values and custom script Key/Values
	"deployfirst_time"								"1.25"
	"sprintcycle_time"								".55"
	"smart_ammo_search_angle" 						"360"
	"smart_ammo_search_npcs"						"0"
	"smart_ammo_search_players"						"1"
	"smart_ammo_search_projectiles"					"0"
	"smart_ammo_titans_block_los"					"1"
	"smart_ammo_track_cloaked_targets"				"1"
	"smart_ammo_targeting_time_modifier_projectile_owner"	"0.00"
	"smart_ammo_target_max_locks_normal"			"10"	// divide health by damage near
	"smart_ammo_target_npc_lock_factor"				"10"		// smart pistol does head shots at 2x damage
	"smart_ammo_new_target_delay"					"0.5"
	"smart_ammo_draw_acquisition_lines"				"1"
	"smart_ammo_hud_lock_style"						"pilot_pistol"
	"smart_ammo_hud_type" 							"smart_pistol"
	"smart_ammo_target_confirmed_sound"				"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_target_confirming_sound"			"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_looping_sound_acquiring"			"Weapon_SmartPistol_TargetLockingLoop"
	"smart_ammo_lock_type"							"small"
	"smart_ammo_alert_npc_fraction"					"0.1" 	// unaware since lock on fraction will not go above 1
	"smart_ammo_allow_hip_fire_lock"				"1"
	"smart_ammo_lock_effect_3p"						"P_smartpistol_lockon"
	"smart_ammo_lock_effect_attachment"				"muzzle_flash"
	"smart_ammo_player_targets_must_be_tracked"		"0"
	"smart_ammo_npc_targets_must_be_tracked"		"0"
	"smart_ammo_tracker_status_effects"				"0"
	"smart_ammo_tracked_targets_check_visibility"	"0"
	"threat_scope_enabled"			"1"
	// Bodygroups:
	"bodygroup1_name"	"r101_sight_on"
	"bodygroup1_set"	"1"
	"bodygroup2_name"	"sight_acgs"
	"bodygroup2_set"	"0"
	"bodygroup3_name"	"sight_hcog"
	"bodygroup3_set"	"0"
	"bodygroup4_name"	"sight_cro"
	"bodygroup4_set"	"0"
	"bodygroup5_name"	"proscreen"
	"bodygroup5_set"	"0"
	"bodygroup6_name"	"sight_aog_r1"
	"bodygroup6_set"	"1"

	"clip_bodygroup"						"r101_magazine"
	"clip_bodygroup_index_shown"			"0"
	"clip_bodygroup_index_hidden"			"1"
	"clip_bodygroup_show_for_milestone_0"	"1"
	"clip_bodygroup_show_for_milestone_1"	"0"
	"clip_bodygroup_show_for_milestone_2"	"1"
	"clip_bodygroup_show_for_milestone_3"	"1"


	dof_zoom_focusArea_horizontal					0.061
	dof_zoom_focusArea_top							0.064
	dof_zoom_focusArea_bottom						-0.016

	Mods
	{

		iron_sights
		{

		}
		hcog
		{
			//"anim_alt_idleAttack"	"1"
			"bodygroup1_set"	"0"
			"bodygroup2_set"	"0"
			"bodygroup3_set"	"1"
			"bodygroup4_set"	"0"
			"bodygroup6_set"	"0"

			"ui1_enable"		"0"
			"ui5_enable"		"1"
			"ui6_enable"		"1"

			//"sway_min_yaw_zoomed"							"-0.13"
			//"sway_max_yaw_zoomed"							"0.13"
			//"sway_min_pitch_zoomed"  						"-0.11"
			//"sway_max_pitch_zoomed"  						"0.11"

			"dof_zoom_nearDepthStart"						"6.652"
			"dof_zoom_nearDepthEnd"							"8.734"
			"viewmodel_offset_ads"							"0 -2 -.75"

			dof_zoom_focusArea_horizontal					0.085
			dof_zoom_focusArea_top							0.18
			dof_zoom_focusArea_bottom						-0.06
		}

		redline_sight
		{
			"ui1_enable"		"0"
			"ui3_enable"		"1"

			"bodygroup1_set"	"0"
			"bodygroup2_set"	"1"
			"bodygroup3_set"	"0"
			"bodygroup4_set"	"0"
			"bodygroup6_set"	"0"
			"dof_zoom_nearDepthStart"						"5.691"
			"dof_zoom_nearDepthEnd"							"6.745"
			"viewmodel_offset_ads"							"0 -2.6 -.385"
			"zoom_fov"						"25"
			dof_zoom_focusArea_horizontal					0.073
			dof_zoom_focusArea_top							0.080
			dof_zoom_focusArea_bottom						-0.041
		}

		threat_scope
		{
			"bodygroup1_set"	"0"
			"bodygroup2_set"	"0"
			"bodygroup3_set"	"0"
			"bodygroup4_set"	"1"
			"bodygroup6_set"	"0"
			"dof_zoom_nearDepthStart"						"5.737"
			"dof_zoom_nearDepthEnd"							"6.226"
			"viewmodel_offset_ads"							"0 -3 -.405"

			"ui1_enable"		"0"
			"ui4_enable"		"1"

			"threat_scope_enabled"			"1"
			"threat_scope_bounds_tagname1"	"SCR_TR_CRO"
			"threat_scope_bounds_tagname2"	"SCR_BL_CRO"
			dof_zoom_focusArea_horizontal					0.068
			dof_zoom_focusArea_top							0.065
			dof_zoom_focusArea_bottom						-0.046
		}

		extended_ammo
		{
			"ammo_stockpile_max"				"450"
			"ammo_clip_size"   					"30"
			"ammo_default_total"				"450"
		}
		tactical_cdr_on_kill
		{

		}
		pas_run_and_gun
		{
			"primary_fire_does_not_block_sprint"			"1"
			"crosshair_force_sprint_fade_disabled"          "1"
		}
		smart_lock
		{

		}

		pro_screen
		{
			"ui8_enable"			"1"
			"bodygroup5_set"	"1"
		}

		pas_fast_reload
		{
			"reload_time"						"*0.7"
			"reload_time_late1"					"*0.7"
			"reloadempty_time"					"*0.7"
			"reloadempty_time_late1"			"*0.7"
		}
		pas_fast_ads
		{
			//Fast ADS
			"zoom_time_in"									"*0.5"
			"zoom_time_out"   								"*0.6"
		}
		pas_fast_swap
		{
			//Fast Swap
			"fast_swap_to"									"1"
		}
		burn_mod_rspn101
		{
			"is_burn_mod"		"1"

			//FX
			"tracer_effect"   								"P_wpn_tracer_BC"
			"tracer_effect_first_person"                    "P_wpn_tracer_BC"
			"fx_muzzle_flash_view"							"wpn_muzzleflash_smg_elec_FP"
			"fx_muzzle_flash_world"							"wpn_muzzleflash_smg_elec"

			"damage_near_value"   							"++10"
			"damage_far_value"								"++4"
			"damage_very_far_value"							"++4"
			"damage_near_value_titanarmor"					"170"
			"damage_far_value_titanarmor" 					"150"
		}
	}

	"ui1_enable"		"1"
	"ui1_draw_cloaked"	"1"
	UiData1
	{
		"ui"							"ui/aog_multi_reticles"
		"mesh"					"models/weapons/attachments/aog_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize						weapon_clipSize
		}
	}

	"ui2_enable"		"1"
	UiData2
	{
		"ui"								"ui/r101_ammo_counter"
		"mesh"							"models/weapons/attachments/r101_rui_lower"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize						weapon_clipSize
		}
	}

	"ui3_enable"		"0"
	"ui3_draw_cloaked"	"1"
	UiData3
	{
		"ui"								"ui/acgs_redline"
		"mesh"							"models/weapons/attachments/acgs_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize						weapon_clipSize
		}
	}

	"ui4_enable"		"0"
	"ui4_draw_cloaked"	"1"
	UiData4
	{
		"ui"							"ui/cro_threat_front"
		"mesh"					"models/weapons/attachments/cro_rui_upper"
		Args
		{
			zoomFrac					player_zoomfrac
			ammo						weapon_ammo
			clipSize						weapon_clipSize
		}
	}

	"ui5_enable"		"0"
	"ui5_draw_cloaked"	"1"
	UiData5
	{
		"ui"								"ui/hcog_upper"
		"mesh"						"models/weapons/attachments/hcog2_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize						weapon_clipSize
		}
	}

	"ui6_enable"		"0"
	"ui6_draw_cloaked"	"1"
	UiData6
	{
		"ui"								"ui/hcog_lower"
		"mesh"						"models/weapons/attachments/hcog2_rui_lower"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize						weapon_clipSize
		}
	}

	"ui8_enable"		"0"
	UiData8
	{
		"ui"									"ui/pro_screen_panel"
		"mesh"							"models/weapons/attachments/pro_screen_rui_upper"
		Args
		{
			proValue							proscreen_int0
			proOwnedByPlayer			proscreen_owner_is_player
		}
	}

	active_crosshair_count				"1"
	rui_crosshair_index					"0"

	RUI_CrosshairData
	{
		DefaultArgs
		{
			adjustedSpread				weapon_spread
			adsFrac 					player_zoomFrac
			isSprinting					player_is_sprinting
			isReloading					weapon_is_reloading
			teamColor					crosshair_team_color
			isAmped						weapon_is_amped
			crosshairMovementX          crosshair_movement_x
			crosshairMovementY          crosshair_movement_y
		}

		Crosshair_1
		{
			"ui"						"ui/crosshair_tri"
			"base_spread"				"0.0"
			Args
			{
				//isFiring				weapon_is_firing
			}
		}
	}
}
WeaponData
{
	// General
	"printname"   									"#WPN_DMR"
	"shortprintname"   								"#WPN_DMR_SHORT"
	"description" 									"#WPN_DMR_DESC"
	"longdesc"										"#WPN_DMR_LONGDESC"

	"menu_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_longbow"
	"hud_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_longbow"

	"weaponClass" 									"human"
	"weaponSubClass"								"sniper"
	"body_type"										"heavy"
	"fire_mode"   									"semi-auto"
	"pickup_hold_prompt"  							"Hold [USE] [WEAPONNAME]"
	"pickup_press_prompt" 							"[USE] [WEAPONNAME]"
	"minimap_reveal_distance"						"32000"
	"leveled_pickup"								"1"

	"OnWeaponActivate"								"OnWeaponActivate_weapon_dmr"
	"OnWeaponDeactivate"							"OnWeaponDeactivate_weapon_dmr"
	"OnClientAnimEvent"								"OnClientAnimEvent_weapon_dmr"
	//"OnWeaponPrimaryAttack"							"OnWeaponPrimaryAttack_weapon_dmr"
	//"OnWeaponNpcPrimaryAttack"						"OnWeaponNpcPrimaryAttack_weapon_dmr"
	//"OnWeaponStartZoomIn"							"OnWeaponStartZoomIn_weapon_dmr"
	//"OnWeaponStartZoomOut"							"OnWeaponStartZoomOut_weapon_dmr"

	// Menu
	"menu_category"                                 "sniper"
	"menu_anim_class"                               "large"
	"stat_damage" 									"90"
	"stat_range"  									"100"
	"stat_accuracy"   								"84"
	"stat_rof"										"30"

	"ads_dof_disable"	"1"
	"is_smart_pistol"								"1"

	// Models
	"viewmodel"   									"models/weapons/rspn101_dmr/ptpov_rspn101_dmr.mdl"
	"playermodel" 									"models/weapons/rspn101_dmr/w_rspn101_dmr.mdl"
	//"projectilemodel" 							"models/weapons/bullets/projectile_20mm.mdl"

	// Effects
	"tracer_effect"   								"P_wpn_tracer_sniper"
	"tracer_effect_first_person"  					"P_wpn_tracer_sniper"
	"impact_effect_table" 							"titan_bullet"
	//"projectile_trail_effect_0" 					"garand_trail_smoke"
	"projectile_do_predict_impact_effects"			"0"
	"vortex_absorb_effect"							"wpn_vortex_projectile_20mm_FP"
	"vortex_absorb_effect_third_person"				"wpn_vortex_projectile_20mm"
	"vortex_absorb_sound"							"Vortex_Shield_AbsorbBulletLarge"
	"vortex_absorb_sound_1p_vs_3p"					"Vortex_Shield_AbsorbBulletLarge_1P_VS_3P"
	"projectile_adjust_to_gun_barrel"				"1"


	"fx_shell_eject_view"							"wpn_shelleject_rifle_large_FP"
	"fx_shell_eject_world"							"wpn_shelleject_rifle_large"
	"fx_shell_eject_attach"							"shell"
	"fx_shell_eject_attach_scoped"					"shell_scoped"

	"fx_muzzle_flash_view"							"wpn_muzzleflash_snp_hmn_FP"
	"fx_muzzle_flash_world"							"wpn_muzzleflash_snp_hmn"
	"fx_muzzle_flash_attach"						"muzzle_flash"
	"fx_muzzle_flash_attach_scoped"					"muzzle_flash_scoped"

	//Sounds
	"sound_dryfire"									"rifle_dryfire"
	"sound_pickup"									"wpn_pickup_Rifle_1P"
	"fire_sound_1_player_1p"						"Weapon_DMR_Fire_1P"
	"fire_sound_1_player_3p"						"Weapon_DMR_Fire_3P"
	"fire_sound_1_npc"								"Weapon_DMR_Fire_NPC"
	"sound_zoom_in"									"Weapon_DMR_ADS_In"
	"sound_zoom_out"								"Weapon_DMR_ADS_Out"

	"low_ammo_sound_name_1"							"DMR_LowAmmo_Shot1"
	"low_ammo_sound_name_2"							"DMR_LowAmmo_Shot2"
	"low_ammo_sound_name_3"							"DMR_LowAmmo_Shot3"
	"low_ammo_sound_name_4"							"DMR_LowAmmo_Shot4"
	"low_ammo_sound_name_5"							"DMR_LowAmmo_Shot5"


	// Network
	"net_optimize"		                            "1"

	"damage_type" 									"bullet"

	"damage_flags"									"DF_BULLET | DF_KNOCK_BACK"

	"damage_headshot_scale"							"2.0"

	"impulse_force"									"5000"

	// Ammo
	"ammo_clip_size"   								"6"

   "titanarmor_critical_hit_required"              "1"
	"critical_hit"									"1"



	MP_BASE
	{
		"ammo_default_total"							"60"
		"ammo_stockpile_max"							"60"
		"ammo_no_remove_from_stockpile"					"1"
		"ammo_min_to_fire"								"1"

		// Damage - When Used by Players
		"damage_near_value"   							"55"
		"damage_far_value"								"55"
		"damage_near_value_titanarmor"					"430"
		"damage_far_value_titanarmor" 					"430"
		"damage_rodeo" 									"400"
		"damage_near_distance"							"4500"
		"damage_far_distance" 							"4500"

		"red_crosshair_range" 							"4500"

		// Damage - When Used by NPCs
		"npc_damage_near_value"   						"40"
		"npc_damage_far_value"							"40"
		"npc_damage_near_value_titanarmor"				"100"
		"npc_damage_far_value_titanarmor" 				"100"

		"npc_accuracy_multiplier_pilot"					"1.0"

		"npc_suppress_lsp_allowed"						"0"

		"enable_highlight_networking_on_creation"		"<KEEP_DEFAULT>"

		"damage_heavyarmor_nontitan_scale"				"0.35"

		"zoom_toggle_lerp_time"						"<KEEP_DEFAULT>"
		"zoom_toggle_fov"							"<KEEP_DEFAULT>"
		"red_crosshair_range" 							"1"

		"smart_ammo_search_distance"  					"10000000"
		"smart_ammo_max_targeted_burst"					"12"
		"smart_ammo_targeting_time_min"					"0.00"
		"smart_ammo_targeting_time_max"					"0.00"
		"smart_ammo_targeting_time_min_npc"				"0.1"
		"smart_ammo_targeting_time_max_npc"				"0.1"
	}

	SP_BASE
	{
		"zoom_toggle_lerp_time"						"0.2"
		"zoom_toggle_fov"							"7"

		"ammo_default_total"							"24"
		"ammo_stockpile_max"							"42"
		"ammo_no_remove_from_stockpile"					"0"
		"ammo_min_to_fire"								"1"


		// Damage - When Used by Players
		"damage_near_value"   							"90"
		"damage_far_value"								"90"
		"damage_near_value_titanarmor"					"90"
		"damage_far_value_titanarmor" 					"90"
		"damage_rodeo" 									"400"
		"damage_near_distance"							"4500"
		"damage_far_distance" 							"4500"

		"red_crosshair_range" 							"4500"

		// Damage - When Used by NPCs
		"npc_damage_near_value"   						"40"
		"npc_damage_far_value"							"40"
		"npc_damage_near_value_titanarmor"				"100"
		"npc_damage_far_value_titanarmor" 				"100"

		"npc_accuracy_multiplier_pilot"					"3.0"

		"npc_suppress_lsp_allowed"						"<KEEP_DEFAULT>"

		"enable_highlight_networking_on_creation"		"1"

		"damage_heavyarmor_nontitan_scale"				"1"
	}

	// NPC
	"proficiency_poor_spreadscale"					"3.0"
	"proficiency_average_spreadscale" 				"2.2"
	"proficiency_good_spreadscale"					"2.0"
	"proficiency_very_good_spreadscale"   			"1.5"

	"npc_min_engage_range"							"500"
	"npc_max_engage_range"							"8000"
	"npc_min_engage_range_heavy_armor"				"500"
	"npc_max_engage_range_heavy_armor"				"8000"
	"npc_min_range"   								"0"
	"npc_max_range"   								"8000"

	"npc_min_burst"									"1"
	"npc_max_burst"									"1"
	"npc_rest_time_between_bursts_min"				"2.0"
	"npc_rest_time_between_bursts_max"				"3.0"

	"dof_zoom_nearDepthStart"						"0"
	"dof_zoom_nearDepthEnd"							"0"
	"dof_nearDepthStart"							"1.683"
	"dof_nearDepthEnd"								"6.652"


	// Behavior
	"fire_rate"   									"3.0"
	"smart_ammo_allow_search_while_firing"			"1"
	"smart_ammo_allow_ads_lock"						"1" // "0" is default
	"zoom_time_in"									"0.2"
	"zoom_time_out"   								"0.2"
	"zoom_fov"										"30"
	"zoom_scope_frac_start"							"0.2"
	"zoom_scope_frac_end"							"1.0"
	"zoom_angle_shift_pitch"						"0.3"
	"zoom_angle_shift_yaw"							"0.65"
	"reload_time" 									"2.66"
	"reload_time_late1" 							"1.23"
	"reloadempty_time"								"3.66"
	"reloadempty_time_late1"						"2.25"
	"reloadempty_time_late2"						"1.26"
	"holster_time"									"0.5"
	"deploy_time" 									"0.8"
	"lower_time"  									"0.25"
	"raise_time"  									"0.3"
	"vortex_refire_behavior"  						"bullet"
	"allow_empty_fire"								"0"
	"reload_enabled"  								"1"
	"allow_empty_click"   							"1"
	"empty_reload_only"   							"0"
	"trigger_snipercam"   							"1"
	"allow_headshots" 								"1"
	"critical_hit_damage_scale"						"1"
	"ads_move_speed_scale"							"0.5"
	"aimassist_disable_hipfire"						"1"
	"aimassist_disable_ads"							"1"
	"aimassist_disable_hipfire_titansonly"			"1"
	"aimassist_disable_ads_titansonly"				"1"
	"gamepad_use_yaw_speed_for_pitch_ads"			"1"
	"ads_fov_zoomfrac_start"						"0.5"
	"ads_fov_zoomfrac_end"							"0.9"


	// Spread
	"spread_stand_hip" 								"8"
	"spread_stand_hip_run" 							"10"
	"spread_stand_ads"  							"0.05"
	"spread_crouch_hip"								"6"
	"spread_crouch_ads"  							"0"
	"spread_air_hip"	   							"10"
	"spread_air_ads"   								".15"

	"ammo_suck_behavior"							"primary_weapons"

	// View Kick
	"viewkick_spring" 								"semisniper"

	"viewkick_pitch_base" 							"-0.61"//"-1.45"
	"viewkick_pitch_random"   						"0.12"//"-0.35"
	"viewkick_pitch_softScale"						"1.2"
	"viewkick_pitch_hardScale"						"0.9"

	"viewkick_yaw_base"   							"-0.5"//"0.0"
	"viewkick_yaw_random" 							"0.14"//"1.2"
	"viewkick_yaw_softScale"  						"1.3"
	"viewkick_yaw_hardScale"  						"1.0"

	"viewkick_roll_base"  							"0"
	"viewkick_roll_randomMin" 						"0.5"
	"viewkick_roll_randomMax" 						"0.5"
	"viewkick_roll_softScale" 						"0.2"
	"viewkick_roll_hardScale" 						"1.75"

	"viewkick_hipfire_weaponFraction" 				"0.4"
	"viewkick_hipfire_weaponFraction_vmScale" 		"0.55"
	"viewkick_ads_weaponFraction" 					"0.0"//"0.45"
	"viewkick_ads_weaponFraction_vmScale" 			"0.0"//"-0.3"

	"viewkick_perm_pitch_base" 						"-0.47"
	"viewkick_perm_pitch_random"   					"0.23"
	"viewkick_perm_pitch_random_innerexclude"		"0.0"
	"viewkick_perm_yaw_base"   						"0.0"
	"viewkick_perm_yaw_random" 						"0.0"
	"viewkick_perm_yaw_random_innerexclude" 		"0.0"

	"viewkick_scale_min_ads"  						"0.65"
	"viewkick_scale_max_ads"  						"0.65"

	//
	"viewmodel_shake_forward"						"0.5"
	"viewmodel_shake_up"							"0.1"
	"viewmodel_shake_right"							"0.0"

	// Bob
	"bob_cycle_time"  								"0.4"
	"bob_vert_dist"   								"0.19"
	"bob_horz_dist"   								"0.1"
	"bob_max_speed"   								"150"
	"bob_pitch"   									"0.75"
	"bob_yaw" 										"-1.7"
	"bob_roll"										"1.2"

	// Bob_Zoomed
	"bob_cycle_time_zoomed"  						"0.4"
	"bob_vert_dist_zoomed"   						"0.0025"
	"bob_horz_dist_zoomed"   						"0.0025"
	"bob_max_speed_zoomed"   						"150"
	//"bob_pitch_zoomed"   							"0.002"
	//"bob_yaw_zoomed" 								"-.002"
	//"bob_roll_zoomed"								".002"

	// Rumble
	"fire_rumble"									"rumble_sniper"

	// Sway
	"sway_rotate_attach"  							"SWAY_ROTATE"
	"sway_min_x"  									"-0.5"
	"sway_min_y"  									"-0.5"
	"sway_min_z"  									"-0.6"
	"sway_max_x"  									"0.5"
	"sway_max_y"  									"0.5"
	"sway_max_z"  									"0.6"
	"sway_min_pitch"  								"-3"
	"sway_min_yaw"									"-2.5"
	"sway_min_roll"   								"-4"
	"sway_max_pitch"  								"3"
	"sway_max_yaw"									"2.5"
	"sway_max_roll"   								"4"
	"sway_translate_gain" 							"2.5"
	"sway_rotate_gain"								"7"
	"sway_move_forward_translate_x"   				"-0.1"
	"sway_move_forward_translate_z"   				"-0.5"
	"sway_move_back_translate_x"  					"0.2"
	"sway_move_back_translate_z"  					"-0.2"
	"sway_move_left_translate_y"  					"-1"
	"sway_move_left_translate_z"  					"-0.5"
	"sway_move_left_rotate_roll"  					"-4"
	"sway_move_right_translate_y" 					"1"
	"sway_move_right_translate_z" 					"-0.5"
	"sway_move_right_rotate_roll" 					"4"
	"sway_move_up_translate_z"						"-1"
	"sway_move_down_translate_z"  					"1"
	"sway_turn_left_rotate_yaw"   					"-2.5"
	"sway_turn_right_rotate_yaw"  					"2.5"

	"sway_turn_left_translate_y"  					".5"
	"sway_turn_right_translate_y"  					"-.5"
	"sway_turn_up_translate_z"  					".2"
	"sway_turn_down_translate_z"  					"-.2"
	"sway_turn_up_translate_x"  					".1"
	"sway_turn_down_translate_x"  					"-.1"

	"sway_turn_left_rotate_roll"   					"4"
	"sway_turn_right_rotate_roll"  					"-4"
	"sway_turn_up_rotate_pitch"   					"3"
	"sway_turn_down_rotate_pitch" 					"-3"
	"sway_turn_up_rotate_roll"   					"-0.8"
	"sway_turn_down_rotate_roll" 					"0.8"

	// Zoomed Sway
	"sway_rotate_attach_zoomed"						"jx_c_pov"
	"sway_rotate_attach_blend_time_zoomed"			"0.2"
	"sway_rotate_gain_zoomed"						"5"

	"sway_min_yaw_zoomed"							"-0.085"
	"sway_max_yaw_zoomed"							"0.085"
	"sway_turn_left_rotate_yaw_zoomed"				"0.085"
	"sway_turn_right_rotate_yaw_zoomed"				"-0.085"

	"sway_min_roll_zoomed"   						"-1"
	"sway_max_roll_zoomed"   						"1"
	"sway_turn_left_rotate_roll_zoomed"   			"-1"
	"sway_turn_right_rotate_roll_zoomed"  			"1"

	"sway_move_right_rotate_roll_zoomed" 			"0.2"
	"sway_move_left_rotate_roll_zoomed"  			"-0.2"

	"sway_min_pitch_zoomed"  						"-0.25"
	"sway_max_pitch_zoomed"  						"0.25"
	"sway_turn_up_rotate_pitch_zoomed"				"-0.25"
	"sway_turn_down_rotate_pitch_zoomed"			"0.25"

	// WeaponED Unhandled Key/Values and custom script Key/Values
	"sprintcycle_time"								".55"
	"is_sniper"										"1"
	"smart_ammo_allow_search_while_firing"			"1"
	"smart_ammo_allow_ads_lock"						"1" // "0" is default
	"smart_ammo_search_angle" 						"360"
	"smart_ammo_search_npcs"						"0"
	"smart_ammo_search_players"						"1"
	"smart_ammo_search_projectiles"					"0"
	"smart_ammo_titans_block_los"					"1"
	"smart_ammo_track_cloaked_targets"				"1"
	"smart_ammo_targeting_time_modifier_projectile_owner"	"0.00"
	"smart_ammo_target_max_locks_normal"			"10"	// divide health by damage near
	"smart_ammo_target_npc_lock_factor"				"10"		// smart pistol does head shots at 2x damage
	"smart_ammo_new_target_delay"					"0.1"
	"smart_ammo_draw_acquisition_lines"				"0"
	"smart_ammo_hud_lock_style"						"pilot_pistol"
	"smart_ammo_hud_type" 							"smart_pistol"
	"smart_ammo_target_confirmed_sound"				"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_target_confirming_sound"			"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_looping_sound_acquiring"			"Weapon_SmartPistol_TargetLockingLoop"
	"smart_ammo_lock_type"							"small"
	"smart_ammo_alert_npc_fraction"					"0.1" 	// unaware since lock on fraction will not go above 1
	"smart_ammo_allow_hip_fire_lock"				"1"
	"smart_ammo_lock_effect_3p"						"P_smartpistol_lockon"
	"smart_ammo_lock_effect_attachment"				"muzzle_flash"
	"smart_ammo_player_targets_must_be_tracked"		"0"
	"smart_ammo_npc_targets_must_be_tracked"		"0"
	"smart_ammo_tracker_status_effects"				"0"
	"smart_ammo_tracked_targets_check_visibility"	"0"
	"threat_scope_enabled"			"1"

	// Bodygroups:
	"bodygroup1_name"	"scope_zoom"
	"bodygroup1_set"	"0"
	"bodygroup2_name"	"scope_outline"
	"bodygroup2_set"	"0"
	"bodygroup3_name"	"scope_oracle"
	"bodygroup3_set"	"0"
	"bodygroup4_name"	"scope_dcom"
	"bodygroup4_set"	"1"
	"bodygroup5_name"	"proscreen"
	"bodygroup5_set"	"0"


	"bodygroup_ads_scope_name"	"ads_scopes"
	"bodygroup_ads_scope_set"	"3"


	"anim_alt_idleAttack"	"0"

    "clip_bodygroup"						"rspn101_dmr_magazine"
    "clip_bodygroup_index_shown"			"0"
    "clip_bodygroup_index_hidden"			"1"
    "clip_bodygroup_show_for_milestone_0"	"1"
    "clip_bodygroup_show_for_milestone_1"	"0"
    "clip_bodygroup_show_for_milestone_2"	"1"
    "clip_bodygroup_show_for_milestone_3"	"1"

	"entity_color_from_ads_factor"			"25.0"

	"pass_through_depth"							"32"
	"pass_through_damage_preserved_scale"			"1.0"




	Mods
	{

		iron_sights
		{

		}
		scope_4x
		{
			"ui7_enable"		"1"

			//Use this for Variable Zoom
			"bodygroup1_set"	"0"
			"bodygroup2_set"	"1"
			"bodygroup3_set"	"0"
			"bodygroup4_set"	"0"
			"bodygroup_ads_scope_set"	"2"
			"zoom_toggle_lerp_time"					"0.2"
			"zoom_toggle_fov"						"7"

			"viewmodel_offset_ads"			"0 0 0"
		}
		threat_scope
		{
			"bodygroup1_set"	"1"
			"bodygroup2_set"	"0"
			"bodygroup3_set"	"0"
			"bodygroup4_set"	"0"
			"bodygroup_ads_scope_set"	"1"

			"threat_scope_enabled"			"1"
			"threat_scope_bounds_width"		"1.5"
			"threat_scope_bounds_height"	"1.1"
			"viewmodel_offset_ads"			"0 0.5 0"

			dof_zoom_focusArea_horizontal					0.068
			dof_zoom_focusArea_top							0.065
			dof_zoom_focusArea_bottom						-0.046
		}
		pro_screen
		{
			"ui8_enable"		"1"
			"bodygroup5_set"	"1"
		}
		pas_fast_reload
		{
			"reload_time"								"*0.7"
			"reload_time_late1"							"*0.7"
			"reloadempty_time"							"*0.7"
			"reloadempty_time_late1"					"*0.7"
		}
		pas_fast_ads
		{
			//Fast ADS
			"zoom_time_in"									"*0.5"
			"zoom_time_out"   								"*0.6"
		}
		pas_fast_swap
		{
			//Fast Swap
			"fast_swap_to"									"1"
		}
		extended_ammo
		{
			"ammo_stockpile_max"						"135"
			"ammo_clip_size"   							"10"
			"ammo_default_total"						"135"
		}
		stabilizer
		{
			"bodygroup1_set"	"0"
			"bodygroup2_set"	"0"
			"bodygroup3_set"	"1"
			"bodygroup4_set"	"0"
			"bodygroup_ads_scope_set"	"0"
			// "viewdrift_ads_stand_scale_pitch" 				"*0.5"
			// "viewdrift_ads_crouch_scale_pitch"				"*0.5"
			// "viewdrift_ads_air_scale_pitch"   				"*0.5"
			// "viewdrift_ads_air_scale_yaw" 					"*0.5"
			// "viewdrift_ads_stand_scale_yaw"   				"*0.5"
			// "viewdrift_ads_crouch_scale_yaw"  				"*0.5"
			// "viewdrift_ads_speed_pitch"   					"*0.5"
			// "viewdrift_ads_speed_yaw" 						"*0.5"

			"anim_alt_idleAttack"	"1"

			"ads_fov_zoomfrac_start"						"0.3"
			"ads_fov_zoomfrac_end"							"0.8"
			"viewmodel_offset_ads"							"0 -2.6 0.25"
			"dof_zoom_nearDepthStart"						"7.0"
			"dof_zoom_nearDepthEnd"							"7.2"
		}
        slammer
        {
        }

		burn_mod_dmr
		{
			"is_burn_mod"		"1"

			"damage_near_value"   							"++20"
			"damage_far_value"								"++20"
			"damage_near_value_titanarmor"					"580"
			"damage_far_value_titanarmor" 					"580"
//			"explosion_damage"								"85"
			//Effects
			"tracer_effect_first_person"                    "P_wpn_tracer_sniper_BC"
			"tracer_effect"   								"P_wpn_tracer_sniper_BC"
			"fx_muzzle_flash_view"							"wpn_muzzleflash_snp_hmn_FP_burn"
			"fx_muzzle_flash_world"							"wpn_muzzleflash_snp_hmn_burn"
		}

		tactical_cdr_on_kill
		{

		}
	}

	"ui1_enable"		"1"
	UiData1
	{
		"ui"									"ui/rspn101_dmr_ammo_counter"
		"mesh"							"models/weapons/attachments/rspn101_dmr_rui_lower"
		Args
		{
			vis						player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui7_enable"		"0"
	"ui7_draw_cloaked"	"1"
	UiData7
	{
		"ui"							"ui/variable_zoom_crosshair"
		"mesh"						"models/weapons/attachments/attach_scope_ads_2_crosshair"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
			clipCount					weapon_stockpileClipCount
		}
	}

	"ui8_enable"		"0"
	UiData8
	{
		"ui"									"ui/pro_screen_panel"
		"mesh"							"models/weapons/attachments/pro_screen_rui_upper"
		Args
		{
			proValue							proscreen_int0
			proOwnedByPlayer			proscreen_owner_is_player
		}
	}

	active_crosshair_count				"1"
	rui_crosshair_index					"0"

	RUI_CrosshairData
	{
		DefaultArgs
		{
			adjustedSpread				weapon_spread
			adsFrac 					player_zoomFrac
			isSprinting					player_is_sprinting
			isReloading					weapon_is_reloading
			teamColor					crosshair_team_color
			isAmped						weapon_is_amped
			crosshairMovementX          crosshair_movement_x
			crosshairMovementY          crosshair_movement_y
		}

		Crosshair_1
		{
			"ui"						"ui/crosshair_wingman_n"
			"base_spread"				"0"
			Args
			{
				isFiring				weapon_is_firing
			}
		}
	}
}
WeaponData
{
	// General
	"printname"   									"#WPN_R97"
	"shortprintname"								"#WPN_R97_SHORT"
	"description" 									"#WPN_R97_DESC"
	"longdesc"										"#WPN_R97_LONGDESC"

	"menu_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_r97n"
	"hud_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_r97n"

	"weaponClass" 									"human"
	"weaponSubClass"								"smg"
	"body_type"										"light"
	"fire_mode"   									"auto"
	"pickup_hold_prompt"  							"Hold [USE] [WEAPONNAME]"
	"pickup_press_prompt" 							"[USE] [WEAPONNAME]"
	"minimap_reveal_distance"						"32000"
	"leveled_pickup"								"1"

    "damage_flags"									"DF_BULLET | DF_DISMEMBERMENT"

	// Menu
	"menu_category"                                 "smg"
	"menu_anim_class"                               "medium"
	"stat_damage" 									"35"
	"stat_range"  									"40"
	"stat_accuracy"   								"22"
	"stat_rof"										"100"

	dof_zoom_focusArea_horizontal					0.063
	dof_zoom_focusArea_top							0.08
	dof_zoom_focusArea_bottom						-0.026


	// Models
	"viewmodel"   									"models/weapons/r97/ptpov_r97.mdl"
	"playermodel" 									"models/weapons/r97/w_r97.mdl"

	// Effects
	"tracer_effect"   								"P_wpn_tracer_pistol"
	"tracer_effect_first_person"                    "P_wpn_tracer_pistol"
	"impact_effect_table" 							"inc_bullet"
	"vortex_absorb_effect"							"wpn_vortex_projectile_rifle_FP"
	"vortex_absorb_effect_third_person"				"wpn_vortex_projectile_rifle"
	"vortex_absorb_sound"							"Vortex_Shield_AbsorbBulletSmall"
	"vortex_absorb_sound_1P_VS_3P"					"Vortex_Shield_AbsorbBulletSmall_1P_VS_3P"
	"projectile_adjust_to_gun_barrel"				"1"

	"fx_shell_eject_view"							"wpn_shelleject_pistol_FP"
	"fx_shell_eject_world"							"wpn_shelleject_pistol"
	"fx_shell_eject_attach"							"shell"

	"fx_muzzle_flash_view"							"wpn_muzzleflash_pistol_FP"
	"fx_muzzle_flash_world"							"wpn_muzzleflash_pistol"
	"fx_muzzle_flash_attach"						"muzzle_flash"

	//Sounds
	"fire_sound_1_player_1p"						"Weapon_bulletCasings.Bounce"
	"fire_sound_1_player_3p"						"Weapon_bulletCasings.Bounce"
	"fire_sound_2_player_1p"						"Weapon_R97_SecondShot_1P"
	"fire_sound_2_player_3p"						"Weapon_R97_SecondShot_3P"
	"fire_sound_2_npc"								"Weapon_r97_secondshot_npc"
	"sound_dryfire"									"assault_rifle_dryfire"
	"sound_pickup"									"wpn_pickup_SMG_1P"
	"looping_sounds"								"1"

	"sound_zoom_in"									"Weapon_R97_ADS_In"
	"sound_zoom_out"								"Weapon_R97_ADS_Out"

	"burst_or_looping_fire_sound_start_1p"			"Weapon_R97_Fire_First_1P"
	"burst_or_looping_fire_sound_middle_1p"			"Weapon_R97_Fire_Loop_1P"
	"burst_or_looping_fire_sound_end_1p"			"Weapon_R97_Fire_Last_1P"

	"burst_or_looping_fire_sound_start_3p"			""
	"burst_or_looping_fire_sound_middle_3p"			"Weapon_R97_Fire_Loop_3P"
	"burst_or_looping_fire_sound_end_3p"			"Weapon_R97_Fire_Last_3P"

	"burst_or_looping_fire_sound_start_npc"			""
	"burst_or_looping_fire_sound_middle_npc"		"weapon_r97_loop_3p_npc_a"
	"burst_or_looping_fire_sound_end_npc"			""

	"low_ammo_sound_name_1"							"R97_LowAmmo_Shot1"

	// Network
	"net_optimize"		                            "1"

	"damage_type" 									"bullet"

	"critical_hit_damage_scale"						"1"

	// Ammo
	"ammo_clip_size"   								"40"

   "titanarmor_critical_hit_required"              "1"
	"critical_hit"									"1"

	"damage_near_distance"							"1000"
	"damage_far_distance" 							"1500"
	"red_crosshair_range" 							"1000"



	MP_BASE
	{
		"viewmodel_offset_hip" 						"-6.5 1 -10"
		"ammo_default_total"							"400"
		"ammo_stockpile_max"							"400"
		"ammo_no_remove_from_stockpile"					"1"
		"ammo_min_to_fire"								"1"

		"aimassist_adspull_weaponclass"					"broad"

		// Damage - When Used by Players
		"damage_near_value"   							"20"
		"damage_far_value"								"12"
		"damage_near_value_titanarmor"					"65"
		"damage_far_value_titanarmor" 					"35"
		"damage_rodeo" 									"110"

   	 	"damage_very_far_value"							"10"
   		"damage_very_far_distance"						"3000"

		"damage_headshot_scale"							"1.5"

		// Damage - When Used by NPCs
		"npc_damage_near_value_titanarmor"				"0"
		"npc_damage_far_value_titanarmor" 				"0"
		"npc_damage_near_value"   						"9"
		"npc_damage_far_value"							"7"

		"npc_max_range"   								"2000"

		"enable_highlight_networking_on_creation"		"<KEEP_DEFAULT>"

		"damage_heavyarmor_nontitan_scale"				"0.35"

		// View Drift

		"viewdrift_ads_stand_scale_pitch" 				"0.4"
		"viewdrift_ads_stand_scale_yaw"   				"0.55"
		"viewdrift_ads_crouch_scale_pitch"  			"0.25"
		"viewdrift_ads_crouch_scale_yaw"				"0.4"
		"viewdrift_ads_air_scale_pitch"   				"0.7"
		"viewdrift_ads_air_scale_yaw" 					"0.85"
		"viewdrift_ads_speed_pitch"   					"0.65"
		"viewdrift_ads_speed_yaw" 						"0.75"

		"viewkick_air_scale_ads"						"1.5"
		"spread_air_hip"  								"1.5"
		"red_crosshair_range" 							"1"

		"smart_ammo_search_distance"  					"10000000"
		"smart_ammo_max_targeted_burst"					"12"
		"smart_ammo_targeting_time_min"					"0.00"
		"smart_ammo_targeting_time_max"					"0.00"
		"smart_ammo_targeting_time_min_npc"				"0.1"
		"smart_ammo_targeting_time_max_npc"				"0.1"
	}

	SP_BASE
	{
		"ammo_default_total"							"160"
		"ammo_stockpile_max"							"280"
		"ammo_no_remove_from_stockpile"					"0"
		"ammo_min_to_fire"								"1"

		"aimassist_adspull_weaponclass"					"precise_sp"

		// Damage - When Used by Players
		"damage_near_value"   							"20"
		"damage_far_value"								"14"
		"damage_near_value_titanarmor"					"40"
		"damage_far_value_titanarmor" 					"28"
		"damage_rodeo" 									"110"

   	 	"damage_very_far_value"							"<KEEP_DEFAULT>"
   		"damage_very_far_distance"						"<KEEP_DEFAULT>"

		"damage_headshot_scale"							"3"

		// Damage - When Used by NPCs
		"npc_damage_near_value_titanarmor"				"<KEEP_DEFAULT>"
		"npc_damage_far_value_titanarmor" 				"<KEEP_DEFAULT>"
		"npc_damage_near_value"   						"9"
		"npc_damage_far_value"							"7"

		"npc_max_range"   								"4000"

		"enable_highlight_networking_on_creation"		"1"

		"damage_heavyarmor_nontitan_scale"				"1"

		// View Drift

		"viewdrift_ads_stand_scale_pitch" 				"0"
		"viewdrift_ads_stand_scale_yaw"   				"0"
		"viewdrift_ads_crouch_scale_pitch"  			"0"
		"viewdrift_ads_crouch_scale_yaw"				"0"
		"viewdrift_ads_air_scale_pitch"   				"0"
		"viewdrift_ads_air_scale_yaw" 					"0"
		"viewdrift_ads_speed_pitch"   					"0"
		"viewdrift_ads_speed_yaw" 						"0"

		"viewkick_air_scale_ads"						"1"
		"spread_air_hip"  								"0"
	}

	// NPC
	"proficiency_poor_spreadscale"					"5.0"
	"proficiency_average_spreadscale" 				"3.5"
	"proficiency_good_spreadscale"					"3.0"
	"proficiency_very_good_spreadscale"   			"2.5"

	"npc_min_engage_range"							"0"
	"npc_max_engage_range"							"1100"
	"npc_min_engage_range_heavy_armor"				"500"
	"npc_max_engage_range_heavy_armor"				"2000"

	"npc_min_burst"   								"4"
	"npc_max_burst"   								"7"
	"npc_rest_time_between_bursts_min"				"0.5"
	"npc_rest_time_between_bursts_max"				"0.7"

	"viewmodel_offset_ads"							"0 0 0"
	"dof_zoom_nearDepthStart"						"3.683"
	"dof_zoom_nearDepthEnd"							"11.000"
	"dof_nearDepthStart"							"3.683"
	"dof_nearDepthEnd"								"6.652"

	// Behavior
	"fire_rate"   									"18"
	"zoom_time_in"									"0.1"
	"smart_ammo_allow_search_while_firing"			"1"
	"smart_ammo_allow_ads_lock"						"1" // "0" is default
	"zoom_time_out"   								"0.1"
	"zoom_fov"										"45"
	"reload_time" 									"1.8"
	"reload_time_late1"								"0.76"
	"reloadempty_time"								"2.35"
	"reloadempty_time_late1"						"1.35"
	"reloadempty_time_late2"						"0.73"
	"holster_time"									"0.5"
	"deploy_time" 									"0.66"
	"lower_time"  									"0.25"
	"raise_time"  									"0.3"
	"vortex_refire_behavior"  						"bullet"
	"allow_empty_fire"								"0"
	"reload_enabled"  								"1"
	"allow_empty_click"   							"1"
	"empty_reload_only"   							"0"
	"trigger_snipercam"   							"0"
	"allow_headshots" 								"1"
	"headshot_distance" 							"750"
	"primary_fire_does_not_block_sprint"			"0"
	"ads_move_speed_scale"							"0.75"
	"aimassist_disable_hipfire"						"0"
	"aimassist_disable_ads"							"0"
	"aimassist_disable_hipfire_titansonly"			"1"
	"aimassist_disable_ads_titansonly"				"1"
	"aimassist_adspull_zoomStart"					"0.05"
	"aimassist_adspull_zoomEnd"						"1.0"

	"sprint_fractional_anims"						"0"

	"ammo_suck_behavior"							"primary_weapons"
	"zoom_time_in"									"0.1"
	"zoom_time_out"   								"0.1"
	"smart_ammo_allow_search_while_firing"			"1"
	"smart_ammo_allow_ads_lock"						"1" // "0" is default
	"smart_ammo_search_angle" 						"360"
	"smart_ammo_search_npcs"						"0"
	"smart_ammo_search_players"						"1"
	"smart_ammo_search_projectiles"					"0"
	"smart_ammo_titans_block_los"					"1"
	"smart_ammo_track_cloaked_targets"				"1"
	"smart_ammo_targeting_time_modifier_projectile_owner"	"0.00"
	"smart_ammo_target_max_locks_normal"			"10"	// divide health by damage near
	"smart_ammo_target_npc_lock_factor"				"10"		// smart pistol does head shots at 2x damage
	"smart_ammo_new_target_delay"					"0.1"
	"smart_ammo_draw_acquisition_lines"				"0"
	"smart_ammo_hud_lock_style"						"pilot_pistol"
	"smart_ammo_hud_type" 							"smart_pistol"
	"smart_ammo_target_confirmed_sound"				"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_target_confirming_sound"			"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_looping_sound_acquiring"			"Weapon_SmartPistol_TargetLockingLoop"
	"smart_ammo_lock_type"							"small"
	"smart_ammo_alert_npc_fraction"					"0.1" 	// unaware since lock on fraction will not go above 1
	"smart_ammo_allow_hip_fire_lock"				"1"
	"smart_ammo_lock_effect_3p"						"P_smartpistol_lockon"
	"smart_ammo_lock_effect_attachment"				"muzzle_flash"
	"smart_ammo_player_targets_must_be_tracked"		"0"
	"smart_ammo_npc_targets_must_be_tracked"		"0"
	"smart_ammo_tracker_status_effects"				"0"
	"smart_ammo_tracked_targets_check_visibility"	"0"
	"threat_scope_enabled"			"1"


	// View Kick
	"viewkick_spring" 								"car"

	"viewkick_pitch_base" 							"-0.2"
	"viewkick_pitch_random"   						"0.35"
	"viewkick_pitch_softScale"						"1.2"
	"viewkick_pitch_hardScale"						"0.5"

	"viewkick_yaw_base"   							"-0.1"
	"viewkick_yaw_random" 							"0.6"
	"viewkick_yaw_softScale"  						"1.2"
	"viewkick_yaw_hardScale"  						"0.5"

	"viewkick_roll_base"  							"0.0"
	"viewkick_roll_randomMin" 						"0.1"
	"viewkick_roll_randomMax" 						"0.35"
	"viewkick_roll_softScale" 						"0.5"
	"viewkick_roll_hardScale" 						"1.25"

	"viewkick_hipfire_weaponFraction" 				"0.1"
	"viewkick_hipfire_weaponFraction_vmScale" 		"9.0"
	"viewkick_ads_weaponFraction" 					"0.125"
	"viewkick_ads_weaponFraction_vmScale" 			"1.0"

	"viewkick_perm_pitch_base" 						"0"
	"viewkick_perm_pitch_random"   					"0"
	"viewkick_perm_yaw_base"   						"0"
	"viewkick_perm_yaw_random" 						"0"

	"viewkick_scale_firstshot_hipfire"				"1.5"
	"viewkick_scale_firstshot_ads"					"0.85"
	"viewkick_scale_min_hipfire"  					"1.5"
	"viewkick_scale_max_hipfire"  					"1.5"
	"viewkick_scale_min_ads"  						"1"
	"viewkick_scale_max_ads"  						"1"
	"viewkick_scale_valuePerShot" 					"1"
	"viewkick_scale_valueLerpStart"   				"50"
	"viewkick_scale_valueLerpEnd" 					"150"
	"viewkick_scale_valueDecayDelay"  				"0.15"
	"viewkick_scale_valueDecayRate"   				"1"

	"viewkick_move_scale"							"2.0"


	//
	"viewmodel_shake_forward"						"0.2"
	"viewmodel_shake_up"							"0.0"
	"viewmodel_shake_right"							"0.0"

	// Bob
	"bob_cycle_time"  								"0.4"
	"bob_vert_dist"   								"0.19"
	"bob_horz_dist"   								"0.1"
	"bob_max_speed"   								"150"
	"bob_pitch"   									"0.75"
	"bob_yaw" 										"-1.7"
	"bob_roll"										"1.2"

	// Bob_Zoomed
	"bob_cycle_time_zoomed"  						"0.4"
	"bob_vert_dist_zoomed"   						"0.01"
	"bob_horz_dist_zoomed"   						"0.01"
	"bob_max_speed_zoomed"   						"150"
	//"bob_pitch_zoomed"   							"0.002"
	//"bob_yaw_zoomed" 								"-.002"
	//"bob_roll_zoomed"								".002"

	// Rumble
	"fire_rumble"									"rumble_smg"

	// Sway
	"sway_rotate_attach"  							"SWAY_ROTATE"
	"sway_min_x"  									"-0.5"
	"sway_min_y"  									"-0.5"
	"sway_min_z"  									"-0.6"
	"sway_max_x"  									"0.5"
	"sway_max_y"  									"0.5"
	"sway_max_z"  									"0.6"
	"sway_min_pitch"  								"-3"
	"sway_min_yaw"									"-2.5"
	"sway_min_roll"   								"-4"
	"sway_max_pitch"  								"3"
	"sway_max_yaw"									"2.5"
	"sway_max_roll"   								"4"
	"sway_translate_gain" 							"2.5"
	"sway_rotate_gain"								"7"
	"sway_move_forward_translate_x"   				"-0.1"
	"sway_move_forward_translate_z"   				"-0.5"
	"sway_move_back_translate_x"  					"0.2"
	"sway_move_back_translate_z"  					"-0.2"
	"sway_move_left_translate_y"  					"-1"
	"sway_move_left_translate_z"  					"-0.5"
	"sway_move_left_rotate_roll"  					"-4"
	"sway_move_right_translate_y" 					"1"
	"sway_move_right_translate_z" 					"-0.5"
	"sway_move_right_rotate_roll" 					"4"
	"sway_move_up_translate_z"						"-1"
	"sway_move_down_translate_z"  					"1"
	"sway_turn_left_rotate_yaw"   					"-2.5"
	"sway_turn_right_rotate_yaw"  					"2.5"

	"sway_turn_left_translate_y"  					".5"
	"sway_turn_right_translate_y"  					"-.5"
	"sway_turn_up_translate_z"  					".2"
	"sway_turn_down_translate_z"  					"-.2"
	"sway_turn_up_translate_x"  					".1"
	"sway_turn_down_translate_x"  					"-.1"

	"sway_turn_left_rotate_roll"   					"4"
	"sway_turn_right_rotate_roll"  					"-4"
	"sway_turn_up_rotate_pitch"   					"3"
	"sway_turn_down_rotate_pitch" 					"-3"
	"sway_turn_up_rotate_roll"   					"-0.8"
	"sway_turn_down_rotate_roll" 					"0.8"

	// Zoomed Sway
	"sway_rotate_attach_zoomed"						"SWAY_ROTATE_ZOOMED"
	"sway_rotate_attach_blend_time_zoomed"			"0.2"
	"sway_rotate_gain_zoomed"						"5"

	"sway_min_yaw_zoomed"							"-0.04"
	"sway_max_yaw_zoomed"							"0.04"
	"sway_turn_left_rotate_yaw_zoomed"				"-0.085"
	"sway_turn_right_rotate_yaw_zoomed"				"0.085"

	"sway_min_roll_zoomed"   						"-1"
	"sway_max_roll_zoomed"   						"1"
	"sway_turn_left_rotate_roll_zoomed"   			"-1"
	"sway_turn_right_rotate_roll_zoomed"  			"1"

	"sway_move_right_rotate_roll_zoomed" 			"0.2"
	"sway_move_left_rotate_roll_zoomed"  			"-0.2"

	"sway_min_pitch_zoomed"  						"-0.03"
	"sway_max_pitch_zoomed"  						"0.03"
	"sway_turn_up_rotate_pitch_zoomed"				"0.07"
	"sway_turn_down_rotate_pitch_zoomed"			"-0.07"

	"spread_stand_hip"								"0.0"
	"spread_stand_hip_run"							"0.0"
	"spread_stand_hip_sprint"                       "0.0"
	"spread_crouch_hip"   							"0.0"

	"spread_stand_ads"								"0.0" //"0.25"
	"spread_crouch_ads"   							"0.0" //"0.25"
	"spread_air_ads"  								"0.0" //"0.5"

	"spread_kick_on_fire_stand_hip"   				"0.5"
	"spread_kick_on_fire_crouch_hip"  				"0.5"
	"spread_kick_on_fire_air_hip" 					"0.5"

	"spread_kick_on_fire_stand_ads"   				"0.0"
	"spread_kick_on_fire_crouch_ads"  				"0.0"
	"spread_kick_on_fire_air_ads" 					"0.0"

	"spread_max_kick_stand_hip"   					"2.0"
	"spread_max_kick_crouch_hip"  					"2.0"
	"spread_max_kick_air_hip" 						"2.0"

	"spread_max_kick_stand_ads"   					"0.4"
	"spread_max_kick_crouch_ads"  					"0.4"
	"spread_max_kick_air_ads" 						"0.4"

	"spread_decay_rate"   							"30.0"
	"spread_decay_delay"  							"0.3"

	"sprintcycle_time"								"0.55"
	"deployfirst_time"								"1.0"

	// Bodygroups:
	"bodygroup1_name"	"r97_sight_on"
	"bodygroup1_set"	"1"
	"bodygroup2_name"	"sight_acgs"
	"bodygroup2_set"	"0"
	"bodygroup3_name"	"sight_cro"
	"bodygroup3_set"	"0"
	"bodygroup4_name"	"sight_holo"
	"bodygroup4_set"	"0"
	"bodygroup5_name"	"proscreen"
	"bodygroup5_set"	"0"
	//"bodygroup6_name"	"suppressor_sq_med"
	//"bodygroup6_set"	"0"
	"bodygroup7_name"	"r97_sight_rear_on"
	"bodygroup7_set"	"1"
	"bodygroup8_name"	"r97_sight_front_on"
	"bodygroup8_set"	"1"

    "clip_bodygroup"						"r97_magazine"
    "clip_bodygroup_index_shown"			"0"
    "clip_bodygroup_index_hidden"			"1"
    "clip_bodygroup_show_for_milestone_0"	"1"
    "clip_bodygroup_show_for_milestone_1"	"0"
    "clip_bodygroup_show_for_milestone_2"	"1"
    "clip_bodygroup_show_for_milestone_3"	"1"

	Mods
	{
		iron_sights
		{
		}

		holosight
		{
			"bodygroup1_set"		"0"
			"bodygroup2_set"		"0"
			"bodygroup3_set"		"0"
		    "bodygroup4_set"		"1"
			"anim_alt_idleAttack" 	"2"
			"bodygroup7_set"		"0"
			"bodygroup8_set"		"0"
			"ui1_enable"		"0"
			"ui2_enable"		"0"

			"dof_zoom_nearDepthStart"						"6.161"
			"dof_zoom_nearDepthEnd"							"9.204"
			"viewmodel_offset_ads"							"0 0 -0.85"

			"ui5_enable"		"1"
		}
		redline_sight
		{
			"bodygroup1_set"		"0"
			"bodygroup2_set"		"1"
			"bodygroup3_set"		"0"
		    "bodygroup4_set"		"0"
			"bodygroup7_set"		"0"
			"bodygroup8_set"		"0"
			"ui1_enable"		"0"
			"ui2_enable"		"0"
			"ui3_enable"		"1"

			"viewmodel_offset_ads"							"0 -1.3 -.21"
			"dof_zoom_nearDepthStart"						"5.691"
			"dof_zoom_nearDepthEnd"							"6.745"

			"zoom_fov"						"25"
			dof_zoom_focusArea_horizontal					0.085
			dof_zoom_focusArea_top							0.080
			dof_zoom_focusArea_bottom						-0.047
		}
		threat_scope
		{
			"bodygroup1_set"		"0"
			"bodygroup2_set"		"0"
			"bodygroup3_set"		"1"
		    "bodygroup4_set"		"0"
			"bodygroup7_set"		"0"
			"bodygroup8_set"		"0"

			"ui1_enable"		"0"
			"ui2_enable"		"0"
			"ui4_enable"		"1"

			"viewmodel_offset_ads"							"0 -2.5 -.25"
			"dof_zoom_nearDepthStart"						"5.040"
			"dof_zoom_nearDepthEnd"							"5.737"

			"threat_scope_enabled"			"1"
			"threat_scope_bounds_tagname1"	"SCR_TR_CRO"
			"threat_scope_bounds_tagname2"	"SCR_BL_CRO"
			dof_zoom_focusArea_horizontal					0.068
			dof_zoom_focusArea_top							0.065
			dof_zoom_focusArea_bottom						-0.046
		}
		smart_lock
		{
		}
		pro_screen
		{
			"ui8_enable"		"1"
			"bodygroup5_set"	"1"
		}
		tactical_cdr_on_kill
		{

		}
		pas_fast_reload
		{
			"reload_time"								"*0.7"
			"reload_time_late1"							"*0.7"
			"reloadempty_time"							"*0.7"
			"reloadempty_time_late1"					"*0.7"
		}
		extended_ammo
		{
			"ammo_stockpile_max"							"660"
			"ammo_clip_size"   								"48"
			"ammo_default_total"							"660"
		}
		pas_run_and_gun
		{
			"primary_fire_does_not_block_sprint"			"1"
			"crosshair_force_sprint_fade_disabled"          "1"
		}
		pas_fast_ads
		{
			//Fast ADS
			"zoom_time_in"									"*0.5"
			"zoom_time_out"   								"*0.6"
		}
		pas_fast_swap
		{
			//Fast Swap
			"fast_swap_to"									"1"
		}
		burn_mod_r97
		{
			"is_burn_mod"		"1"

			//FX
			"tracer_effect"   								"P_wpn_tracer_BC"
			"tracer_effect_first_person"                    "P_wpn_tracer_BC"
			"fx_muzzle_flash_view"							"wpn_muzzleflash_pistol_elec_FP"
			"fx_muzzle_flash_world"							"wpn_muzzleflash_pistol_elec"

			"damage_near_value"   							"++5"
			"damage_far_value"								"++3"
   	 		"damage_very_far_value"							"++3"
			"damage_near_value_titanarmor"					"165"
			"damage_far_value_titanarmor" 					"135"
		}
	}


	"ui1_enable"		"1"
	"ui1_draw_cloaked"	"1"
	UiData1
	{
		"ui"								"ui/r97_reticle"
		"mesh"							"models/weapons/attachments/r97_rui_upper"
		Args
		{
			vis							player_zoomfrac
		}
	}

	"ui2_enable"		"1"
	UiData2
	{
		"ui"								"ui/r97_ammo_counter"
		"mesh"							"models/weapons/attachments/r97_rui_lower"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize						weapon_clipSize
			clipCount					weapon_stockpileClipCount
		}
	}

	"ui3_enable"		"0"
	"ui3_draw_cloaked"	"1"
	UiData3
	{
		"ui"							"ui/acgs_redline"
		"mesh"							"models/weapons/attachments/acgs_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui4_enable"		"0"
	"ui4_draw_cloaked"	"1"
	UiData4
	{
		"ui"							"ui/cro_threat_front"
		"mesh"							"models/weapons/attachments/cro_rui_upper"
		Args
		{
			zoomFrac					player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui5_enable"		"0"
	"ui5_draw_cloaked"	"1"
	UiData5
	{
		"ui"							"ui/holo_scope"
		"mesh"					"models/weapons/attachments/holo_rui_upper"
		Args
		{
			vis					player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
			clipCount					weapon_stockpileClipCount
		}
	}

	"ui8_enable"		"0"
	UiData8
	{
		"ui"									"ui/pro_screen_panel"
		"mesh"							"models/weapons/attachments/pro_screen_rui_upper"
		Args
		{
			proValue							proscreen_int0
			proOwnedByPlayer			proscreen_owner_is_player
		}
	}

	active_crosshair_count				"1"
	rui_crosshair_index					"0"

	RUI_CrosshairData
	{
		DefaultArgs
		{
			adjustedSpread				weapon_spread
			adsFrac 					player_zoomFrac
			isSprinting					player_is_sprinting
			isReloading					weapon_is_reloading
			teamColor					crosshair_team_color
			isAmped						weapon_is_amped
		    crosshairMovementX          crosshair_movement_x
		    crosshairMovementY          crosshair_movement_y
		}

		Crosshair_1
		{
			"ui"						"ui/crosshair_tri"
			"base_spread"				"0.0"
			Args
			{
				//isFiring				weapon_is_firing
			}
		}
	}
}
WeaponData
{
	// General
	"printname"   									"#WPN_CAR"
	"shortprintname"   								"#WPN_CAR_SHORT"
	"description" 									"#WPN_CAR_DESC"
	"longdesc"										"#WPN_CAR_LONGDESC"

	"menu_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_car"
	"hud_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_car"

	"weaponClass" 									"human"
	
	"body_type"										"light"
	"fire_mode"   									"auto"
	"pickup_hold_prompt"  							"Hold [USE] [WEAPONNAME]"
	"pickup_press_prompt" 							"[USE] [WEAPONNAME]"
	"minimap_reveal_distance"						"32000"
	"leveled_pickup"								"1"

	"damage_flags"									"DF_BULLET | DF_DISMEMBERMENT"

	// Menu
	"menu_category"                                 "smg"
	"menu_anim_class"                               "medium"
	"stat_damage" 									"40"
	"stat_range"  									"40"
	"stat_accuracy"   								"85"
	"stat_rof"										"70"

	// Models
	"viewmodel"   									"models/weapons/hemlok_smg/ptpov_hemlok_smg.mdl"
	"playermodel" 									"models/weapons/hemlok_smg/w_hemlok_smg.mdl"
	"holstermodel"									"models/weapons/hemlok_smg/w_car.mdl"

	// Effects
	"bounce_effect_table"							"pulse_blade"
	"impact_effect_table" 							"pulse_blade"
	//"impact_effect_table" 							"pulse_bullet"
	"tracer_effect_first_person"                "P_wpn_tracer_pulse_BC"
	"tracer_effect"   							"P_wpn_tracer_pulse_BC"
	"vortex_absorb_effect"							"wpn_vortex_projectile_rifle_FP"
	"vortex_absorb_effect_third_person"				"wpn_vortex_projectile_rifle"
	"vortex_absorb_sound"							"Vortex_Shield_AbsorbBulletSmall"
	"vortex_absorb_sound_1P_VS_3P"					"Vortex_Shield_AbsorbBulletSmall_1P_VS_3P"
	"projectile_adjust_to_gun_barrel"				"1"

	"sound_dryfire"									"hemlok_dryfire"
	"sound_pickup"									"wpn_pickup_SMG_1P"
	"sound_trigger_pull"							"Weapon_Hemlok_Trigger"
	"sound_zoom_in"									"Weapon_Hemlok_ADS_In"
	"sound_zoom_out"								"Weapon_Hemlok_ADS_Out"

	"fx_shell_eject_view"							"wpn_shelleject_rifle_assault_FP"
	"fx_shell_eject_world"							"wpn_shelleject_rifle_assault"
	"fx_shell_eject_attach"							"shell"

	"fx_muzzle_flash_view"							"wpn_muzzleflash_pulse_FP"
	"fx_muzzle_flash_world"							"wpn_muzzleflash_pulse"
	"fx_muzzle_flash_attach"						"muzzle_flash"

	// Sound
	"looping_sounds"								"1"

	"fire_sound_1_player_1p"						"Weapon_bulletCasings.Bounce"
	"fire_sound_1_player_3p"						"Weapon_bulletCasings.Bounce"

	"fire_sound_2_player_1p"						"Weapon_HemlokSMG_Single_1P"
	"fire_sound_2_player_3p"						"Weapon_HemlokSMG_Single_3P"
	"fire_sound_2_npc"								"Weapon_HemlokSMG_Single_npc"

	"burst_or_looping_fire_sound_start_1p"			"Weapon_HemlokSMG_Fire_First_1P"
	"burst_or_looping_fire_sound_middle_1p"			"Weapon_HemlokSMG_Fire_Loop_1P"
	"burst_or_looping_fire_sound_end_1p"			"Weapon_HemlokSMG_Fire_Last_1P"

	"burst_or_looping_fire_sound_start_3p"			""
	"burst_or_looping_fire_sound_middle_3p"			"Weapon_HemlokSMG_Fire_Loop_3P"
	"burst_or_looping_fire_sound_end_3p"			"Weapon_HemlokSMG_Fire_Last_3P"

	"burst_or_looping_fire_sound_start_npc"			""
	"burst_or_looping_fire_sound_middle_npc"		"Weapon_HemlokSMG_Fire_Loop_NPC"
	"burst_or_looping_fire_sound_end_npc"			"Weapon_HemlokSMG_Fire_Last_NPC"

	"low_ammo_sound_name_1"							"HemlokSMG_LowAmmo_Shot1"

	// Network
	"net_optimize"		                            "1"

	"damage_type" 									"bullet"

	"critical_hit_damage_scale"						"1"

	"ammo_clip_size"   								"30"

   "titanarmor_critical_hit_required"              "1"
	"critical_hit"									"1"

	"damage_near_distance"							"1000"
	"damage_far_distance" 							"1500"
	"red_crosshair_range" 							"1000"

	"aimassist_adspull_zoomStart"					"0.05"
	"aimassist_adspull_zoomEnd"						"1.0"

	dof_zoom_focusArea_horizontal					0.054
	dof_zoom_focusArea_top							0.086
	dof_zoom_focusArea_bottom						-0.013
	

	//"is_smart_pistol"								"1" 
	"titanarmor_critical_hit_required"              "1"
	"critical_hit"									"1"

	"is_smart_pistol"								"1"


	MP_BASE
	{
		"ammo_default_total"							"300"
		"ammo_stockpile_max"							"300"
		"ammo_no_remove_from_stockpile"					"1"
		"ammo_min_to_fire"								"1"

		"aimassist_adspull_weaponclass"					"broad"

		// Damage - When Used by Players
		"damage_near_value"   							"25"
		"damage_far_value"								"13"
		"damage_near_value_titanarmor"					"70"
		"damage_far_value_titanarmor" 					"35"
		"damage_rodeo" 									"90"

   	 	"damage_very_far_value"							"10"
   		"damage_very_far_distance"						"3000"

		"damage_headshot_scale"							"1.5"

		// Damage - When Used by NPCs
		"npc_damage_near_value"   						"9"
		"npc_damage_far_value"							"7"
		"npc_damage_near_value_titanarmor"				"0"
		"npc_damage_far_value_titanarmor" 				"0"

		"npc_max_range"   								"2000"

		"enable_highlight_networking_on_creation"		"<KEEP_DEFAULT>"

		"damage_heavyarmor_nontitan_scale"				"0.35"
		
		"red_crosshair_range" 							"1"

		"smart_ammo_search_distance"  					"10000000"
		"smart_ammo_max_targeted_burst"					"12"
		"smart_ammo_targeting_time_min"					"0.00"
		"smart_ammo_targeting_time_max"					"0.00"
		"smart_ammo_targeting_time_min_npc"				"0.1"
		"smart_ammo_targeting_time_max_npc"				"0.1"
		// View Drift

		"viewdrift_ads_stand_scale_pitch" 				"0.4"
		"viewdrift_ads_stand_scale_yaw"   				"0.55"
		"viewdrift_ads_crouch_scale_pitch"  			"0.25"
		"viewdrift_ads_crouch_scale_yaw"				"0.4"
		"viewdrift_ads_air_scale_pitch"   				"0.7"
		"viewdrift_ads_air_scale_yaw" 					"0.85"
		"viewdrift_ads_speed_pitch"   					"0.65"
		"viewdrift_ads_speed_yaw" 						"0.75"

		"viewkick_air_scale_ads"						"1.5"
		"spread_air_hip"  								"1.5"
	}

	SP_BASE
	{
		"ammo_default_total"							"150"
		"ammo_stockpile_max"							"240"
		"ammo_no_remove_from_stockpile"					"0"
		"ammo_min_to_fire"								"1"

		"aimassist_adspull_weaponclass"					"precise_sp"

		// Damage - When Used by Players
		"damage_near_value"   							"25"
		"damage_far_value"								"16"
		"damage_near_value_titanarmor"					"50"
		"damage_far_value_titanarmor" 					"32"
		"damage_rodeo" 									"90"

   	 	"damage_very_far_value"							"<KEEP_DEFAULT>"
   		"damage_very_far_distance"						"<KEEP_DEFAULT>"

		"damage_headshot_scale"							"3"

		// Damage - When Used by NPCs
		"npc_damage_near_value"   						"12"
		"npc_damage_far_value"							"8"
		"npc_damage_near_value_titanarmor"				"<KEEP_DEFAULT>"
		"npc_damage_far_value_titanarmor" 				"<KEEP_DEFAULT>"

		"npc_max_range"   								"4000"

		"enable_highlight_networking_on_creation"		"1"

		"damage_heavyarmor_nontitan_scale"				"1"

		// View Drift

		"viewdrift_ads_stand_scale_pitch" 				"0"
		"viewdrift_ads_stand_scale_yaw"   				"0"
		"viewdrift_ads_crouch_scale_pitch"  			"0"
		"viewdrift_ads_crouch_scale_yaw"				"0"
		"viewdrift_ads_air_scale_pitch"   				"0"
		"viewdrift_ads_air_scale_yaw" 					"0"
		"viewdrift_ads_speed_pitch"   					"0"
		"viewdrift_ads_speed_yaw" 						"0"

		"viewkick_air_scale_ads"						"1"
		"spread_air_hip"  								"0"
	}

	// NPC
	"npc_min_engage_range"							"0"
	"npc_max_engage_range"							"1100"
	"npc_min_engage_range_heavy_armor"				"500"
	"npc_max_engage_range_heavy_armor"				"2000"

	"proficiency_poor_spreadscale"					"5.0"
	"proficiency_average_spreadscale" 				"3.5"
	"proficiency_good_spreadscale"					"3.0"
	"proficiency_very_good_spreadscale"   			"2.5"

	"npc_min_burst"   								"4"
	"npc_max_burst"   								"7"
	"npc_rest_time_between_bursts_min"				"0.5"
	"npc_rest_time_between_bursts_max"				"0.7"

	"viewmodel_offset_ads"							"0 0 0"
	"dof_zoom_nearDepthStart"						"2.750"
	"dof_zoom_nearDepthEnd"							"4.000"
	"dof_nearDepthStart"							"2.683"
	"dof_nearDepthEnd"								"5.652"

	// Behavior
	"fire_rate"   									"14.1"
	"smart_ammo_allow_search_while_firing"			"1"
	"smart_ammo_allow_ads_lock"						"1" // "0" is default
	"zoom_time_in"									"0.1"
	"zoom_time_out"   								"0.1"
	"zoom_fov"										"45"
	"crosshair_force_sprint_fade_disabled"          "1"
	"reload_time" 									"1.8"
	"reload_time_late1"								"0.82"
	"reloadempty_time"								"2.53"
	"reloadempty_time_late1"						"1.46"
	"reloadempty_time_late2"						"0.79"
	"holster_time"									"0.5"
	"deploy_time" 									"0.66"
	"lower_time"  									"0.25"
	"raise_time"  									"0.3"
	"vortex_refire_behavior"  						"bullet"
	"allow_empty_fire"								"0"
	"reload_enabled"  								"1"
	"allow_empty_click"   							"1"
	"empty_reload_only"   							"0"
	"trigger_snipercam"   							"0"
	"allow_headshots" 								"1"
	"headshot_distance" 							"750"
	"primary_fire_does_not_block_sprint"			"1"
	"ads_move_speed_scale"							"0.8"
	"aimassist_disable_hipfire"						"0"
	"aimassist_disable_ads"							"0"
	"aimassist_disable_hipfire_titansonly"			"1"
	"aimassist_disable_ads_titansonly"				"1"
	"fast_swap_to"									"1"

	"sprint_fractional_anims"						"1"

	"ammo_suck_behavior"							"primary_weapons"

	// View Kick
	"viewkick_spring" 								"car"

	"viewkick_pitch_base" 							"-0.2"
	"viewkick_pitch_random"   						"0.5"
	"viewkick_pitch_softScale"						"2.0"
	"viewkick_pitch_hardScale"						"1.0"

	"viewkick_yaw_base"   							"0"
	"viewkick_yaw_random" 							"1.0"
	"viewkick_yaw_random_innerexclude"				"0.1"
	"viewkick_yaw_softScale"  						"1.0"
	"viewkick_yaw_hardScale"  						"0.2"

	"viewkick_roll_base"  							"0.0"
	"viewkick_roll_randomMin" 						"0"
	"viewkick_roll_randomMax" 						"0"
	"viewkick_roll_softScale" 						"1"
	"viewkick_roll_hardScale" 						"1.65"

	"viewkick_hipfire_weaponFraction" 				"0.35"
	"viewkick_hipfire_weaponFraction_vmScale" 		"3.5"
	"viewkick_ads_weaponFraction" 					"0.1"
	"viewkick_ads_weaponFraction_vmScale" 			"1.0"

	"viewkick_perm_pitch_base" 						"0"
	"viewkick_perm_pitch_random"   					"0"
	"viewkick_perm_yaw_base"   						"0"
	"viewkick_perm_yaw_random" 						"0"
	"viewkick_perm_yaw_random_innerexclude"			"0"

	"viewkick_scale_firstshot_hipfire"				"0.6"
	"viewkick_scale_min_hipfire"  					"1.75"
	"viewkick_scale_max_hipfire"  					"2"
	"viewkick_scale_firstshot_ads"					"1.35"
	"viewkick_scale_min_ads"  						"0.5"
	"viewkick_scale_max_ads"  						"0.5"
	"viewkick_scale_valuePerShot" 					"1.1"
	"viewkick_scale_valueLerpStart"   				"0"
	"viewkick_scale_valueLerpEnd" 					"3"
	"viewkick_scale_valueDecayDelay"  				"0.15"
	"viewkick_scale_valueDecayRate"   				"30"

	//
	"viewmodel_shake_forward"						"0.2"
	"viewmodel_shake_up"							"0.0"
	"viewmodel_shake_right"							"0.0"

	// Bob
	"bob_cycle_time"  								"0.4"
	"bob_vert_dist"   								"0.19"
	"bob_horz_dist"   								"0.1"
	"bob_max_speed"   								"150"
	"bob_pitch"   									"0.75"
	"bob_yaw" 										"-1.7"
	"bob_roll"										"1.2"

	// Bob_Zoomed
	"bob_cycle_time_zoomed"  						"0.4"
	"bob_vert_dist_zoomed"   						"0.01"
	"bob_horz_dist_zoomed"   						"0.01"
	"bob_max_speed_zoomed"   						"150"
	//"bob_pitch_zoomed"   							"0.002"
	//"bob_yaw_zoomed" 								"-.002"
	//"bob_roll_zoomed"								".002"
	

	// Rumble
	"fire_rumble"									"rumble_smg"

	// Sway
	"sway_rotate_attach"  							"SWAY_ROTATE"
	"sway_min_x"  									"-0.5"
	"sway_min_y"  									"-0.5"
	"sway_min_z"  									"-0.6"
	"sway_max_x"  									"0.5"
	"sway_max_y"  									"0.5"
	"sway_max_z"  									"0.6"
	"sway_min_pitch"  								"-3"
	"sway_min_yaw"									"-2.5"
	"sway_min_roll"   								"-4"
	"sway_max_pitch"  								"3"
	"sway_max_yaw"									"2.5"
	"sway_max_roll"   								"4"
	"sway_translate_gain" 							"2.5"
	"sway_rotate_gain"								"7"
	"sway_move_forward_translate_x"   				"-0.1"
	"sway_move_forward_translate_z"   				"-0.5"
	"sway_move_back_translate_x"  					"0.2"
	"sway_move_back_translate_z"  					"-0.2"
	"sway_move_left_translate_y"  					"-1"
	"sway_move_left_translate_z"  					"-0.5"
	"sway_move_left_rotate_roll"  					"-4"
	"sway_move_right_translate_y" 					"1"
	"sway_move_right_translate_z" 					"-0.5"
	"sway_move_right_rotate_roll" 					"4"
	"sway_move_up_translate_z"						"-1"
	"sway_move_down_translate_z"  					"1"
	"sway_turn_left_rotate_yaw"   					"-2.5"
	"sway_turn_right_rotate_yaw"  					"2.5"

	"sway_turn_left_translate_y"  					".5"
	"sway_turn_right_translate_y"  					"-.5"
	"sway_turn_up_translate_z"  					".2"
	"sway_turn_down_translate_z"  					"-.2"
	"sway_turn_up_translate_x"  					".1"
	"sway_turn_down_translate_x"  					"-.1"

	"sway_turn_left_rotate_roll"   					"4"
	"sway_turn_right_rotate_roll"  					"-4"
	"sway_turn_up_rotate_pitch"   					"3"
	"sway_turn_down_rotate_pitch" 					"-3"
	"sway_turn_up_rotate_roll"   					"-0.8"
	"sway_turn_down_rotate_roll" 					"0.8"

	// Zoomed Sway
	"sway_rotate_attach_zoomed"						"SWAY_ROTATE_ZOOMED"
	"sway_rotate_attach_blend_time_zoomed"			"0.2"
	"sway_rotate_gain_zoomed"						"5"

	"sway_min_yaw_zoomed"							"-0.04"
	"sway_max_yaw_zoomed"							"0.04"
	"sway_turn_left_rotate_yaw_zoomed"				"-0.085"
	"sway_turn_right_rotate_yaw_zoomed"				"0.085"

	"sway_min_roll_zoomed"   						"-1"
	"sway_max_roll_zoomed"   						"1"
	"sway_turn_left_rotate_roll_zoomed"   			"-1"
	"sway_turn_right_rotate_roll_zoomed"  			"1"

	"sway_move_right_rotate_roll_zoomed" 			"0.2"
	"sway_move_left_rotate_roll_zoomed"  			"-0.2"

	"sway_min_pitch_zoomed"  						"-0.03"
	"sway_max_pitch_zoomed"  						"0.03"
	"sway_turn_up_rotate_pitch_zoomed"				"0.07"
	"sway_turn_down_rotate_pitch_zoomed"			"-0.07"

	// WeaponED Unhandled Key/Values and custom script Key/Values
	"sprintcycle_time"								"0.55"
	"smart_ammo_allow_search_while_firing"			"1"
	"smart_ammo_allow_ads_lock"						"1" // "0" is default
	"smart_ammo_search_angle" 						"360"
	"smart_ammo_search_npcs"						"0"
	"smart_ammo_search_players"						"1"
	"smart_ammo_search_projectiles"					"0"
	"smart_ammo_titans_block_los"					"1"
	"smart_ammo_track_cloaked_targets"				"1"
	"smart_ammo_targeting_time_modifier_projectile_owner"	"0.00"
	"smart_ammo_target_max_locks_normal"			"10"	// divide health by damage near
	"smart_ammo_target_npc_lock_factor"				"10"		// smart pistol does head shots at 2x damage
	"smart_ammo_new_target_delay"					"0.1"
	"smart_ammo_draw_acquisition_lines"				"0"
	"smart_ammo_hud_lock_style"						"pilot_pistol"
	"smart_ammo_hud_type" 							"smart_pistol"
	"smart_ammo_target_confirmed_sound"				"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_target_confirming_sound"			"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_looping_sound_acquiring"			"Weapon_SmartPistol_TargetLockingLoop"
	"smart_ammo_lock_type"							"small"
	"smart_ammo_alert_npc_fraction"					"0.1" 	// unaware since lock on fraction will not go above 1
	"smart_ammo_allow_hip_fire_lock"				"1"
	"smart_ammo_lock_effect_3p"						"P_smartpistol_lockon"
	"smart_ammo_lock_effect_attachment"				"muzzle_flash"
	"smart_ammo_player_targets_must_be_tracked"		"0"
	"smart_ammo_npc_targets_must_be_tracked"		"0"
	"smart_ammo_tracker_status_effects"				"0"
	"smart_ammo_tracked_targets_check_visibility"	"0"
	"threat_scope_enabled"			"1"


	"spread_stand_ads"								"0.0" //"0.25"
	"spread_crouch_ads"   							"0.0" //"0.25"
	"spread_air_ads"  								"0.0" //"0.5"

	"spread_kick_on_fire_stand_hip"   				"0"
	"spread_kick_on_fire_crouch_hip"  				"0"
	"spread_kick_on_fire_air_hip" 					"0"

	"spread_kick_on_fire_stand_ads"   				"0"
	"spread_kick_on_fire_crouch_ads"  				"0"
	"spread_kick_on_fire_air_ads" 					"0"

	"spread_max_kick_stand_hip"   					"0.0"
	"spread_max_kick_crouch_hip"  					"0.0"
	"spread_max_kick_air_hip" 						"0.0"

	"spread_max_kick_stand_ads"   					"0"
	"spread_max_kick_crouch_ads"  					"0"
	"spread_max_kick_air_ads" 						"0"

	"spread_decay_rate"   							"30.0"
	"spread_decay_delay"  							"0.15"

	"sprintcycle_time"								"0.55"
	"deployfirst_time"								"1.0"

	// Bodygroups:
	"bodygroup1_name"	"car101_sight_on"
	"bodygroup1_set"	"1"
	"bodygroup2_name"	"sight_acgs"
	"bodygroup2_set"	"0"
	"bodygroup3_name"	"sight_cro"
	"bodygroup3_set"	"0"
	"bodygroup4_name"	"sight_holo"
	"bodygroup4_set"	"0"
	"bodygroup5_name"	"proscreen"
	"bodygroup5_set"	"0"
	// "bodygroup6_name"	"suppressor_sq_med"
	// "bodygroup6_set"	"0"
	

    "clip_bodygroup"						"car101_magazine"
    "clip_bodygroup_index_shown"			"0"
    "clip_bodygroup_index_hidden"			"1"
    "clip_bodygroup_show_for_milestone_0"	"1"
    "clip_bodygroup_show_for_milestone_1"	"0"
    "clip_bodygroup_show_for_milestone_2"	"1"
    "clip_bodygroup_show_for_milestone_3"	"1"

	Mods
	{
		iron_sights
		{
			"bodygroup1_set"	    "1"
		}
		holosight
		{
			"bodygroup1_set"	    "0"
			"bodygroup2_set"	    "0"
			"bodygroup3_set"	    "0"
			"bodygroup4_set"	    "1"
			//"anim_alt_idleAttack"   "2"

			"dof_zoom_nearDepthStart"						"6.161"
			"dof_zoom_nearDepthEnd"							"9.204"
			"viewmodel_offset_ads"							"0 2.3 -0.7"
			"ui1_enable"		"0"
			"ui7_enable"		"1"
			dof_zoom_focusArea_horizontal					0.062
			dof_zoom_focusArea_top							0.10
			dof_zoom_focusArea_bottom						-0.040
		}
		redline_sight
		{
			"ui1_enable"		"0"
			"ui3_enable"		"1"

			"bodygroup1_set"	    "0"
			"bodygroup2_set"	    "1"
			"bodygroup3_set"	    "0"
			"bodygroup4_set"	    "0"
			"dof_zoom_nearDepthStart"						"5.691"
			"dof_zoom_nearDepthEnd"							"6.745"
			"viewmodel_offset_ads"							"0 0.9 -.07"

			"zoom_fov"						"25"
			dof_zoom_focusArea_horizontal					0.085
			dof_zoom_focusArea_top							0.080
			dof_zoom_focusArea_bottom						-0.047
		}
		threat_scope
		{
			"bodygroup1_set"	    "0"
			"bodygroup2_set"	    "0"
			"bodygroup3_set"	    "1"
			"bodygroup4_set"	    "0"
			"ui1_enable"		"0"
			"ui4_enable"		"1"

			"dof_zoom_nearDepthStart"						"5.040"
			"dof_zoom_nearDepthEnd"							"5.737"
			"viewmodel_offset_ads"							"0 -.3 -.11"

			"threat_scope_enabled"			"1"
			"threat_scope_bounds_tagname1"	"SCR_TR_CRO"
			"threat_scope_bounds_tagname2"	"SCR_BL_CRO"
			dof_zoom_focusArea_horizontal					0.068
			dof_zoom_focusArea_top							0.065
			dof_zoom_focusArea_bottom						-0.046
		}
		pro_screen
		{
			"ui8_enable"		"1"
			"bodygroup5_set"	"1"
		}
		pas_fast_reload
		{
			"reload_time"								"*0.7"
			"reload_time_late1"							"*0.7"
			"reloadempty_time"							"*0.7"
			"reloadempty_time_late1"					"*0.7"
		}
		extended_ammo
		{
			"ammo_stockpile_max"						"525"
			"ammo_clip_size"   							"999999999"
			"ammo_default_total"						"525"
		}
		pas_fast_ads
		{
			//Fast ADS
			"zoom_time_in"									"*0.5"
			"zoom_time_out"   								"*0.6"
		}
		pas_fast_swap
		{
			//Fast Swap
			"fast_swap_to"									"1"
		}
		pas_run_and_gun
		{
			"primary_fire_does_not_block_sprint"			"0"
			"crosshair_force_sprint_fade_disabled"          "1"
		}
		tactical_cdr_on_kill
		{

		}
		enhanced_targeting
		{
			"smart_ammo_search_angle" 				"360"
			"smart_ammo_targeting_time_min"			"0.34"
			"smart_ammo_targeting_time_max"			"0.59"
			"smart_ammo_targeting_time_min_npc"		"0.1"
			"smart_ammo_targeting_time_max_npc"		"0.15"
			"smart_ammo_new_target_delay"			"0.5"
		}
		
		proto_activeshot
		{
			"smart_ammo_targeting_time_min"					"5.8"
			"smart_ammo_targeting_time_max"					"6.0"
			"smart_ammo_targeting_time_min_npc"				"0.4"
			"smart_ammo_targeting_time_max_npc"				"0.8"

			"smart_ammo_new_target_delay"					"0.5"
			"smart_ammo_active_shot_time"					"5.2"
			"smart_ammo_active_shot_damage_multiplier"		"4.0"
			"smart_ammo_hold_and_reset_after_all_locks"		"0.0"
		}

		proto_tracker //Turned on by default as a test.
		{
			"smart_ammo_player_targets_must_be_tracked"		"1"
			"smart_ammo_allow_search_while_firing"			"1"
			"smart_ammo_allow_ads_lock"						"1"
			"smart_ammo_tracker_status_effects"				"1"
			"smart_ammo_tracked_targets_check_visibility"	"1"
		}
		ads_smaller_lock_on
		{
			"smart_ammo_search_angle" 						"360"
		}
		og_pilot
		{
			"primary_fire_does_not_block_sprint"			"1"
			"ammo_default_total"							"72"
			"ammo_stockpile_max"							"72"
			"ammo_no_remove_from_stockpile"					"1"
			"smart_ammo_search_distance"  					"1400"

			"damage_near_value"   							"*4.0"
			"damage_far_value"								"*4.0"

			"pass_through_depth"							"500"		// Not sure how long a dropship is, probably the biggest entity
			"pass_through_damage_preserved_scale"			"1.0"
		}
		burn_mod_car
		{

			//FX
			"tracer_effect"   								"P_wpn_tracer_BC"
			"tracer_effect_first_person"                    "P_wpn_tracer_BC"
			"fx_muzzle_flash_view"							"wpn_muzzleflash_pistol_elec_FP"
			"fx_muzzle_flash_world"							"wpn_muzzleflash_pistol_elec"

			"is_burn_mod"		"1"

			"damage_near_value"   							"++10"
			"damage_far_value"								"++3"
   	 		"damage_very_far_value"							"++3"
			"damage_near_value_titanarmor"					"170"
			"damage_far_value_titanarmor" 					"135"
		}
	}

	"ui1_enable"		"1"
	"ui1_draw_cloaked"	"1"
	UiData1
	{
		"ui"							"ui/car_smg_ammo_counter_small"
		"mesh"						"models/weapons/attachments/car_smg_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize						weapon_clipSize
			clipCount					weapon_stockpileClipCount
		}
	}

	"ui2_enable"		"1"
	UiData2
	{
		"ui"								"ui/car_smg_ammo_counter"
		"mesh"							"models/weapons/attachments/car_smg_rui_lower"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize						weapon_clipSize
			clipCount					weapon_stockpileClipCount
		}
	}

	"ui3_enable"		"0"
	"ui3_draw_cloaked"	"1"
	UiData3
	{
		"ui"								"ui/acgs_redline"
		"mesh"							"models/weapons/attachments/acgs_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui4_enable"		"1"
	"ui4_draw_cloaked"	"1"
	UiData4
	{
		"ui"							"ui/cro_threat_front"
		"mesh"							"models/weapons/attachments/cro_rui_upper"
		Args
		{
			zoomFrac					player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui7_enable"		"0"
	"ui7_draw_cloaked"	"1"
	UiData7
	{
		"ui"							"ui/holo_scope"
		"mesh"					"models/weapons/attachments/holo_rui_upper"
		Args
		{
			vis					player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
			clipCount					weapon_stockpileClipCount
		}
	}

	"ui8_enable"		"0"
	UiData8
	{
		"ui"									"ui/pro_screen_panel"
		"mesh"							"models/weapons/attachments/pro_screen_rui_upper"
		Args
		{
			proValue					weapon_clipSize		
			proOwnedByPlayer			proscreen_owner_is_player
		}
	}

	active_crosshair_count				"1"
	rui_crosshair_index					"0"

	RUI_CrosshairData
	{
		DefaultArgs
		{
			adjustedSpread				weapon_spread
			//adsFrac 					player_zoomfrac
			isSprinting					player_is_sprinting
			isReloading					weapon_is_reloading
			teamColor					crosshair_team_color
			isAmped						weapon_is_amped
		    crosshairMovementX          crosshair_movement_x
		    crosshairMovementY          crosshair_movement_y
		}

		Crosshair_1
		{
			"ui"						"ui/crosshair_wingman_n"
			"base_spread"				"0.0"
			Args
			{
				isFiring				weapon_is_firing
			}
		}
	}
}
WeaponData
{
	// General
	"printname"   									"#WPN_CAR"
	"shortprintname"   								"#WPN_CAR_SHORT"
	"description" 									"#WPN_CAR_DESC"
	"longdesc"										"#WPN_CAR_LONGDESC"

	"menu_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_car"
	"hud_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_car"

	"weaponClass" 									"human"
	"body_type"										"medium"
	"fire_mode"   									"auto"
	"pickup_hold_prompt"  							"Hold [USE] [WEAPONNAME]"
	"pickup_press_prompt" 							"[USE] [WEAPONNAME]"
	"minimap_reveal_distance"						"32000"
	"leveled_pickup"								"1"

	"damage_flags"									"DF_BULLET | DF_INSTANT | DF_DISMEMBERMENT"

	// Menu
	"menu_category"                                 "smg"
   	"menu_anim_class"                               "medium"
	"stat_damage" 									"35"
	"stat_range"  									"40"
	"stat_accuracy"   								"90"
	"stat_rof"		        						"38"

	// Models
	"viewmodel"   									"models/weapons/hemlok_smg/ptpov_hemlok_smg.mdl"
	"playermodel" 									"models/weapons/hemlok_smg/w_hemlok_smg.mdl"

	// Effects
	"impact_effect_table" 							"pulse_bullet"
	"tracer_effect_first_person"                    "P_wpn_tracer_pulse"
	"tracer_effect"   								"P_wpn_tracer_pulse"
	"vortex_absorb_effect"							"wpn_vortex_projectile_rifle_FP"
	"vortex_absorb_effect_third_person"				"wpn_vortex_projectile_rifle"
	"vortex_absorb_sound"							"Vortex_Shield_AbsorbBulletSmall"
	"vortex_absorb_sound_1P_VS_3P"					"Vortex_Shield_AbsorbBulletSmall_1P_VS_3P"
	"projectile_adjust_to_gun_barrel"				"1"

	"sound_dryfire"									"hemlok_dryfire"
	"sound_pickup"									"wpn_pickup_SMG_1P"
	"sound_trigger_pull"							"Weapon_Hemlok_Trigger"
	"sound_zoom_in"									"Weapon_Hemlok_ADS_In"
	"sound_zoom_out"								"Weapon_Hemlok_ADS_Out"

	"fx_shell_eject_view"							"wpn_shelleject_rifle_assault_FP"
	"fx_shell_eject_world"							"wpn_shelleject_rifle_assault"
	"fx_shell_eject_attach"							"shell"

	"fx_muzzle_flash_view"							"wpn_muzzleflash_pulse_FP"
	"fx_muzzle_flash_world"							"wpn_muzzleflash_pulse"
	"fx_muzzle_flash_attach"						"muzzle_flash"

	// Sound
	"looping_sounds"								"1"

	"fire_sound_1_player_1p"						"Weapon_bulletCasings.Bounce"
	"fire_sound_1_player_3p"						"Weapon_bulletCasings.Bounce"

	"fire_sound_2_player_1p"						"Weapon_HemlokSMG_Single_1P"
	"fire_sound_2_player_3p"						"Weapon_HemlokSMG_Single_3P"
	"fire_sound_2_npc"								"Weapon_HemlokSMG_Single_npc"

	"burst_or_looping_fire_sound_start_1p"			"Weapon_HemlokSMG_Fire_First_1P"
	"burst_or_looping_fire_sound_middle_1p"			"Weapon_HemlokSMG_Fire_Loop_1P"
	"burst_or_looping_fire_sound_end_1p"			"Weapon_HemlokSMG_Fire_Last_1P"

	"burst_or_looping_fire_sound_start_3p"			""
	"burst_or_looping_fire_sound_middle_3p"			"Weapon_HemlokSMG_Fire_Loop_3P"
	"burst_or_looping_fire_sound_end_3p"			"Weapon_HemlokSMG_Fire_Last_3P"

	"burst_or_looping_fire_sound_start_npc"			""
	"burst_or_looping_fire_sound_middle_npc"		"Weapon_HemlokSMG_Fire_Loop_NPC"
	"burst_or_looping_fire_sound_end_npc"			"Weapon_HemlokSMG_Fire_Last_NPC"

	"low_ammo_sound_name_1"							"HemlokSMG_LowAmmo_Shot1"

	// Network
	"net_optimize"		                            "1"

	// Damage - When Used by Players
	"damage_type" 									"bullet"

	"critical_hit_damage_scale"						"1"

	// Ammo
	"ammo_clip_size"   								"33"

   "titanarmor_critical_hit_required"              "1"
	"critical_hit"									"1"

	"damage_near_distance"							"1000"
	"damage_far_distance" 							"1500"
	"red_crosshair_range" 							"1000"
	//"is_smart_pistol"								"1" 


	MP_BASE
	{
		"ammo_default_total"							"333"
		"ammo_stockpile_max"							"333"
		"ammo_no_remove_from_stockpile"					"1"
		"ammo_min_to_fire"								"1"

		"aimassist_adspull_weaponclass"					"broad"

		"damage_near_value"   							"25"
		"damage_far_value"								"15"
		"damage_near_value_titanarmor"					"90"
		"damage_far_value_titanarmor" 					"60"
		"damage_rodeo" 									"110"

   	 	"damage_very_far_value"							"12"
   		"damage_very_far_distance"						"3000"

		"damage_headshot_scale"							"1.5"

		"npc_damage_near_value"   						"15"
		"npc_damage_far_value"							"10"
		"npc_max_range"   								"2500"
		"red_crosshair_range" 							"10000000"

		"smart_ammo_search_distance"  					"10000000"
		"smart_ammo_max_targeted_burst"					"12"
		"smart_ammo_targeting_time_min"					"0.00"//"0.37"
		"smart_ammo_targeting_time_max"					"0.00"//"0.65"
		"smart_ammo_targeting_time_min_npc"				"0.1"
		"smart_ammo_targeting_time_max_npc"				"0.2"
		"enable_highlight_networking_on_creation"		"<KEEP_DEFAULT>"

		"damage_heavyarmor_nontitan_scale"				"0.35"

		// View Drift

		"viewdrift_ads_stand_scale_pitch" 				"0.4"
		"viewdrift_ads_stand_scale_yaw"   				"0.55"
		"viewdrift_ads_crouch_scale_pitch"  			"0.25"
		"viewdrift_ads_crouch_scale_yaw"				"0.4"
		"viewdrift_ads_air_scale_pitch"   				"0.7"
		"viewdrift_ads_air_scale_yaw" 					"0.85"
		"viewdrift_ads_speed_pitch"   					"0.65"
		"viewdrift_ads_speed_yaw" 						"0.75"

		"viewkick_air_scale_ads"						"1.5"
		"spread_air_hip"  								"1.5"
	}

	SP_BASE
	{
		"ammo_default_total"							"165"
		"ammo_stockpile_max"							"264"
		"ammo_no_remove_from_stockpile"					"0"
		"ammo_min_to_fire"								"1"

		"aimassist_adspull_weaponclass"					"precise_sp"

		"damage_near_value"   							"22"
		"damage_far_value"								"12"
		"damage_near_value_titanarmor"					"35"
		"damage_far_value_titanarmor" 					"20"
		"damage_rodeo" 									"110"

   	 	"damage_very_far_value"							"<KEEP_DEFAULT>"
   		"damage_very_far_distance"						"<KEEP_DEFAULT>"

		"damage_headshot_scale"							"3"

		"npc_damage_near_value"   						"11"
		"npc_damage_far_value"							"6"
		"npc_max_range"   								"4000"

		"enable_highlight_networking_on_creation"		"1"

		"damage_heavyarmor_nontitan_scale"				"1"

		// View Drift

		"viewdrift_ads_stand_scale_pitch" 				"0"
		"viewdrift_ads_stand_scale_yaw"   				"0"
		"viewdrift_ads_crouch_scale_pitch"  			"0"
		"viewdrift_ads_crouch_scale_yaw"				"0"
		"viewdrift_ads_air_scale_pitch"   				"0"
		"viewdrift_ads_air_scale_yaw" 					"0"
		"viewdrift_ads_speed_pitch"   					"0"
		"viewdrift_ads_speed_yaw" 						"0"

		"viewkick_air_scale_ads"						"1"
		"spread_air_hip"  								"0"
	}

	// NPC
	"proficiency_poor_spreadscale"					"5.0"
	"proficiency_average_spreadscale" 				"3.5"
	"proficiency_good_spreadscale"					"3.0"
	"proficiency_very_good_spreadscale"   			"2.0"

	"npc_min_engage_range"							"0"
	"npc_max_engage_range"							"1100"
	"npc_rest_time_between_bursts_min"				"0.5"
	"npc_rest_time_between_bursts_max"				"0.7"

	"npc_min_burst"   								"2"
	"npc_max_burst"   								"5"
	"npc_rest_time_between_bursts_min"				"0.5"
	"npc_rest_time_between_bursts_max"				"0.7"

	"viewmodel_offset_ads"							"0 0 0"
	"dof_zoom_nearDepthStart"						"2.750"
	"dof_zoom_nearDepthEnd"							"4.000"
	"dof_nearDepthStart"							"2.683"
	"dof_nearDepthEnd"								"5.652"


	// Behavior
	"fire_rate"   									"11"

	//"burst_fire_count"							"3"
	//"burst_fire_delay"							"0.3"
	"smart_ammo_allow_search_while_firing"			"1"
	"smart_ammo_allow_ads_lock"						"1" // "0" is default
	"zoom_time_in"									"0.1"
	"zoom_time_out"   								"0.1"
	"zoom_fov"										"45"
	"reload_time" 									"1.5"
	"reload_time_late1"								"0.82"
	"reloadempty_time"								"2.0"
	"reloadempty_time_late1"						"1.46"
	"reloadempty_time_late2"						"0.79"
	"holster_time"									"0.5"
	"deploy_time" 									"0.40"
	"lower_time"  									"0.25"
	"raise_time"  									"0.3"
	"vortex_refire_behavior"  						"bullet"
	"allow_empty_fire"								"0"
	"reload_enabled"  								"1"
	"allow_empty_click"   							"1"
	"empty_reload_only"   							"0"
	"trigger_snipercam"   							"0"
	"allow_headshots" 								"1"
	"headshot_distance" 							"750"
	"primary_fire_does_not_block_sprint"			"0"
	"ads_move_speed_scale"							"0.75"
	"aimassist_disable_hipfire"						"0"
	"aimassist_disable_ads"							"0"
	"aimassist_disable_hipfire_titansonly"			"0"
	"aimassist_disable_ads_titansonly"				"0"
	"aimassist_adspull_zoomStart"					"0.05"
	"aimassist_adspull_zoomEnd"						"1.0"

	"raise_from_sprint_time"						"0"
	"sprint_fractional_anims"						"0"

	// Spread
	"spread_stand_hip"								"0"
	"spread_stand_hip_run"							"0"
	"spread_stand_hip_sprint"                       "0"
	"spread_crouch_hip"   							"0"

	"spread_stand_ads"								"0.0" //"0.35"
	"spread_crouch_ads"   							"0.0" //"0.35"
	"spread_air_ads"  								"0.0" //"0.5"

	"spread_kick_on_fire_stand_hip"   				"0"
	"spread_kick_on_fire_crouch_hip"  				"0"
	"spread_kick_on_fire_air_hip" 					"0"

	"spread_kick_on_fire_stand_ads"   				"0.0"
	"spread_kick_on_fire_crouch_ads"  				"0.0"
	"spread_kick_on_fire_air_ads" 					"0.0"

	"spread_max_kick_stand_hip"   					"0"
	"spread_max_kick_crouch_hip"  					"0"
	"spread_max_kick_air_hip" 						"0"

	"spread_max_kick_stand_ads"   					"0.0"
	"spread_max_kick_crouch_ads"  					"0.0"
	"spread_max_kick_air_ads" 						"0.0"

	"spread_decay_delay"  							"0.1"
	"spread_decay_rate"   							"2.3"

	"ammo_suck_behavior"							"primary_weapons"

	// View Kick
	"viewkick_spring" 								"car"

	"viewkick_pitch_base" 							"-0.15"
	"viewkick_pitch_random"   						"0.35"
	"viewkick_pitch_softScale"						"1.2"
	"viewkick_pitch_hardScale"						"0.9"

	"viewkick_yaw_base"   							"0.1"
	"viewkick_yaw_random" 							"0.4"
	"viewkick_yaw_softScale"  						"1.2"
	"viewkick_yaw_hardScale"  						"0.9"

	"viewkick_roll_base"  							"0.0"
	"viewkick_roll_randomMin" 						"0.45"
	"viewkick_roll_randomMax" 						"0.55"
	"viewkick_roll_softScale" 						"0.5"
	"viewkick_roll_hardScale" 						"0.25"

	"viewkick_hipfire_weaponFraction" 				"0.1"
	"viewkick_hipfire_weaponFraction_vmScale" 		"5"
	"viewkick_ads_weaponFraction" 					"0.3"
	"viewkick_ads_weaponFraction_vmScale" 			"1.0"

	"viewkick_perm_pitch_base" 						"-0.060"
	"viewkick_perm_pitch_random"   					"0.395"
	"viewkick_perm_yaw_base"   						"0.000"
	"viewkick_perm_yaw_random" 						"0.795"

	"viewkick_scale_firstshot_hipfire"				"0.3"
	"viewkick_scale_firstshot_ads"					"1.0"
	"viewkick_scale_min_hipfire"  					"1.3"
	"viewkick_scale_max_hipfire"  					"1.3"
	"viewkick_scale_min_ads"  						"1.1"
	"viewkick_scale_max_ads"  						"1.1"
	"viewkick_scale_valuePerShot" 					"1"
	"viewkick_scale_valueLerpStart"   				"1"
	"viewkick_scale_valueLerpEnd" 					"7"
	"viewkick_scale_valueDecayDelay"  				"0.15"
	"viewkick_scale_valueDecayRate"   				"60"

	"viewkick_move_scale"							"1.0"

	//
	"viewmodel_shake_forward"						"0.1"
	"viewmodel_shake_up"							"0.1"
	"viewmodel_shake_right"							"0.0"


	// Bob
	"bob_cycle_time"  								"0.4"
	"bob_vert_dist"   								"0.19"
	"bob_horz_dist"   								"0.1"
	"bob_max_speed"   								"150"
	"bob_pitch"   									"0.75"
	"bob_yaw" 										"-1.7"
	"bob_roll"										"1.2"

	// Bob_Zoomed
	"bob_cycle_time_zoomed"  						"0.4"
	"bob_vert_dist_zoomed"   						"0.01"
	"bob_horz_dist_zoomed"   						"0.01"
	"bob_max_speed_zoomed"   						"150"
	//"bob_pitch_zoomed"   							"0.002"
	//"bob_yaw_zoomed" 								"-.002"
	//"bob_roll_zoomed"								".002"

	// Rumble
	"fire_rumble"									"rumble_smg"

	// Sway
	"smart_ammo_search_angle" 						"360"
	"smart_ammo_search_npcs"						"0"
	"smart_ammo_search_players"						"1"
	"smart_ammo_search_projectiles"					"0"
	"smart_ammo_titans_block_los"					"1"
	"smart_ammo_track_cloaked_targets"				"1"
	"smart_ammo_targeting_time_modifier_projectile_owner"	"0.00"
	"smart_ammo_target_max_locks_normal"			"10"	// divide health by damage near
	"smart_ammo_target_npc_lock_factor"				"10"		// smart pistol does head shots at 2x damage
	"smart_ammo_new_target_delay"					"0.5"
	"smart_ammo_draw_acquisition_lines"				"1"
	"smart_ammo_hud_lock_style"						"pilot_pistol"
	"smart_ammo_hud_type" 							"smart_pistol"
	"smart_ammo_target_confirmed_sound"				"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_target_confirming_sound"			"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_looping_sound_acquiring"			"Weapon_SmartPistol_TargetLockingLoop"
	"smart_ammo_lock_type"							"small"
	"smart_ammo_alert_npc_fraction"					"0.1" 	// unaware since lock on fraction will not go above 1
	"smart_ammo_allow_hip_fire_lock"				"1"
	"smart_ammo_lock_effect_3p"						"P_smartpistol_lockon"
	"smart_ammo_lock_effect_attachment"				"muzzle_flash"
	"smart_ammo_player_targets_must_be_tracked"		"0"
	"smart_ammo_npc_targets_must_be_tracked"		"0"
	"smart_ammo_tracker_status_effects"				"0"
	"smart_ammo_tracked_targets_check_visibility"	"0"
	"sway_rotate_attach"  							"SWAY_ROTATE"
	"sway_min_x"  									"-0.5"
	"sway_min_y"  									"-0.5"
	"sway_min_z"  									"-0.6"
	"sway_max_x"  									"0.5"
	"sway_max_y"  									"0.5"
	"sway_max_z"  									"0.6"
	"sway_min_pitch"  								"-3"
	"sway_min_yaw"									"-2.5"
	"sway_min_roll"   								"-4"
	"sway_max_pitch"  								"3"
	"sway_max_yaw"									"2.5"
	"sway_max_roll"   								"4"
	"sway_translate_gain" 							"2.5"
	"sway_rotate_gain"								"7"
	"sway_move_forward_translate_x"   				"-0.1"
	"sway_move_forward_translate_z"   				"-0.5"
	"sway_move_back_translate_x"  					"0.2"
	"sway_move_back_translate_z"  					"-0.2"
	"sway_move_left_translate_y"  					"-1"
	"sway_move_left_translate_z"  					"-0.5"
	"sway_move_left_rotate_roll"  					"-4"
	"sway_move_right_translate_y" 					"1"
	"sway_move_right_translate_z" 					"-0.5"
	"sway_move_right_rotate_roll" 					"4"
	"sway_move_up_translate_z"						"-1"
	"sway_move_down_translate_z"  					"1"
	"sway_turn_left_rotate_yaw"   					"-2.5"
	"sway_turn_right_rotate_yaw"  					"2.5"

	"sway_turn_left_translate_y"  					".5"
	"sway_turn_right_translate_y"  					"-.5"
	"sway_turn_up_translate_z"  					".2"
	"sway_turn_down_translate_z"  					"-.2"
	"sway_turn_up_translate_x"  					".1"
	"sway_turn_down_translate_x"  					"-.1"

	"sway_turn_left_rotate_roll"   					"4"
	"sway_turn_right_rotate_roll"  					"-4"
	"sway_turn_up_rotate_pitch"   					"3"
	"sway_turn_down_rotate_pitch" 					"-3"
	"sway_turn_up_rotate_roll"   					"-0.8"
	"sway_turn_down_rotate_roll" 					"0.8"

	// Zoomed Sway
	"sway_rotate_attach_zoomed"						"SWAY_ROTATE_ZOOMED"
	"sway_rotate_attach_blend_time_zoomed"			"0.2"
	"sway_rotate_gain_zoomed"						"5"

	"sway_min_yaw_zoomed"							"-0.04"
	"sway_max_yaw_zoomed"							"0.04"
	"sway_turn_left_rotate_yaw_zoomed"				"-0.085"
	"sway_turn_right_rotate_yaw_zoomed"				"0.085"

	"sway_min_roll_zoomed"   						"-1"
	"sway_max_roll_zoomed"   						"1"
	"sway_turn_left_rotate_roll_zoomed"   			"-1"
	"sway_turn_right_rotate_roll_zoomed"  			"1"

	"sway_move_right_rotate_roll_zoomed" 			"0.2"
	"sway_move_left_rotate_roll_zoomed"  			"-0.2"

	"sway_min_pitch_zoomed"  						"-0.03"
	"sway_max_pitch_zoomed"  						"0.03"
	"sway_turn_up_rotate_pitch_zoomed"				"0.07"
	"sway_turn_down_rotate_pitch_zoomed"			"-0.07"

	"sprintcycle_time"								"0.55"
	"deployfirst_time"								"1.0"

	// Bodygroups:
	"bodygroup1_name"	"sight_on"
	"bodygroup1_set"	"1"
	"bodygroup2_name"	"sight_acgs"
	"bodygroup2_set"	"0"
	"bodygroup3_name"	"sight_cro"
	"bodygroup3_set"	"0"
	"bodygroup4_name"	"sight_holo"
	"bodygroup4_set"	"0"
	// "bodygroup5_name"	"suppressor_cyl_med"
	// "bodygroup5_set"	"0"
	"bodygroup6_name"	"proscreen"
	"bodygroup6_set"	"0"

    "clip_bodygroup"						"hemlok_smg_magazine"
    "clip_bodygroup_index_shown"			"0"
    "clip_bodygroup_index_hidden"			"1"
    "clip_bodygroup_show_for_milestone_0"	"1"
    "clip_bodygroup_show_for_milestone_1"	"0"
    "clip_bodygroup_show_for_milestone_2"	"1"
    "clip_bodygroup_show_for_milestone_3"	"1"

	"threat_scope_enabled"			"1"
	//"anim_alt_idleAttack" "2"

	Mods
	{
		iron_sights
		{
		}
		holosight
		{
			"ui7_enable"		"1"
			"ui1_enable"		"0"
			"ui2_enable"		"0"

			"bodygroup1_set"	    "0"
			"bodygroup2_set"		"0"
			"bodygroup3_set"		"0"
			"bodygroup4_set"	    "1"
			//"anim_alt_idleAttack"   "2"

			"dof_zoom_nearDepthStart"						"6.161"
			"dof_zoom_nearDepthEnd"							"9.204"
			"viewmodel_offset_ads"							"0 -2.5 -0.48"
			dof_zoom_focusArea_horizontal					0.062
			dof_zoom_focusArea_top							0.10
			dof_zoom_focusArea_bottom						-0.040
	//"dof_nearDepthStart"							"3.857"
	//"dof_nearDepthEnd"								"7.226"
		}
		redline_sight
		{
			"ui3_enable"		"1"
			"ui1_enable"		"0"
			"ui2_enable"		"0"

			"bodygroup1_set"		"0"
			"bodygroup2_set"		"1"
			"bodygroup3_set"		"0"
			"bodygroup4_set"		"0"
			"viewmodel_offset_ads"							"0 -3.85 0.15"
			"dof_zoom_nearDepthStart"						"5.691"
			"dof_zoom_nearDepthEnd"							"6.745"

			"zoom_fov"						"25"
			dof_zoom_focusArea_horizontal					0.073
			dof_zoom_focusArea_top							0.080
			dof_zoom_focusArea_bottom						-0.041
	//"dof_nearDepthStart"							"3.857"
	//"dof_nearDepthEnd"								"7.226"
		}
		threat_scope
		{
			"ui4_enable"		"1"
			"ui1_enable"		"0"
			"ui2_enable"		"0"

			"bodygroup1_set"		"0"
			"bodygroup2_set"		"0"
			"bodygroup3_set"		"1"
			"bodygroup4_set"		"0"

			"viewmodel_offset_ads"							"0 -5 0.11"
			"dof_zoom_nearDepthStart"						"5.040"
			"dof_zoom_nearDepthEnd"							"5.737"

			"threat_scope_enabled"			"1"
			"threat_scope_bounds_tagname1"	"SCR_TR_CRO"
			"threat_scope_bounds_tagname2"	"SCR_BL_CRO"
			dof_zoom_focusArea_horizontal					0.068
			dof_zoom_focusArea_top							0.065
			dof_zoom_focusArea_bottom						-0.046
	//"dof_nearDepthStart"							"3.857"
	//"dof_nearDepthEnd"								"7.226"
		}
		smart_lock
		{
		}
		pro_screen
		{
			"ui8_enable"		"1"
			"bodygroup6_set"	"1"
		}
		tactical_cdr_on_kill
		{

		}
		pas_fast_reload
		{
			"reload_time"								"*0.7"
			"reload_time_late1"							"*0.7"
			"reloadempty_time"							"*0.7"
			"reloadempty_time_late1"					"*0.7"
		}
		extended_ammo
		{
			"ammo_stockpile_max"						"600"
			"ammo_clip_size"   							"40"
			"ammo_default_total"						"600"
		}
		pas_fast_ads
		{
			//Fast ADS
			"zoom_time_in"									"*0.5"
			"zoom_time_out"   								"*0.6"
		}
		pas_fast_swap
		{
			//Fast Swap
			"fast_swap_to"									"1"
		}
		pas_run_and_gun
		{
			"primary_fire_does_not_block_sprint"			"1"
			"crosshair_force_sprint_fade_disabled"          "1"
		}
		burn_mod_hemlok_smg
		{
			"tracer_effect_first_person"                "P_wpn_tracer_pulse_BC"
			"tracer_effect"   							"P_wpn_tracer_pulse_BC"

			"is_burn_mod"								"1"

			"damage_near_value"   							"++10"
			"damage_far_value"								"++3"
			"damage_very_far_value"							"++3"
			"damage_near_value_titanarmor"					"190"
			"damage_far_value_titanarmor" 					"160"
		}

		sp_s2s_settings_npc
		{
			"npc_max_range"   								"8000"
			"npc_max_engage_range"							"8000"
			"npc_max_engage_range_heavy_armor"				"8000"
		}
	}

	"ui1_enable"		"1"
	"ui1_draw_cloaked"	"1"
	UiData1
	{
		"ui"								"ui/volt_sights"
		"mesh"						"models/weapons/attachments/volt_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui2_enable"		"1"
	UiData2
	{
		"ui"								"ui/volt_ammo_counter"
		"mesh"						"models/weapons/attachments/volt_rui_lower"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui3_enable"		"0"
	"ui3_draw_cloaked"	"1"
	UiData3
	{
		"ui"								"ui/acgs_redline"
		"mesh"							"models/weapons/attachments/acgs_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize						weapon_clipSize
		}
	}

	"ui4_enable"		"0"
	"ui4_draw_cloaked"	"1"
	UiData4
	{
		"ui"								"ui/cro_threat_front"
		"mesh"						"models/weapons/attachments/cro_rui_upper"
		Args
		{
			zoomFrac					player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui7_enable"		"0"
	"ui7_draw_cloaked"	"1"
	UiData7
	{
		"ui"							"ui/holo_scope"
		"mesh"					"models/weapons/attachments/holo_rui_upper"
		Args
		{
			vis					player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
			clipCount					weapon_stockpileClipCount
		}
	}

	"ui8_enable"		"0"
	UiData8
	{
		"ui"									"ui/pro_screen_panel"
		"mesh"							"models/weapons/attachments/pro_screen_rui_upper"
		Args
		{
			proValue							proscreen_int0
			proOwnedByPlayer			proscreen_owner_is_player
		}
	}


	active_crosshair_count				"1"
	rui_crosshair_index					"0"

	RUI_CrosshairData
	{
		DefaultArgs
		{
			adjustedSpread				weapon_spread
			adsFrac 					player_zoomFrac
			isSprinting					player_is_sprinting
			isReloading					weapon_is_reloading
			teamColor					crosshair_team_color
			isAmped						weapon_is_amped
		    crosshairMovementX          crosshair_movement_x
		    crosshairMovementY          crosshair_movement_y
		}

		Crosshair_1
		{
			"ui"						"ui/crosshair_wingman_n"
			"base_spread"				"2.0"
			Args
			{
				isFiring				weapon_is_firing
			}
		}
	}
}
WeaponData
{
	// General
	"printname"   									"#WPN_LMG"
	"shortprintname"								"#WPN_LMG_SHORT"
	"description" 									"#WPN_LMG_DESC"
	"longdesc"										"#WPN_LMG_LONGDESC"

	"menu_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_spitfire"
	"hud_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_spitfire"

	"weaponClass" 									"human"
	"weaponSubClass" 								"lmg"
	"body_type"										"heavy"
	"fire_mode"   									"auto"
	"pickup_hold_prompt"  							"Hold [USE] [WEAPONNAME]"
	"pickup_press_prompt" 							"[USE] [WEAPONNAME]"
	"minimap_reveal_distance"						"32000"
	"leveled_pickup"								"1"

	"damage_flags"									"DF_BULLET | DF_INSTANT | DF_DISMEMBERMENT"
	"OnWeaponActivate"								"OnWeaponActivate_lmg"
	"OnWeaponPrimaryAttack"							"OnWeaponPrimaryAttack_lmg"
	"OnWeaponBulletHit"								"OnWeaponBulletHit_weapon_lmg"

	// Menu
	"menu_category"                                 "lmg"
	"menu_anim_class"                               "large"
	"stat_damage" 									"50"
	"stat_range"  									"75"
	"stat_accuracy"   								"39"
	"stat_rof"										"47"

	dof_zoom_focusArea_horizontal					0.023
	dof_zoom_focusArea_top							0.052
	dof_zoom_focusArea_bottom						-0.018

	"pass_through_depth"							"32"
	"pass_through_damage_preserved_scale"			"0.5"

	// Models
	"viewmodel"   									"models/weapons/lmg_hemlok/ptpov_lmg_hemlok.mdl"
	"playermodel" 									"models/weapons/lmg_hemlok/w_lmg_hemlok.mdl"

	// Effects
	"vortex_absorb_effect"							"wpn_vortex_projectile_rifle_FP"
	"vortex_absorb_effect_third_person"				"wpn_vortex_projectile_rifle"
	"vortex_absorb_sound"							"Vortex_Shield_AbsorbBulletSmall"
	"vortex_absorb_sound_1P_VS_3P"					"Vortex_Shield_AbsorbBulletSmall_1P_VS_3P"
	"projectile_adjust_to_gun_barrel"				"1"
	"tracer_effect_first_person"                    "P_wpn_tracer"
	"tracer_effect"   								"P_wpn_tracer"

	"burst_or_looping_fire_sound_start_1p"			"Weapon_LMG_FirstShot_1P"
	"burst_or_looping_fire_sound_middle_1p"			"Weapon_LMG_Loop_1P"
	"burst_or_looping_fire_sound_end_1p"			"Weapon_LMG_LoopEnd_1P"

	"burst_or_looping_fire_sound_start_3p"			""
	"burst_or_looping_fire_sound_middle_3p"			"Weapon_LMG_Loop_3P"
	"burst_or_looping_fire_sound_end_3p"			""

	"burst_or_looping_fire_sound_start_npc"			""
	"burst_or_looping_fire_sound_middle_npc"		"Weapon_LMG_Loop_3P_NPC_A"
	"burst_or_looping_fire_sound_end_npc"			""

	"low_ammo_sound_name_1"							"lmg_LowAmmo_Shot1"

	"sound_dryfire"									"hemlok_dryfire"
	"sound_pickup"									"wpn_pickup_MG_1P"
	"sound_trigger_pull"							"Weapon_LMG_Trigger"

	"fx_shell_eject_view"							"wpn_shelleject_rifle_assault_FP"
	"fx_shell_eject_world"							"wpn_shelleject_rifle_assault"
	"fx_shell_eject_attach"							"shell"

	"fx_muzzle_flash_view"							"wpn_muzzleflash_lmg_FP"
	"fx_muzzle_flash_world"							"wpn_muzzleflash_lmg"
	"fx_muzzle_flash_attach"						"muzzle_flash"

	"looping_sounds"								"1"

	//Sounds
	"fire_sound_1_player_1p"						"LMG_shell"
	"fire_sound_1_player_3p"						"LMG_shell"
	"fire_sound_2_player_1p"						"Weapon_LMG_SecondShot_1P"
	"fire_sound_2_player_3p"						"Weapon_LMG_SecondShot_3P"
	"fire_sound_2_npc"								"Weapon_LMG_SecondShot_npc"
	"sound_zoom_in"									"Weapon_LMG_ADS_In"
	"sound_zoom_out"								"Weapon_LMG_ADS_Out"

	// Network
	"net_optimize"		                            "1"

	"damage_type" 									"bullet"

	"critical_hit_damage_scale"						"1"

	// Ammo
	"ammo_clip_size"   								"80"
	"ammo_clip_random_loss_on_npc_drop"				"0.6"

   "titanarmor_critical_hit_required"              "1"
	"critical_hit"									"1"


	MP_BASE
	{
		"viewmodel_offset_hip" 						"-6.5 1 -10"
		"ammo_default_total"							"800"
		"ammo_stockpile_max"							"800"
		"ammo_no_remove_from_stockpile"					"1"
		"ammo_min_to_fire"								"1"

		"aimassist_adspull_weaponclass"					"precise"

		"damage_near_value"   							"35"
		"damage_far_value"								"25"
		"damage_very_far_value"							"20"
		"damage_near_value_titanarmor"					"80"
		"damage_far_value_titanarmor" 					"60"
		"damage_rodeo" 									"200"
		"damage_near_distance"							"1800"
		"damage_far_distance" 							"2000"
		"damage_very_far_distance" 						"3000"

		"damage_headshot_scale"							"1.5"

		"red_crosshair_range" 							"1800"

		// Damage - When Used by NPCs
		"npc_damage_near_value"   						"15"
		"npc_damage_far_value"							"11"
		"npc_damage_near_value_titanarmor"				"0"
		"npc_damage_far_value_titanarmor" 				"0"
		"npc_damage_near_distance"						"<KEEP_DEFAULT>"
		"npc_damage_far_distance" 						"<KEEP_DEFAULT>"

		"enable_highlight_networking_on_creation"		"<KEEP_DEFAULT>"

		"viewkick_air_scale_ads"						"3.0"
		"spread_air_hip"  								"5.0"

		//NPC
		"npc_max_range"   								"2500"
		"npc_min_engage_range"							"0"
		"npc_max_engage_range"							"2500"
		"npc_min_engage_range_heavy_armor"				"500"
		"npc_max_engage_range_heavy_armor"				"2500"

		"npc_min_burst"   								"3"
		"npc_max_burst"   								"6"
		"npc_rest_time_between_bursts_min"				"1.0"
		"npc_rest_time_between_bursts_max"				"1.5"

		"proficiency_poor_spreadscale"					"7.0"
		"proficiency_average_spreadscale" 				"2.5"
		"proficiency_good_spreadscale"					"4.0"
		"proficiency_very_good_spreadscale"   			"2.5"
		"proficiency_perfect_spreadscale"   			"<KEEP_DEFAULT>"

		"damage_heavyarmor_nontitan_scale"				"0.35"
		"red_crosshair_range" 							"1"

		"smart_ammo_search_distance"  					"10000000"
		"smart_ammo_max_targeted_burst"					"12"
		"smart_ammo_targeting_time_min"					"0.00"
		"smart_ammo_targeting_time_max"					"0.00"
		"smart_ammo_targeting_time_min_npc"				"0.1"
		"smart_ammo_targeting_time_max_npc"				"0.1"
	}

	SP_BASE
	{
		"ammo_default_total"							"160"
		"ammo_stockpile_max"							"240"
		"ammo_no_remove_from_stockpile"					"0"
		"ammo_min_to_fire"								"1"

		"aimassist_adspull_weaponclass"					"precise_sp"

		"damage_near_value"   							"25"
		"damage_far_value"								"18"
		"damage_very_far_value"							"18"
		"damage_near_value_titanarmor"					"40"
		"damage_far_value_titanarmor" 					"25"
		"damage_rodeo" 									"200"
		"damage_near_distance"							"1800"
		"damage_far_distance" 							"2000"
		"damage_very_far_distance" 						"2000"
		"damage_headshot_scale"							"3"

		"red_crosshair_range" 							"1800"

		// Damage - When Used by NPCs
		"npc_damage_near_value"   						"12"
		"npc_damage_far_value"							"8"
		"npc_damage_near_value_titanarmor"				"20"
		"npc_damage_far_value_titanarmor" 				"12"
		"npc_damage_near_distance"						"1000"
		"npc_damage_far_distance" 						"2000"


		"enable_highlight_networking_on_creation"		"1"

		"viewkick_air_scale_ads"						"1"
		"spread_air_hip"  								"0"

		//NPC
		"npc_max_range"   								"4000"
		"npc_min_engage_range"							"0"
		"npc_max_engage_range"							"2500"
		"npc_min_engage_range_heavy_armor"				"500"
		"npc_max_engage_range_heavy_armor"				"3000"

		"npc_min_burst"   								"5"
		"npc_max_burst"   								"10"
		"npc_rest_time_between_bursts_min"				"1.0"
		"npc_rest_time_between_bursts_max"				"1.5"

		"proficiency_poor_spreadscale"					"7.0"
		"proficiency_average_spreadscale" 				"5.0"
		"proficiency_good_spreadscale"					"4.0"
		"proficiency_very_good_spreadscale"   			"2.5"
		"proficiency_perfect_spreadscale"   			"2"

		"damage_heavyarmor_nontitan_scale"				"1"
	}

	"viewmodel_offset_ads"							"0 0 0"
	"dof_zoom_nearDepthStart"						"5.040"
	"dof_zoom_nearDepthEnd"							"8.000"
	"dof_nearDepthStart"							"1.000"
	"dof_nearDepthEnd"								"6.000"

	// Behavior
	"fire_rate"   									"9.0"
	"zoom_time_in"									"0.1"
	"smart_ammo_allow_search_while_firing"			"1"
	"smart_ammo_allow_ads_lock"						"1" // "0" is default
	"zoom_time_out"   								"0.1"
	"zoom_fov"										"30"
	"reload_time" 									"2.8"
	"reload_time_late1"								"1.8"
	"reloadempty_time"								"3.33"
	"reloadempty_time_late1"						"2.33"
	"reloadempty_time_late2"						"1.23"
	"holster_time"									"0.6"
	"deploy_time" 									"0.9"
	"lower_time"  									"0.2"
	"raise_time"  									"0.3"
	"vortex_refire_behavior"  						"bullet"
	"allow_empty_fire"								"0"
	"reload_enabled"  								"1"
	"allow_empty_click"   							"1"
	"empty_reload_only"   							"0"
	"trigger_snipercam"   							"0"
	"allow_headshots" 								"1"
	"headshot_distance" 							"1800"
	"ads_move_speed_scale"							"0.35"
	"aimassist_disable_hipfire"						"0"
	"aimassist_disable_ads"							"0"
	"aimassist_disable_hipfire_titansonly"			"0"
	"aimassist_disable_ads_titansonly"				"0"
	"aimassist_adspull_zoomStart"					"0.2"
	"aimassist_adspull_zoomEnd"						"0.6"
	"smart_ammo_allow_search_while_firing"			"1"
	"smart_ammo_allow_ads_lock"						"1" // "0" is default
	"smart_ammo_search_angle" 						"360"
	"smart_ammo_search_npcs"						"0"
	"smart_ammo_search_players"						"1"
	"smart_ammo_search_projectiles"					"0"
	"smart_ammo_titans_block_los"					"1"
	"smart_ammo_track_cloaked_targets"				"1"
	"smart_ammo_targeting_time_modifier_projectile_owner"	"0.00"
	"smart_ammo_target_max_locks_normal"			"10"	// divide health by damage near
	"smart_ammo_target_npc_lock_factor"				"10"		// smart pistol does head shots at 2x damage
	"smart_ammo_new_target_delay"					"0.1"
	"smart_ammo_draw_acquisition_lines"				"0"
	"smart_ammo_hud_lock_style"						"pilot_pistol"
	"smart_ammo_hud_type" 							"smart_pistol"
	"smart_ammo_target_confirmed_sound"				"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_target_confirming_sound"			"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_looping_sound_acquiring"			"Weapon_SmartPistol_TargetLockingLoop"
	"smart_ammo_lock_type"							"small"
	"smart_ammo_alert_npc_fraction"					"0.1" 	// unaware since lock on fraction will not go above 1
	"smart_ammo_allow_hip_fire_lock"				"1"
	"smart_ammo_lock_effect_3p"						"P_smartpistol_lockon"
	"smart_ammo_lock_effect_attachment"				"muzzle_flash"
	"smart_ammo_player_targets_must_be_tracked"		"0"
	"smart_ammo_npc_targets_must_be_tracked"		"0"
	"smart_ammo_tracker_status_effects"				"0"
	"smart_ammo_tracked_targets_check_visibility"	"0"
	"threat_scope_enabled"			"1"

	"ads_fov_zoomfrac_start"						"0.2"
	"ads_fov_zoomfrac_end"							"1.0"

	"sprint_fractional_anims"						"0"

	// Spread
	"spread_stand_hip"								"1.5"
	"spread_stand_hip_run"							"1.5"
	"spread_stand_hip_sprint"                       "1.5"
	"spread_crouch_hip"   							"1.5"
	"spread_stand_ads"  							"0.0" //"0.25"
	"spread_crouch_ads"  							"0.0" //"0.2"
	"spread_air_ads"								"0.0"

	"spread_kick_on_fire_stand_hip"   				"1.5"
	"spread_kick_on_fire_crouch_hip"  				"1.5"
	"spread_kick_on_fire_air_hip" 					"1.5"
	"spread_kick_on_fire_stand_ads"   				"0.0"
	"spread_kick_on_fire_crouch_ads"  				"0.0"
	"spread_kick_on_fire_air_ads" 					"0.0"

	"spread_max_kick_stand_hip"   					"7.0"
	"spread_max_kick_crouch_hip"  					"7.0"
	"spread_max_kick_air_hip" 						"8.0"
	"spread_max_kick_stand_ads"   					"0.0"
	"spread_max_kick_crouch_ads"  					"0.0"
	"spread_max_kick_air_ads" 						"0.0"

	"spread_decay_rate"   							"15"
	"spread_decay_delay"  							".2"

	"ammo_suck_behavior"							"primary_weapons"

	// View Kick
	"viewkick_spring" 								"lmg"

	"viewkick_pitch_base" 							"-1"
	"viewkick_pitch_random"   						"0.65"
	"viewkick_pitch_softScale"						"1"
	"viewkick_pitch_hardScale"						"0.2"

	"viewkick_yaw_base"   							"0"
	"viewkick_yaw_random" 							"0.92"
	"viewkick_yaw_softScale"						"1"
	"viewkick_yaw_hardScale"						"0.5"

	"viewkick_roll_base"  							"0"
	"viewkick_roll_randomMin" 						"0.5"
	"viewkick_roll_randomMax" 						"0.55"
	"viewkick_roll_softScale" 						"0.2"
	"viewkick_roll_hardScale" 						"2.1"

	"viewkick_hipfire_weaponFraction" 				"0.0"
	"viewkick_hipfire_weaponFraction_vmScale" 		"1.0"
	"viewkick_ads_weaponFraction" 					"0.05"
	"viewkick_ads_weaponFraction_vmScale" 			"1.0"

	"viewkick_scale_firstshot_ads"					"0"
	"viewkick_scale_firstshot_hipfire"				"0"
	"viewkick_scale_min_hipfire"  					"1"
	"viewkick_scale_max_hipfire"  					"1"
	"viewkick_scale_min_ads"  						"0.3"
	"viewkick_scale_max_ads"  						"1.5"
	"viewkick_scale_valuePerShot" 					"0.3"
	"viewkick_scale_valueLerpStart"   				"0"
	"viewkick_scale_valueLerpEnd" 					"10"
	"viewkick_scale_valueDecayDelay"  				"0.22"
	"viewkick_scale_valueDecayRate"   				"30"

	"viewkick_perm_pitch_base"						"0.0"
	"viewkick_perm_pitch_random"  				 	"0.0"
	"viewkick_perm_yaw_base"						"0.0"
	"viewkick_perm_yaw_random"						"0"
	"viewkick_perm_yaw_random_innerexclude"			"0"

	"viewkick_duck_scale"							"0.8"

	//
	"viewmodel_shake_forward"						"0.25"
	"viewmodel_shake_up"							"0.0"
	"viewmodel_shake_right"							"0.0"


	// Bob
	"bob_cycle_time"  								"0.4"
	"bob_vert_dist"   								"0.19"
	"bob_horz_dist"   								"0.1"
	"bob_max_speed"   								"150"
	"bob_pitch"   									"0.75"
	"bob_yaw" 										"-1.7"
	"bob_roll"										"1.2"

	// Bob_Zoomed
	"bob_cycle_time_zoomed"  						"0.4"
	"bob_vert_dist_zoomed"   						"0.01"
	"bob_horz_dist_zoomed"   						"0.01"
	"bob_max_speed_zoomed"   						"150"
	//"bob_pitch_zoomed"   							"0.002"
	//"bob_yaw_zoomed" 								"-.002"
	//"bob_roll_zoomed"								".002"


	// Rumble
	"fire_rumble"									"rumble_lmg"

	// Sway
	"sway_rotate_attach"  							"SWAY_ROTATE"
	"sway_min_x"  									"-0.5"
	"sway_min_y"  									"-0.5"
	"sway_min_z"  									"-0.6"
	"sway_max_x"  									"0.5"
	"sway_max_y"  									"0.5"
	"sway_max_z"  									"0.6"
	"sway_min_pitch"  								"-3"
	"sway_min_yaw"									"-2.5"
	"sway_min_roll"   								"-4"
	"sway_max_pitch"  								"3"
	"sway_max_yaw"									"2.5"
	"sway_max_roll"   								"4"
	"sway_translate_gain" 							"2.5"
	"sway_rotate_gain"								"7"
	"sway_move_forward_translate_x"   				"-0.1"
	"sway_move_forward_translate_z"   				"-0.5"
	"sway_move_back_translate_x"  					"0.2"
	"sway_move_back_translate_z"  					"-0.2"
	"sway_move_left_translate_y"  					"-1"
	"sway_move_left_translate_z"  					"-0.5"
	"sway_move_left_rotate_roll"  					"-4"
	"sway_move_right_translate_y" 					"1"
	"sway_move_right_translate_z" 					"-0.5"
	"sway_move_right_rotate_roll" 					"4"
	"sway_move_up_translate_z"						"-1"
	"sway_move_down_translate_z"  					"1"
	"sway_turn_left_rotate_yaw"   					"-2.5"
	"sway_turn_right_rotate_yaw"  					"2.5"

	"sway_turn_left_translate_y"  					".5"
	"sway_turn_right_translate_y"  					"-.5"
	"sway_turn_up_translate_z"  					".2"
	"sway_turn_down_translate_z"  					"-.2"
	"sway_turn_up_translate_x"  					".1"
	"sway_turn_down_translate_x"  					"-.1"

	"sway_turn_left_rotate_roll"   					"4"
	"sway_turn_right_rotate_roll"  					"-4"
	"sway_turn_up_rotate_pitch"   					"3"
	"sway_turn_down_rotate_pitch" 					"-3"
	"sway_turn_up_rotate_roll"   					"-0.8"
	"sway_turn_down_rotate_roll" 					"0.8"

	// Zoomed Sway
	"sway_rotate_attach_zoomed"						"SWAY_ROTATE_ZOOMED"
	"sway_rotate_attach_blend_time_zoomed"			"0.2"
	"sway_rotate_gain_zoomed"						"5"

	"sway_min_yaw_zoomed"							"-0.04"
	"sway_max_yaw_zoomed"							"0.04"
	"sway_turn_left_rotate_yaw_zoomed"				"-0.085"
	"sway_turn_right_rotate_yaw_zoomed"				"0.085"

	"sway_min_roll_zoomed"   						"-1"
	"sway_max_roll_zoomed"   						"1"
	"sway_turn_left_rotate_roll_zoomed"   			"-1"
	"sway_turn_right_rotate_roll_zoomed"  			"1"

	"sway_move_right_rotate_roll_zoomed" 			"0.2"
	"sway_move_left_rotate_roll_zoomed"  			"-0.2"

	"sway_min_pitch_zoomed"  						"-0.03"
	"sway_max_pitch_zoomed"  						"0.03"
	"sway_turn_up_rotate_pitch_zoomed"				"0.07"
	"sway_turn_down_rotate_pitch_zoomed"			"-0.07"

	// WeaponED Unhandled Key/Values and custom script Key/Values
	"deployfirst_time"								"1.25"
	"sprintcycle_time"								"0.55"

	// Bodygroups:
	"bodygroup1_name"	"sight_on"
	"bodygroup1_set"	"1"
	"bodygroup2_name"	"sight_aog"
	"bodygroup2_set"	"0"
	"bodygroup3_name"	"sight_cro"
	"bodygroup3_set"	"0"
	"bodygroup4_name"	"sight_acgs"
	"bodygroup4_set"	"0"
	"bodygroup5_name"	"sight_holo"
	"bodygroup5_set"	"0"
	"bodygroup6_name"	"proscreen"
	"bodygroup6_set"	"0"


	"anim_alt_idleAttack"	"0"

	"clip_bodygroup"						"lmg_hemlok_magazine"
    "clip_bodygroup_index_shown"			"0"
    "clip_bodygroup_index_hidden"			"1"
    "clip_bodygroup_show_for_milestone_0"	"1"
    "clip_bodygroup_show_for_milestone_1"	"0"
    "clip_bodygroup_show_for_milestone_2"	"1"
    "clip_bodygroup_show_for_milestone_3"	"1"

	Mods
	{
		iron_sights
		{
		}
		aog
		{
			"ui1_enable"		"0"
			"ui2_enable"		"0"
			"ui5_enable"		"1"
			"ui6_enable"		"1"

			"bodygroup1_set"		"0"
			"bodygroup2_set"		"1"
			"bodygroup3_set"		"0"
			"bodygroup4_set"		"0"
			//"anim_alt_idleAttack"	"3"

			"viewmodel_offset_ads"							"0 0.78 -.195"

			"dof_zoom_nearDepthStart"						"5.000"
			"dof_zoom_nearDepthEnd"							"7.500"
			dof_zoom_focusArea_horizontal					0.055
			dof_zoom_focusArea_top							0.102
			dof_zoom_focusArea_bottom						-0.053
			zoom_fov		20
		}
		holosight
		{
			"bodygroup1_set"	    "0"
			"bodygroup2_set"	    "0"
			"bodygroup3_set"	    "0"
			"bodygroup4_set"	    "0"
			"bodygroup5_set"	    "1"
			//"anim_alt_idleAttack"   "2"
			"zoom_fov"			    "38"
			"ui1_enable"		"0"
			"ui2_enable"		"0"

			"dof_zoom_nearDepthStart"						"5.000"
			"dof_zoom_nearDepthEnd"							"11.000"
			"viewmodel_offset_ads"							"0 0 -.53"
			"ui7_enable"		"1"
			dof_zoom_focusArea_horizontal					0.062
			dof_zoom_focusArea_top							0.10
			dof_zoom_focusArea_bottom						-0.040
		}
		redline_sight
		{
			"ui1_enable"		"0"
			"ui2_enable"		"0"
			"ui3_enable"		"1"

			"bodygroup1_set"		"0"
			"bodygroup2_set"		"0"
			"bodygroup3_set"		"0"
			"bodygroup4_set"		"1"
			"dof_zoom_nearDepthStart"						"5.691"
			"dof_zoom_nearDepthEnd"							"6.745"
			"viewmodel_offset_ads"							"0 -3.3 0.12"

			"zoom_fov"						"25"
			dof_zoom_focusArea_horizontal					0.073
			dof_zoom_focusArea_top							0.080
			dof_zoom_focusArea_bottom						-0.041
		}
		threat_scope
		{
			"bodygroup1_set"		"0"
			"bodygroup2_set"		"0"
			"bodygroup3_set"		"1"
			"bodygroup4_set"		"0"

			"ui1_enable"		"0"
			"ui2_enable"		"0"
			"ui4_enable"		"1"

			"dof_zoom_nearDepthStart"						"5.000"
			"dof_zoom_nearDepthEnd"							"7.000"
			"viewmodel_offset_ads"							"0 -3.7 0.1"

			"threat_scope_enabled"			"1"
			"threat_scope_bounds_tagname1"	"SCR_TR_CRO"
			"threat_scope_bounds_tagname2"	"SCR_BL_CRO"
		}
		pro_screen
		{
			"ui8_enable"		"1"
			"bodygroup6_set"	"1"
		}
        slammer
        {
        }
		extended_ammo
		{
			"ammo_clip_size"   					"96"
		}
		pas_fast_reload
		{
			"reload_time"								"*0.7"
			"reload_time_late1"							"*0.7"
			"reloadempty_time"							"*0.7"
			"reloadempty_time_late1"					"*0.7"
		}
		pas_fast_ads
		{
			//Fast ADS
			"zoom_time_in"									"*0.5"
			"zoom_time_out"   								"*0.6"
		}
		pas_fast_swap
		{
			//Fast Swap
			"fast_swap_to"									"1"
		}
		tactical_cdr_on_kill
		{

		}
		pas_run_and_gun
		{
			"primary_fire_does_not_block_sprint"			"1"
			"crosshair_force_sprint_fade_disabled"          "1"
		}
		burn_mod_lmg
		{
			"is_burn_mod"								"1"

			"damage_near_value"   							"++10"
			"damage_far_value"								"++10"
			"damage_very_far_value"							"++5"
			"damage_near_value_titanarmor"					"180"
			"damage_far_value_titanarmor" 					"160"
			"tracer_effect_first_person"                    "P_wpn_tracer_BC"
			"tracer_effect"   								"P_wpn_tracer_BC"

			"damage_flags"									"DF_BULLET | DF_INSTANT | DF_DISMEMBERMENT | DF_GIB"
			"impulse_force"									"500"
		}
	}


	"ui1_enable"		"1"
	"ui1_draw_cloaked"	"1"
	UiData1
	{
		"ui"								"ui/spitfire_crosshair"
		"mesh"							"models/weapons/attachments/spitfire_rui_upper"
		Args
		{
			vis							player_zoomfrac
		}
	}

	"ui2_enable"		"1"
	UiData2
	{
		"ui"								"ui/spitfire_ammo_counter"
		"mesh"							"models/weapons/attachments/spitfire_rui_lower"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize						weapon_clipSize
			clipCount					weapon_stockpileClipCount
		}
	}

	"ui3_enable"		"0"
	"ui3_draw_cloaked"	"1"
	UiData3
	{
		"ui"								"ui/acgs_redline"
		"mesh"							"models/weapons/attachments/acgs_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui4_enable"		"0"
	"ui4_draw_cloaked"	"1"
	UiData4
	{
		"ui"							"ui/cro_threat_front"
		"mesh"							"models/weapons/attachments/cro_rui_upper"
		Args
		{
			zoomFrac					player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui5_enable"		"0"
	"ui5_draw_cloaked"	"1"
	UiData5
	{
		"ui"							"ui/aog_multi_reticles"
		"mesh"					"models/weapons/attachments/aog_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui6_enable"		"0"
	"ui6_draw_cloaked"	"1"
	UiData6
	{
		"ui"							"ui/aog_ammo_counter"
		"mesh"					"models/weapons/attachments/aog_rui_lower"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui7_enable"		"0"
	"ui7_draw_cloaked"	"1"
	UiData7
	{
		"ui"							"ui/holo_scope"
		"mesh"					"models/weapons/attachments/holo_rui_upper"
		Args
		{
			vis					player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
			clipCount					weapon_stockpileClipCount
		}
	}

	"ui8_enable"		"0"
	UiData8
	{
		"ui"									"ui/pro_screen_panel"
		"mesh"							"models/weapons/attachments/pro_screen_rui_upper"
		Args
		{
			proValue							proscreen_int0
			proOwnedByPlayer			proscreen_owner_is_player
		}
	}

	active_crosshair_count				"1"
	rui_crosshair_index					"0"

	RUI_CrosshairData
	{
		DefaultArgs
		{
			adjustedSpread				weapon_spread
			adsFrac 					player_zoomFrac
			isSprinting					player_is_sprinting
			isReloading					weapon_is_reloading
			teamColor					crosshair_team_color
			isAmped						weapon_is_amped
		    crosshairMovementX          crosshair_movement_x
		    crosshairMovementY          crosshair_movement_y
		}

		Crosshair_1
		{
			"ui"						"ui/crosshair_plus"
			"base_spread"				"0.0"
			Args
			{
				isFiring				weapon_is_firing
			}
		}
	}
}
WeaponData
{
	// General
	"printname"   									"#WPN_ALTERNATOR_SMG"
	"shortprintname"   								"#WPN_ALTERNATOR_SMG_SHORT"
	"description" 									"#WPN_ALTERNATOR_SMG_DESC"
	"longdesc"										"#WPN_ALTERNATOR_SMG_LONGDESC"

	"menu_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_alternator"
	"hud_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_alternator"

	"weaponClass" 									"human"
	"body_type"										"light"
	"fire_mode"   									"auto"
	"pickup_hold_prompt"  							"Hold [USE] [WEAPONNAME]"
	"pickup_press_prompt" 							"[USE] [WEAPONNAME]"
	"minimap_reveal_distance"						"32000"
	"leveled_pickup"								"1"
	"weaponSubClass"								"smg"

	"damage_flags"									"DF_BULLET | DF_INSTANT | DF_DISMEMBERMENT"

	"OnWeaponPrimaryAttack"							"OnWeaponPrimaryAttack_alternator_smg"
	"OnWeaponNpcPrimaryAttack"						"OnWeaponNpcPrimaryAttack_alternator_smg"
	"OnClientAnimEvent"								"OnClientAnimEvent_alternator_smg"

	// Menu
	"menu_category"                                 "smg"
	"menu_anim_class"                               "small"
	"stat_damage" 									"75"
	"stat_range"  									"40"
	"stat_accuracy"   								"50"
	"stat_rof"										"60"

	// Models
	"viewmodel"   									"models/weapons/alternator_smg/ptpov_alternator_smg.mdl"
	"playermodel" 									"models/weapons/alternator_smg/w_alternator_smg.mdl"
	"holstermodel"									"models/weapons/alternator_smg/w_alternator_smg_stow.mdl"
	"holster_type"									"rifle"

	
	// Effects
	"bounce_effect_table"							"pulse_blade"
	"impact_effect_table" 							"pulse_blade"
	//"impact_effect_table" 							"pulse_bullet"
	"tracer_effect_first_person"                "P_wpn_tracer_pulse_BC"
	"tracer_effect"   							"P_wpn_tracer_pulse_BC"
	"vortex_absorb_effect"							"wpn_vortex_projectile_rifle_FP"
	"vortex_absorb_effect_third_person"				"wpn_vortex_projectile_rifle"
	"vortex_absorb_sound"							"Vortex_Shield_AbsorbBulletSmall"
	"vortex_absorb_sound_1P_VS_3P"					"Vortex_Shield_AbsorbBulletSmall_1P_VS_3P"
	"projectile_adjust_to_gun_barrel"				"1"

	"sound_dryfire"									"hemlok_dryfire"
	"sound_pickup"									"wpn_pickup_SMG_1P"
	"sound_trigger_pull"							"Weapon_Hemlok_Trigger"
	"sound_zoom_in"									"Weapon_Hemlok_ADS_In"
	"sound_zoom_out"								"Weapon_Hemlok_ADS_Out"

	"fx_shell_eject_view"							"wpn_shelleject_rifle_assault_FP"
	"fx_shell_eject_world"							"wpn_shelleject_rifle_assault"
	"fx_shell_eject_attach"							"shell"

	"fx_muzzle_flash_view"							"wpn_muzzleflash_pulse_FP"
	"fx_muzzle_flash_world"							"wpn_muzzleflash_pulse"
	"fx_muzzle_flash_attach"						"muzzle_flash"


	// Muzzleflash stuff

	"fx_shell_eject_view"							"wpn_shelleject_pistol_FP"
	"fx_shell_eject_world"							"wpn_shelleject_pistol"
	"fx_shell_eject_attach"							"shell"

	"fx_shell_eject2_view"							"wpn_shelleject_pistol_FP"
	"fx_shell_eject2_world"							"wpn_shelleject_pistol"
	"fx_shell_eject2_attach"						"shell_l"

	"fx_muzzle_flash_view"							"P_wpn_muzzleflash_alternator_FP"
	"fx_muzzle_flash_world"							"P_wpn_muzzleflash_alternator"
	"fx_muzzle_flash_attach"						"muzzle_flash"

	"fx_muzzle_flash2_view"							"P_wpn_muzzleflash_alternator_FP"
	"fx_muzzle_flash2_world"						"P_wpn_muzzleflash_alternator"
	"fx_muzzle_flash2_attach"						"muzzle_flash_l"


	// Sound
	"looping_sounds"								"1"

	"fire_sound_1_player_1p"						"Weapon_bulletCasings.Bounce"
	"fire_sound_1_player_3p"						"Weapon_bulletCasings.Bounce"

	"fire_sound_2_player_1p"						"Weapon_HemlokSMG_Single_1P"
	"fire_sound_2_player_3p"						"Weapon_HemlokSMG_Single_3P"
	"fire_sound_2_npc"								"Weapon_HemlokSMG_Single_npc"

	"burst_or_looping_fire_sound_start_1p"			"Weapon_HemlokSMG_Fire_First_1P"
	"burst_or_looping_fire_sound_middle_1p"			"Weapon_HemlokSMG_Fire_Loop_1P"
	"burst_or_looping_fire_sound_end_1p"			"Weapon_HemlokSMG_Fire_Last_1P"

	"burst_or_looping_fire_sound_start_3p"			""
	"burst_or_looping_fire_sound_middle_3p"			"Weapon_HemlokSMG_Fire_Loop_3P"
	"burst_or_looping_fire_sound_end_3p"			"Weapon_HemlokSMG_Fire_Last_3P"

	"burst_or_looping_fire_sound_start_npc"			""
	"burst_or_looping_fire_sound_middle_npc"		"Weapon_HemlokSMG_Fire_Loop_NPC"
	"burst_or_looping_fire_sound_end_npc"			"Weapon_HemlokSMG_Fire_Last_NPC"

	"low_ammo_sound_name_1"							"HemlokSMG_LowAmmo_Shot1"


	// Network
	"net_optimize"		                            "1"

	// Behavior
	"fire_rate"   									"10"

	"damage_type" 									"bullet"

	"critical_hit_damage_scale"						"1"

	// Ammo
	"ammo_clip_size"   								"20"
	"is_smart_pistol"								"1" 
   "titanarmor_critical_hit_required"              "1"
	"critical_hit"									"1"

		"damage_near_distance"							"1000"
		"damage_far_distance" 							"1500"
		"red_crosshair_range" 							"1000"


	MP_BASE
	{
		"ammo_default_total"							"200"
		"ammo_stockpile_max"							"200"
		"ammo_no_remove_from_stockpile"					"1"
		"ammo_min_to_fire"								"1"

		"aimassist_adspull_weaponclass"					"broad"

		// Damage - When Used by Players
		"damage_near_value"   							"35"
		"damage_far_value"								"18"
		"damage_near_value_titanarmor"					"100"
		"damage_far_value_titanarmor" 					"60"
		"damage_rodeo" 									"90"

   	 	"damage_very_far_value"							"14"
   		"damage_very_far_distance"						"3000"

		"damage_headshot_scale"							"1.5"
	"red_crosshair_range" 							"10000000"

		"smart_ammo_search_distance"  					"10000000"
		"smart_ammo_max_targeted_burst"					"12"
		"smart_ammo_targeting_time_min"					"0.00"//"0.37"
		"smart_ammo_targeting_time_max"					"0.00"//"0.65"
		"smart_ammo_targeting_time_min_npc"				"0.1"
		"smart_ammo_targeting_time_max_npc"				"0.2"

		// NPC
		"proficiency_poor_spreadscale"					"5.0"
		"proficiency_average_spreadscale" 				"3.0"
		"proficiency_good_spreadscale"					"3.0"
		"proficiency_very_good_spreadscale"   			"2.5"
		"proficiency_perfect_spreadscale" 				"1.0"

		"npc_min_engage_range"							"0"
		"npc_max_engage_range"							"750"
		"npc_min_engage_range_heavy_armor"				"500"
		"npc_max_engage_range_heavy_armor"				"1000"

		"npc_min_burst"   								"2"
		"npc_max_burst"   								"5"
		"npc_rest_time_between_bursts_min"				"0.9"
		"npc_rest_time_between_bursts_max"				"1.0"

		// Damage - When Used by NPCs
		"npc_damage_near_value"   						"10"
		"npc_damage_far_value"							"7"

		"npc_max_range"   								"2500"

		"enable_highlight_networking_on_creation"		"<KEEP_DEFAULT>"

		"damage_heavyarmor_nontitan_scale"				"0.35"

		// View Drift

		"viewdrift_ads_stand_scale_pitch" 				"0.4"
		"viewdrift_ads_stand_scale_yaw"   				"0.55"
		"viewdrift_ads_crouch_scale_pitch"  			"0.25"
		"viewdrift_ads_crouch_scale_yaw"				"0.4"
		"viewdrift_ads_air_scale_pitch"   				"0.7"
		"viewdrift_ads_air_scale_yaw" 					"0.85"
		"viewdrift_ads_speed_pitch"   					"0.65"
		"viewdrift_ads_speed_yaw" 						"0.75"

		"viewkick_air_scale_ads"						"1.5"
		"spread_air_hip"  								"1.5"
	}

	SP_BASE
	{
		"ammo_default_total"							"100"
		"ammo_stockpile_max"							"160"
		"ammo_no_remove_from_stockpile"					"0"
		"ammo_min_to_fire"								"1"

		"aimassist_adspull_weaponclass"					"precise_sp"

		// Damage - When Used by Players
		"damage_near_value"   							"27"
		"damage_far_value"								"13"
		"damage_near_value_titanarmor"					"45"
		"damage_far_value_titanarmor" 					"22"
		"damage_rodeo" 									"90"

   	 	"damage_very_far_value"							"<KEEP_DEFAULT>"
   		"damage_very_far_distance"						"<KEEP_DEFAULT>"

		"damage_headshot_scale"							"2"

		// NPC
		"proficiency_poor_spreadscale"					"5.0"
		"proficiency_average_spreadscale" 				"3.5"
		"proficiency_good_spreadscale"					"3.0"
		"proficiency_very_good_spreadscale"   			"2.5"
		"proficiency_perfect_spreadscale" 				"1.0"

		"npc_min_engage_range"							"0"
		"npc_max_engage_range"							"1100"
		"npc_min_engage_range_heavy_armor"				"500"
		"npc_max_engage_range_heavy_armor"				"2000"

		"npc_min_burst"   								"2"
		"npc_max_burst"   								"3"
		"npc_rest_time_between_bursts_min"				"0.6"
		"npc_rest_time_between_bursts_max"				"0.8"


		// Damage - When Used by NPCs
		"npc_damage_near_value"   						"13"
		"npc_damage_far_value"							"7"

		"npc_max_range"   								"4000"

		"enable_highlight_networking_on_creation"		"1"

		"damage_heavyarmor_nontitan_scale"				"1"

		// View Drift

		"viewdrift_ads_stand_scale_pitch" 				"0"
		"viewdrift_ads_stand_scale_yaw"   				"0"
		"viewdrift_ads_crouch_scale_pitch"  			"0"
		"viewdrift_ads_crouch_scale_yaw"				"0"
		"viewdrift_ads_air_scale_pitch"   				"0"
		"viewdrift_ads_air_scale_yaw" 					"0"
		"viewdrift_ads_speed_pitch"   					"0"
		"viewdrift_ads_speed_yaw" 						"0"

		"viewkick_air_scale_ads"						"1"
		"spread_air_hip"  								"0"
	}



	"dof_zoom_nearDepthStart"						"3.683"
	"dof_zoom_nearDepthEnd"							"7.907"
	"dof_nearDepthStart"							"3.683"
	"dof_nearDepthEnd"								"6.652"

	dof_zoom_focusArea_horizontal					0.12
	dof_zoom_focusArea_top							0.18
	dof_zoom_focusArea_bottom						-0.0069
	"smart_ammo_allow_search_while_firing"			"1"
	"smart_ammo_allow_ads_lock"						"1" // "0" is default
	"zoom_time_in"									"0.1"
	"zoom_time_out"   								"0.1"
	"zoom_fov"										"45"
	"reload_time" 									"2.3"
	"reload_time_late1"								"1.03"
	"reloadempty_time"								"2.7"
	"reloadempty_time_late1"						"1.6"
	"reloadempty_time_late2"						"1.0"
	"holster_time"									"0.4"
	"deploy_time" 									"0.63"
	"lower_time"  									"0.25"
	"raise_time"  									"0.3"
	"vortex_refire_behavior"  						"bullet"
	"allow_empty_fire"								"0"
	"reload_enabled"  								"1"
	"allow_empty_click"   							"1"
	"empty_reload_only"   							"0"
	"trigger_snipercam"   							"0"
	"allow_headshots" 								"1"
	"headshot_distance" 							"750"
	"primary_fire_does_not_block_sprint"			"0"
	"ads_move_speed_scale"							"0.8"
	"aimassist_disable_hipfire"						"0"
	"aimassist_disable_ads"							"0"
	"aimassist_disable_hipfire_titansonly"			"0"
	"aimassist_disable_ads_titansonly"				"0"
	"aimassist_adspull_zoomStart"					"0.05"
	"aimassist_adspull_zoomEnd"						"1.0"

	"sprint_fractional_anims"						"0"

	"spread_stand_hip"								"0.0"
	"spread_stand_hip_run"							"0.0"
	"spread_stand_hip_sprint"                       "0.0"
	"spread_crouch_hip"   							"0.0"

	"spread_stand_ads"								"0.0" //"0.25"
	"spread_crouch_ads"   							"0.0" //"0.25"
	"spread_air_ads"  								"0.0" //"0.5"

	"spread_kick_on_fire_stand_hip"   				"0"
	"spread_kick_on_fire_crouch_hip"  				"0"
	"spread_kick_on_fire_air_hip" 					"0"

	"spread_kick_on_fire_stand_ads"   				"0"
	"spread_kick_on_fire_crouch_ads"  				"0"
	"spread_kick_on_fire_air_ads" 					"0"

	"spread_max_kick_stand_hip"   					"0.0"
	"spread_max_kick_crouch_hip"  					"0.0"
	"spread_max_kick_air_hip" 						"0.0"

	"spread_max_kick_stand_ads"   					"0"
	"spread_max_kick_crouch_ads"  					"0"
	"spread_max_kick_air_ads" 						"0"

	"spread_decay_rate"   							"30.0"
	"spread_decay_delay"  							"0.15"

	"ammo_suck_behavior"							"primary_weapons"

	// View Kick
	"viewkick_spring" 								"car"

	"viewkick_pitch_base" 							"0"
	"viewkick_pitch_random"   						"0.2"
	"viewkick_pitch_softScale"						"2.0"
	"viewkick_pitch_hardScale"						"1.0"

	"viewkick_yaw_base"   							"0"
	"viewkick_yaw_random" 							"1.8"
	"viewkick_yaw_random_innerexclude"				"0.1"
	"viewkick_yaw_softScale"  						"1"
	"viewkick_yaw_hardScale"  						"1.0"

	"viewkick_roll_base"  							"0.0"
	"viewkick_roll_randomMin" 						"0.35"
	"viewkick_roll_randomMax" 						"0.55"
	"viewkick_roll_softScale" 						"1.0"
	"viewkick_roll_hardScale" 						"1.65"

	"viewkick_hipfire_weaponFraction" 				"0.2"
	"viewkick_hipfire_weaponFraction_vmScale" 		"4"
	"viewkick_ads_weaponFraction" 					"0.25"
	"viewkick_ads_weaponFraction_vmScale" 			"1.0"

	"viewkick_perm_pitch_base" 						"0.0"
	"viewkick_perm_pitch_random"   					"0.0"
	"viewkick_perm_yaw_base"   						"0.0"
	"viewkick_perm_yaw_random" 						"0.2"
	"viewkick_perm_yaw_random_innerexclude"			"0.2"

	"viewkick_scale_firstshot_hipfire"				"0.3"
	"viewkick_scale_min_hipfire"  					"1.5"
	"viewkick_scale_max_hipfire"  					"1.5"
	"viewkick_scale_firstshot_ads"					"1.0"
	"viewkick_scale_min_ads"  						"0.7"
	"viewkick_scale_max_ads"  						"0.7"
	"viewkick_scale_valuePerShot" 					"2"
	"viewkick_scale_valueLerpStart"   				"0"
	"viewkick_scale_valueLerpEnd" 					"3"
	"viewkick_scale_valueDecayDelay"  				"0.15"
	"viewkick_scale_valueDecayRate"   				"30"

	//
	"viewmodel_shake_forward"						"0.2"
	"viewmodel_shake_up"							"0.0"
	"viewmodel_shake_right"							"0.0"

	//
	"viewmodel_shake_forward"						"0.0"
	"viewmodel_shake_up"							"0.0"
	"viewmodel_shake_right"							"0.0"

	// Bob
	"bob_cycle_time"  								"0.4"
	"bob_vert_dist"   								"0.19"
	"bob_horz_dist"   								"0.1"
	"bob_max_speed"   								"150"
	"bob_pitch"   									"0.75"
	"bob_yaw" 										"-1.7"
	"bob_roll"										"1.2"

	// Bob_Zoomed
	"bob_cycle_time_zoomed"  						"0.4"
	"bob_vert_dist_zoomed"   						"0.01"
	"bob_horz_dist_zoomed"   						"0.01"
	"bob_max_speed_zoomed"   						"150"
	//"bob_pitch_zoomed"   							"0.002"
	//"bob_yaw_zoomed" 								"-.002"
	//"bob_roll_zoomed"								".002"

	// Rumble
	"fire_rumble"									"rumble_smg"

	// Sway
	"sway_rotate_attach"  							"SWAY_ROTATE"
	"sway_min_x"  									"-0.5"
	"sway_min_y"  									"-0.5"
	"sway_min_z"  									"-0.6"
	"sway_max_x"  									"0.5"
	"sway_max_y"  									"0.5"
	"sway_max_z"  									"0.6"
	"sway_min_pitch"  								"-3"
	"sway_min_yaw"									"-2.5"
	"sway_min_roll"   								"-4"
	"sway_max_pitch"  								"3"
	"sway_max_yaw"									"2.5"
	"sway_max_roll"   								"4"
	"sway_translate_gain" 							"2.5"
	"sway_rotate_gain"								"7"
	"sway_move_forward_translate_x"   				"-0.1"
	"sway_move_forward_translate_z"   				"-0.5"
	"sway_move_back_translate_x"  					"0.2"
	"sway_move_back_translate_z"  					"-0.2"
	"sway_move_left_translate_y"  					"-1"
	"sway_move_left_translate_z"  					"-0.5"
	"sway_move_left_rotate_roll"  					"-4"
	"sway_move_right_translate_y" 					"1"
	"sway_move_right_translate_z" 					"-0.5"
	"sway_move_right_rotate_roll" 					"4"
	"sway_move_up_translate_z"						"-1"
	"sway_move_down_translate_z"  					"1"
	"sway_turn_left_rotate_yaw"   					"-2.5"
	"sway_turn_right_rotate_yaw"  					"2.5"

	"sway_turn_left_translate_y"  					".5"
	"sway_turn_right_translate_y"  					"-.5"
	"sway_turn_up_translate_z"  					".2"
	"sway_turn_down_translate_z"  					"-.2"
	"sway_turn_up_translate_x"  					".1"
	"sway_turn_down_translate_x"  					"-.1"

	"sway_turn_left_rotate_roll"   					"4"
	"sway_turn_right_rotate_roll"  					"-4"
	"sway_turn_up_rotate_pitch"   					"3"
	"sway_turn_down_rotate_pitch" 					"-3"
	"sway_turn_up_rotate_roll"   					"-0.8"
	"sway_turn_down_rotate_roll" 					"0.8"

	// Zoomed Sway
	"sway_rotate_attach_zoomed"						"SWAY_ROTATE_ZOOMED"
	"sway_rotate_attach_blend_time_zoomed"			"0.2"
	"sway_rotate_gain_zoomed"						"5"

	"sway_min_yaw_zoomed"							"-0.04"
	"sway_max_yaw_zoomed"							"0.04"
	"sway_turn_left_rotate_yaw_zoomed"				"-0.085"
	"sway_turn_right_rotate_yaw_zoomed"				"0.085"

	"sway_min_roll_zoomed"   						"-1"
	"sway_max_roll_zoomed"   						"1"
	"sway_turn_left_rotate_roll_zoomed"   			"-1"
	"sway_turn_right_rotate_roll_zoomed"  			"1"

	"sway_move_right_rotate_roll_zoomed" 			"0.2"
	"sway_move_left_rotate_roll_zoomed"  			"-0.2"

	"sway_min_pitch_zoomed"  						"-0.03"
	"sway_max_pitch_zoomed"  						"0.03"
	"sway_turn_up_rotate_pitch_zoomed"				"0.07"
	"sway_turn_down_rotate_pitch_zoomed"			"-0.07"

	"sprintcycle_time"								"0.55"
	"deployfirst_time"								"1.1"
	"activitymodifier"								"pistol"

	"smart_ammo_search_angle" 						"360"
	"smart_ammo_search_npcs"						"0"
	"smart_ammo_search_players"						"1"
	"smart_ammo_search_projectiles"					"0"
	"smart_ammo_titans_block_los"					"1"
	"smart_ammo_track_cloaked_targets"				"1"
	"smart_ammo_targeting_time_modifier_projectile_owner"	"0.00"
	"smart_ammo_target_max_locks_normal"			"10"	// divide health by damage near
	"smart_ammo_target_npc_lock_factor"				"10"		// smart pistol does head shots at 2x damage
	"smart_ammo_new_target_delay"					"0.5"
	"smart_ammo_draw_acquisition_lines"				"1"
	"smart_ammo_hud_lock_style"						"pilot_pistol"
	"smart_ammo_hud_type" 							"smart_pistol"
	"smart_ammo_target_confirmed_sound"				"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_target_confirming_sound"			"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_looping_sound_acquiring"			"Weapon_SmartPistol_TargetLockingLoop"
	"smart_ammo_lock_type"							"small"
	"smart_ammo_alert_npc_fraction"					"0.1" 	// unaware since lock on fraction will not go above 1
	"smart_ammo_allow_hip_fire_lock"				"1"
	"smart_ammo_lock_effect_3p"						"P_smartpistol_lockon"
	"smart_ammo_lock_effect_attachment"				"muzzle_flash"
	"smart_ammo_player_targets_must_be_tracked"		"0"
	"smart_ammo_npc_targets_must_be_tracked"		"0"
	"smart_ammo_tracker_status_effects"				"0"
	"smart_ammo_tracked_targets_check_visibility"	"0"
	// Bodygroups:
	"bodygroup1_name"	"sight_on"
   	"bodygroup1_set"	"1"
	"bodygroup2_name"	"sight_acgs"
   	"bodygroup2_set"	"0"
   	"bodygroup3_name"	"sight_hcog"
   	"bodygroup3_set"	"0"
   	"bodygroup4_name"	"sight_cro"
   	"bodygroup4_set"	"0"
   	"bodygroup6_name"	"proscreen"
   	"bodygroup6_set"	"0"
"threat_scope_enabled"			"1"
    "clip_bodygroup"						"alternator_smg_magazine"
    "clip_bodygroup_index_shown"			"0"
    "clip_bodygroup_index_hidden"			"1"
    "clip_bodygroup_show_for_milestone_0"	"1"
    "clip_bodygroup_show_for_milestone_1"	"0"
    "clip_bodygroup_show_for_milestone_2"	"1"
    "clip_bodygroup_show_for_milestone_3"	"0"

	Mods
	{
		iron_sights
		{
			"bodygroup1_set"		"1"
			"bodygroup2_set"		"0"
			"bodygroup3_set"		"0"
			"bodygroup4_set"		"0"
		}
		hcog
		{
			"ui5_enable"		"1"
			"ui6_enable"		"1"
			"ui1_enable"		"0"

			"bodygroup1_set"	    "0"
			"bodygroup2_set"	    "0"
			"bodygroup3_set"	    "1"
			"bodygroup4_set"	    "0"

			"dof_zoom_nearDepthStart"						"6.161"
			"dof_zoom_nearDepthEnd"							"9.204"
			"viewmodel_offset_ads"							"0 -4.8 -0.73"
			"zoom_fov"		    	"35"
			dof_zoom_focusArea_horizontal					0.085
			dof_zoom_focusArea_top							0.18
			dof_zoom_focusArea_bottom						-0.06
		}
		holosight
		{
			"bodygroup1_set"	    "0"
			"bodygroup2_set"	    "0"
			"bodygroup3_set"	    "1"
			"bodygroup4_set"	    "0"

			"dof_zoom_nearDepthStart"						"6.161"
			"dof_zoom_nearDepthEnd"							"9.204"
			"viewmodel_offset_ads"							"0 -4.8 -0.76"
			"zoom_fov"		    	"35"
			dof_zoom_focusArea_horizontal					0.062
			dof_zoom_focusArea_top							0.10
			dof_zoom_focusArea_bottom						-0.040
		}
		redline_sight
		{
			"ui1_enable"		"0"
			"ui3_enable"		"1"

			"bodygroup1_set"	    "0"
			"bodygroup2_set"	    "1"
			"bodygroup3_set"	    "0"
			"bodygroup4_set"	    "0"

			"viewmodel_offset_ads"							"0 -5.9 -0.35"
			"dof_zoom_nearDepthStart"						"5.691"
			"dof_zoom_nearDepthEnd"							"6.745"

			"zoom_fov"						"25"
			dof_zoom_focusArea_horizontal					0.085
			dof_zoom_focusArea_top							0.080
			dof_zoom_focusArea_bottom						-0.047
		}
		threat_scope
		{
			"ui1_enable"	"0"
			"ui4_enable"	"1"

			"bodygroup1_set"	    "0"
			"bodygroup2_set"	    "0"
			"bodygroup3_set"	    "0"
			"bodygroup4_set"	    "1"

			"viewmodel_offset_ads"							"0 -7.1 -0.4"
			"dof_zoom_nearDepthStart"						"5.040"
			"dof_zoom_nearDepthEnd"							"5.737"

			"threat_scope_enabled"		"1"
			"threat_scope_bounds_tagname1"	"SCR_TR_CRO"
			"threat_scope_bounds_tagname2"	"SCR_BL_CRO"
			dof_zoom_focusArea_horizontal					0.068
			dof_zoom_focusArea_top							0.065
			dof_zoom_focusArea_bottom						-0.046
		}
		smart_lock
		{
		}
		pro_screen
		{
			"ui8_enable"		"1"
			"bodygroup6_set"	"1"
		}
		extended_ammo
		{
			"ammo_stockpile_max"						"375"
			"ammo_clip_size"   							"25"
			"ammo_default_total"						"375"
		}
		tactical_cdr_on_kill
		{

		}
		pas_fast_reload
		{
			"reload_time"								"*0.7"
			"reload_time_late1"							"*0.7"
			"reloadempty_time"							"*0.7"
			"reloadempty_time_late1"					"*0.7"
		}
		pas_run_and_gun
		{
			"primary_fire_does_not_block_sprint"		"1"
			"crosshair_force_sprint_fade_disabled"      "1"
		}
		pas_fast_ads
		{
			//Fast ADS
			"zoom_time_in"									"*0.5"
			"zoom_time_out"   								"*0.6"
		}
		pas_fast_swap
		{
			//Fast Swap
			"fast_swap_to"									"1"
		}
		burn_mod_alternator_smg
		{
			"is_burn_mod"		                        "1"

			//FX
			"fx_muzzle_flash_view"							"P_wpn_muzzleflash_alternator_FP_burn"
			"fx_muzzle_flash_world"							"P_wpn_muzzleflash_alternator_burn"
			"fx_muzzle_flash_attach"						"muzzle_flash"

			"fx_muzzle_flash2_view"							"P_wpn_muzzleflash_alternator_FP_burn"
			"fx_muzzle_flash2_world"						"P_wpn_muzzleflash_alternator_burn"
			"fx_muzzle_flash2_attach"						"muzzle_flash_l"

			"tracer_effect_first_person"                "P_wpn_tracer_BC"
			"tracer_effect"   							"P_wpn_tracer_BC"

			"damage_near_value"   							"++10"
			"damage_far_value"								"++2"
			"damage_very_far_value"							"++3"
			"damage_near_value_titanarmor"					"200"
			"damage_far_value_titanarmor" 					"160"
		}
	}

	"ui1_enable"		"1"
	"ui1_draw_cloaked"	"1"
	UiData1
	{
		"ui"							"ui/alternator_reticle"
		"mesh"							"models/weapons/attachments/alternator_rui_upper"
		Args
		{
			vis							player_zoomfrac
		}
	}

	"ui2_enable"		"1"
	UiData2
	{
		"ui"							"ui/alternator_ammo_counter"
		"mesh"							"models/weapons/attachments/alternator_rui_lower"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui3_enable"		"0"
	"ui3_draw_cloaked"	"1"
	UiData3
	{
		"ui"								"ui/acgs_redline"
		"mesh"							"models/weapons/attachments/acgs_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize						weapon_clipSize
		}
	}

	"ui4_enable"		"0"
	"ui4_draw_cloaked"	"1"
	UiData4
	{
		"ui"							"ui/cro_threat_front"
		"mesh"							"models/weapons/attachments/cro_rui_upper"
		Args
		{
			zoomFrac					player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui5_enable"		"0"
	"ui5_draw_cloaked"	"1"
	UiData5
	{
		"ui"								"ui/hcog_upper"
		"mesh"						"models/weapons/attachments/hcog2_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui6_enable"		"0"
	"ui6_draw_cloaked"	"1"
	UiData6
	{
		"ui"								"ui/hcog_lower"
		"mesh"						"models/weapons/attachments/hcog2_rui_lower"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui8_enable"		"0"
	UiData8
	{
		"ui"								"ui/pro_screen_panel"
		"mesh"						"models/weapons/attachments/pro_screen_rui_upper"
		Args
		{
			proValue							proscreen_int0
			proOwnedByPlayer			proscreen_owner_is_player
		}
	}

	active_crosshair_count				"1"
	rui_crosshair_index					"0"

	RUI_CrosshairData
	{
		DefaultArgs
		{
			adjustedSpread				weapon_spread
			adsFrac 					player_zoomFrac
			isSprinting					player_is_sprinting
			isReloading					weapon_is_reloading
			teamColor					crosshair_team_color
			isAmped						weapon_is_amped
		    crosshairMovementX          crosshair_movement_x
		    crosshairMovementY          crosshair_movement_y
		}

		Crosshair_1
		{
			"ui"						"ui/crosshair_alternator"
			"base_spread"				"1.0"
			Args
			{
				isFiring				weapon_is_firing
			}
		}
	}
}
WeaponData
{
	// General
	"printname"   									"#WPN_LSTAR"
	"shortprintname"								"#WPN_LSTAR_SHORT"
	"description" 									"#WPN_LSTAR_DESC"
	"longdesc"										"#WPN_LSTAR_LONGDESC"

	"menu_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_lstar"
	"hud_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_lstar"

	"weaponClass" 									"human"
	"body_type"										"stalker"
	"fire_mode"   									"auto"
	"pickup_hold_prompt"  							"Hold [USE] [WEAPONNAME]"
	"pickup_press_prompt" 							"[USE] [WEAPONNAME]"
	"leveled_pickup"								"1"

	"projectile_launch_speed"						"3500"
	"projectile_gravity_scale"						"0.1"

	"damage_flags"									"DF_BULLET | DF_GIB | DF_DISMEMBERMENT"

	"OnWeaponActivate"								"OnWeaponActivate_weapon_lstar"
	"OnWeaponPrimaryAttack"							"OnWeaponPrimaryAttack_weapon_lstar"
	"OnWeaponNpcPrimaryAttack"						"OnWeaponNpcPrimaryAttack_weapon_lstar"
	"OnWeaponCooldown"								"OnWeaponCooldown_weapon_lstar"
	"OnWeaponReload"								"OnWeaponReload_weapon_lstar"

	// Menu
	"menu_category"                                 "lmg"
	"menu_anim_class"                               "medium"
	"stat_damage" 									"45"
	"stat_range"  									"75"
	"stat_accuracy"   								"34"
	"stat_rof"										"45"

	// Models
	"viewmodel"   									"models/weapons/lstar/ptpov_lstar.mdl"
	"playermodel" 									"models/weapons/lstar/w_lstar.mdl"
	"projectilemodel" 								"models/dev/empty_model.mdl"
	"holstermodel"									"models/weapons/lstar/w_lstar_stow.mdl"
	"holster_type"									"rifle"

	// Effects
	"projectile_trail_effect_0" 					"P_projectile_lstar"
	"impact_effect_table" 							"lstar"
	"projectile_adjust_to_gun_barrel"				"1"

	"fx_muzzle_flash_view"							"P_muz_lstar_FP"
	"fx_muzzle_flash_world"							"P_muz_lstar"
	"fx_muzzle_flash_attach"						"muzzle_flash"

	//Sounds
	"fire_sound_1_player_1p"						"Weapon_LSTAR_Fire_1P"
	//"fire_sound_1_player_3p"						"Weapon_LSTAR_Fire_3P"
	"fire_sound_2_player_1p"						"weapon_lstar_secondshot_1p"
	"fire_sound_2_player_3p"						"Weapon_LSTAR_SecondShot_3P"

	"idle_sound_player_1p"							"weapon_lstar_idle_gears_1p"

	"vortex_impact_sound_1p"						"vortex_shield_deflect_amped"
	"vortex_impact_sound_3p"						"vortex_shield_deflect_amped"

	"vortex_impact_effect"							"P_impact_xo_shield_cp"

	"looping_sounds"								"1"

	"sound_zoom_in"									"Weapon_LSTAR_ADS_In"
	"sound_zoom_out"								"Weapon_LSTAR_ADS_Out"

	"burst_or_looping_fire_sound_start_1p"			"Weapon_LSTAR_FirstShot_1P"
	"burst_or_looping_fire_sound_middle_1p"			"Weapon_LSTAR_Loop_1P"
	"burst_or_looping_fire_sound_end_1p"			"Weapon_LSTAR_LoopEnd_1P"

	"burst_or_looping_fire_sound_start_3p"			"Weapon_LSTAR_FirstShot_3P"
	"burst_or_looping_fire_sound_middle_3p"			"Weapon_LSTAR_Loop_3P"
	"burst_or_looping_fire_sound_end_3p"			"Weapon_LSTAR_LoopEnd_3P"

	"burst_or_looping_fire_sound_start_npc"			"Weapon_LSTAR_FirstShot_3P_npc_a"
	"burst_or_looping_fire_sound_middle_npc"		"Weapon_LSTAR_Loop_3P_npc_a"
	"burst_or_looping_fire_sound_end_npc"			"Weapon_LSTAR_LoopEnd_3P_npc_a"

	///
	"sound_dryfire"									"lstar_dryfire"
	"sound_pickup"									"wpn_pickup_MG_1P"
	"low_ammo_sound_name_1"							"LSTAR_LowAmmo_Shot1"
	"low_ammo_sound_name_2"							"LSTAR_LowAmmo_Shot2"
	"low_ammo_sound_name_3"							"LSTAR_LowAmmo_Shot3"
	"low_ammo_sound_name_4"							"LSTAR_LowAmmo_Shot4"
	"low_ammo_sound_name_5"							"LSTAR_LowAmmo_Shot5"
	"low_ammo_sound_name_6"							"LSTAR_LowAmmo_Shot6"
	"low_ammo_sound_name_7"							"LSTAR_LowAmmo_Shot7"
	"low_ammo_sound_name_8"							"LSTAR_LowAmmo_Shot8"
	"low_ammo_sound_name_9"							"LSTAR_LowAmmo_Shot9"
	"low_ammo_sound_name_10"						"LSTAR_LowAmmo_Shot10"
	"low_ammo_sound_name_11"						"LSTAR_LowAmmo_Shot11"
	"low_ammo_sound_name_12"						"LSTAR_LowAmmo_Shot12"
	"low_ammo_sound_name_13"						"LSTAR_LowAmmo_Shot13"
	"low_ammo_sound_name_14"						"LSTAR_LowAmmo_Shot14"
	"low_ammo_sound_name_15"						"LSTAR_LowAmmo_Shot15"

	// Network
	//"net_optimize"		                            "1"

	"bolt_hitsize"									"0.0"
	"bolt_hitsize_grow1_time"						"0.075"
	"bolt_hitsize_grow1_size"						"5.0"
	"bolt_hitsize_grow2_time"						"0.18"
	"bolt_hitsize_grow2_size"						"7.0"
	"bolt_hitsize_growfinal_lerptime"				"0.18"
	"bolt_hitsize_growfinal_size"					"7.0"

	"bolt_gravity_enabled"							"1"

	// Damage - When Used by Players
	"damage_type" 									"bullet"

	"explosion_damages_owner"						"1"
	"explosion_inner_radius"  						"24"
	"explosionradius" 								"0"
	"impulse_force"   								"3000"

   "titanarmor_critical_hit_required"              "1"

	"npc_miss_fast_player"							"1"

// Spread
	"spread_stand_hip"								"1"
	"spread_stand_hip_run"							"1"
	"spread_stand_hip_sprint"                       "1"
	"spread_crouch_hip"   							"1"

	"spread_stand_ads"								"1" //"0.5"
	"spread_crouch_ads"   							"1" //"0.5"
	"spread_air_ads"  								"1" //"0.5"

	"spread_kick_on_fire_stand_hip"   				"0"
	"spread_kick_on_fire_crouch_hip"  				"0
	"spread_kick_on_fire_air_hip" 					"0
	"spread_kick_on_fire_stand_ads"   				"0"
	"spread_kick_on_fire_crouch_ads"  				"0
	"spread_kick_on_fire_air_ads" 					"0

	"spread_max_kick_stand_hip"   					"1"
	"spread_max_kick_crouch_hip"  					"1"
	"spread_max_kick_air_hip" 						"1"

	"spread_max_kick_stand_ads"   					"1"
	"spread_max_kick_crouch_ads"  					"1"
	"spread_max_kick_air_ads" 						"1"

	"spread_wallrunning"  							"3"
	"spread_wallhanging"  							"3"

	//
	"viewmodel_shake_forward"						"1.0"
	"viewmodel_shake_up"							"0.075"
	"viewmodel_shake_right"							"0.0"


	// Bob
	"bob_cycle_time"  								"0.4"
	"bob_vert_dist"   								"0.19"
	"bob_horz_dist"   								"0.1"
	"bob_max_speed"   								"150"
	"bob_pitch"   									"0.75"
	"bob_yaw" 										"-1.7"
	"bob_roll"										"1.2"

	// Bob_Zoomed
	"bob_cycle_time_zoomed"  						"0.4"
	"bob_vert_dist_zoomed"   						"0.01"
	"bob_horz_dist_zoomed"   						"0.01"
	"bob_max_speed_zoomed"   						"150"
	//"bob_pitch_zoomed"   							"0.002"
	//"bob_yaw_zoomed" 								"-.002"
	//"bob_roll_zoomed"								".002"

	// Rumble
	"fire_rumble"									"rumble_lstar"

	// Sway
	"sway_rotate_attach"  							"SWAY_ROTATE"
	"sway_min_x"  									"-0.5"
	"sway_min_y"  									"-0.5"
	"sway_min_z"  									"-0.6"
	"sway_max_x"  									"0.5"
	"sway_max_y"  									"0.5"
	"sway_max_z"  									"0.6"
	"sway_min_pitch"  								"-3"
	"sway_min_yaw"									"-2.5"
	"sway_min_roll"   								"-4"
	"sway_max_pitch"  								"3"
	"sway_max_yaw"									"2.5"
	"sway_max_roll"   								"4"
	"sway_translate_gain" 							"2.5"
	"sway_rotate_gain"								"7"
	"sway_move_forward_translate_x"   				"-0.1"
	"sway_move_forward_translate_z"   				"-0.5"
	"sway_move_back_translate_x"  					"0.2"
	"sway_move_back_translate_z"  					"-0.2"
	"sway_move_left_translate_y"  					"-1"
	"sway_move_left_translate_z"  					"-0.5"
	"sway_move_left_rotate_roll"  					"-4"
	"sway_move_right_translate_y" 					"1"
	"sway_move_right_translate_z" 					"-0.5"
	"sway_move_right_rotate_roll" 					"4"
	"sway_move_up_translate_z"						"-1"
	"sway_move_down_translate_z"  					"1"
	"sway_turn_left_rotate_yaw"   					"-2.5"
	"sway_turn_right_rotate_yaw"  					"2.5"

	"sway_turn_left_translate_y"  					".5"
	"sway_turn_right_translate_y"  					"-.5"
	"sway_turn_up_translate_z"  					".2"
	"sway_turn_down_translate_z"  					"-.2"
	"sway_turn_up_translate_x"  					".1"
	"sway_turn_down_translate_x"  					"-.1"

	"sway_turn_left_rotate_roll"   					"4"
	"sway_turn_right_rotate_roll"  					"-4"
	"sway_turn_up_rotate_pitch"   					"3"
	"sway_turn_down_rotate_pitch" 					"-3"
	"sway_turn_up_rotate_roll"   					"-0.8"
	"sway_turn_down_rotate_roll" 					"0.8"

	// Zoomed Sway
	"sway_rotate_attach_zoomed"						"SWAY_ROTATE_ZOOMED"
	"sway_rotate_attach_blend_time_zoomed"			"0.2"
	"sway_rotate_gain_zoomed"						"5"

	"sway_min_yaw_zoomed"							"-0.04"
	"sway_max_yaw_zoomed"							"0.04"
	"sway_turn_left_rotate_yaw_zoomed"				"-0.085"
	"sway_turn_right_rotate_yaw_zoomed"				"0.085"

	"sway_min_roll_zoomed"   						"-1"
	"sway_max_roll_zoomed"   						"1"
	"sway_turn_left_rotate_roll_zoomed"   			"-1"
	"sway_turn_right_rotate_roll_zoomed"  			"1"

	"sway_move_right_rotate_roll_zoomed" 			"0.2"
	"sway_move_left_rotate_roll_zoomed"  			"-0.2"

	"sway_min_pitch_zoomed"  						"-0.03"
	"sway_max_pitch_zoomed"  						"0.03"
	"sway_turn_up_rotate_pitch_zoomed"				"0.07"
	"sway_turn_down_rotate_pitch_zoomed"			"-0.07"


	// WeaponED Unhandled Key/Values and custom script Key/Values
	"deployfirst_time"								"1.25"
	"sprintcycle_time"								".55"

	"ammo_suck_behavior"							"primary_weapons"

	"viewkick_spring" 								"lstar"

	"viewkick_pitch_base" 							"0.25"
	"viewkick_pitch_random"   						"0.10"
	"viewkick_pitch_softScale"						"1.0"
	"viewkick_pitch_hardScale"						"0.1"

	"viewkick_yaw_base"   							"0.0"
	"viewkick_yaw_random" 							"0.6"
	"viewkick_yaw_random_innerexclude"				"0.1"
	"viewkick_yaw_softScale"  						"0.1"
	"viewkick_yaw_hardScale"  						"1.0"

	"viewkick_roll_base"  							"0"
	"viewkick_roll_randomMin" 						"0.06"
	"viewkick_roll_randomMax" 						"0.08"
	"viewkick_roll_softScale" 						"0.2"
	"viewkick_roll_hardScale" 						"5.0"

	"viewkick_hipfire_weaponFraction" 				"0.8"
	"viewkick_hipfire_weaponFraction_vmScale" 		"2.0"
	"viewkick_ads_weaponFraction" 					"0.4"
	"viewkick_ads_weaponFraction_vmScale" 			"3.0"

	//"viewkick_scale_firstshot_hipfire"			"0"
	//"viewkick_scale_firstshot_ads"				"0"

	"viewkick_scale_min_hipfire"  					"1"
	"viewkick_scale_max_hipfire"  					"1"
	"viewkick_scale_min_ads"  						"0.75"
	"viewkick_scale_max_ads"  						"0.75"
	"viewkick_scale_valuePerShot" 					"0"
	"viewkick_scale_valueLerpStart"   				"0"
	"viewkick_scale_valueLerpEnd" 					"0"
	"viewkick_scale_valueDecayDelay"  				"0"
	"viewkick_scale_valueDecayRate"   				"40"

	"viewkick_perm_pitch_base" 						"0"
	"viewkick_perm_pitch_random"   					"0.2"
	"viewkick_perm_yaw_base"   						"0"
	"viewkick_perm_yaw_random" 						"0.15"

	"viewkick_duck_scale"							"1.0"

	"cooldown_viewkick_pitch_base"					"5.0"
	"cooldown_viewkick_pitch_random"				"0.5"
	"cooldown_viewkick_pitch_random_innerexclude"	"0.0"
	"cooldown_viewkick_yaw_base"					"0.0"
	"cooldown_viewkick_yaw_random"					"2.0"
	"cooldown_viewkick_yaw_random_innerexclude"		"0.0"
	"cooldown_viewkick_softScale"					"0.2"
	"cooldown_viewkick_hardScale"					"0.2"
	"cooldown_viewkick_adsScale"					"1.35"

	"critical_hit_damage_scale"						"1"

	// Ammo
	"ammo_clip_size"   								"35"
	"ammo_clip_reload_max"							"35"
	"ammo_min_to_fire_autoreloads"					"0"
	"ammo_min_to_fire"								"9"
	"ammo_no_remove_from_stockpile"					"1"
	"chance_for_bonus_last_shot_in_clip"			"0.75"
	"critical_hit"									"1"

	MP_BASE
	{
		"ammo_default_total"							"140"
		"ammo_stockpile_max"							"140"
		"lifetime_shots_default"						"<KEEP_DEFAULT>"

		"reload_alt_anim"								"0"

		"aimassist_adspull_weaponclass"					"precise"

		"damage_near_value"   							"25"
		"damage_far_value"								"18"
		"damage_near_value_titanarmor"					"85"
		"damage_far_value_titanarmor" 					"65"
		"damage_rodeo" 									"100"
		"explosion_damage"								"30"
		"damage_near_distance"							"1800"
		"damage_far_distance" 							"2000"

		"damage_headshot_scale"							"1.5"

		"red_crosshair_range" 							"1800"

		"npc_damage_near_value"   						"15"
		"npc_damage_far_value"							"10"
		"npc_damage_far_value_titanarmor" 				"0"
		"npc_damage_near_value_titanarmor"				"0"
		"npc_damage_near_distance"						"1250"
		"npc_damage_far_distance" 						"2000"

		"npc_min_engage_range"							"100"
		"npc_max_engage_range"							"1500"
		"npc_min_engage_range_heavy_armor"				"500"
		"npc_max_engage_range_heavy_armor"				"3000"
		"npc_min_range"   								"0"
		"npc_max_range"   								"3000"

		"npc_min_burst"   								"5"
		"npc_max_burst"   								"8"
		"npc_rest_time_between_bursts_min"				"3.0"
		"npc_rest_time_between_bursts_max"				"4.0"

		"enable_highlight_networking_on_creation"		"<KEEP_DEFAULT>"

		"viewkick_air_scale_ads"						"2"
		"spread_air_hip"  								"3"

		"damage_heavyarmor_nontitan_scale"				"0.35"
		"red_crosshair_range" 							"1"

		"smart_ammo_search_distance"  					"10000000"
		"smart_ammo_max_targeted_burst"					"12"
		"smart_ammo_targeting_time_min"					"0.00"
		"smart_ammo_targeting_time_max"					"0.00"
		"smart_ammo_targeting_time_min_npc"				"0.1"
		"smart_ammo_targeting_time_max_npc"				"0.1"
	}

	SP_BASE
	{
		"ammo_default_total"							"140"
		"ammo_stockpile_max"							"245"
		"lifetime_shots_default"						"140"

		"reload_alt_anim"								"0"

		"aimassist_adspull_weaponclass"					"precise_sp"

		"damage_near_value"   							"25"
		"damage_far_value"								"19"
		"damage_near_value_titanarmor"					"40"
		"damage_far_value_titanarmor" 					"40"
		"damage_rodeo" 									"100"
		"explosion_damage"								"30"
		"damage_near_distance"							"1800"
		"damage_far_distance" 							"2000"

		"damage_headshot_scale"							"2"

		"red_crosshair_range" 							"1800"

		"npc_damage_near_value"   						"10"
		"npc_damage_far_value"							"10"
		"npc_damage_near_value_titanarmor"				"30"
		"npc_damage_far_value_titanarmor" 				"30"
		"npc_damage_near_distance"						"<KEEP_DEFAULT>"
		"npc_damage_far_distance" 						"<KEEP_DEFAULT>"

		"npc_min_engage_range"							"100"
		"npc_max_engage_range"							"1500"
		"npc_min_engage_range_heavy_armor"				"500"
		"npc_max_engage_range_heavy_armor"				"3000"
		"npc_min_range"   								"0"
		"npc_max_range"   								"3000"

		"npc_min_burst"   								"5"
		"npc_max_burst"   								"8"
		"npc_rest_time_between_bursts_min"				"2.0"
		"npc_rest_time_between_bursts_max"				"3.0"

		"enable_highlight_networking_on_creation"		"1"

		"viewkick_air_scale_ads"						"1"
		"spread_air_hip"  								"1"

		"damage_heavyarmor_nontitan_scale"				"1"
	}

	// NPC
	"proficiency_poor_spreadscale"					"6.0"
	"proficiency_average_bias"						"0.3"
	"proficiency_average_spreadscale" 				"5.0"
	"proficiency_good_bias"   						"0.5"
	"proficiency_good_spreadscale"					"4.0"
	"proficiency_very_good_bias"  					"0.5"
	"proficiency_very_good_spreadscale"   			"3.0"

	"npc_lead_time_max_dist"						"4000"
	"npc_lead_time_min_dist"						"10"
	"npc_lead_time_scale"							"0.0005"


	"viewmodel_offset_ads"							"0 0 0"
	"dof_zoom_nearDepthStart"						"0.0"
	"dof_zoom_nearDepthEnd"							"13.0"
	"dof_nearDepthStart"							"3.683"
	"dof_nearDepthEnd"								"6.652"

	// Regen Ammo
	"regen_ammo_refill_rate"						"9.0"
	"regen_ammo_refill_start_delay"					"0.2"
	"regen_ammo_sound_range_start_1"				"1"
	"regen_ammo_sound_range_name_1"					""
	"regen_ammo_sound_range_start_2"				"10"
	"regen_ammo_sound_range_name_2"					""
	"regen_ammo_sound_range_start_3"				"35"
	"regen_ammo_sound_range_name_3"					""

	// Behavior
	"fire_rate"   									"12.0"

	"zoom_time_in"									"0.1"
	"zoom_time_out"   								"0.1"
	"smart_ammo_allow_search_while_firing"			"1"
	"smart_ammo_allow_ads_lock"						"1" // "0" is default
	"smart_ammo_search_angle" 						"360"
	"smart_ammo_search_npcs"						"0"
	"smart_ammo_search_players"						"1"
	"smart_ammo_search_projectiles"					"0"
	"smart_ammo_titans_block_los"					"1"
	"smart_ammo_track_cloaked_targets"				"1"
	"smart_ammo_targeting_time_modifier_projectile_owner"	"0.00"
	"smart_ammo_target_max_locks_normal"			"10"	// divide health by damage near
	"smart_ammo_target_npc_lock_factor"				"10"		// smart pistol does head shots at 2x damage
	"smart_ammo_new_target_delay"					"0.1"
	"smart_ammo_draw_acquisition_lines"				"0"
	"smart_ammo_hud_lock_style"						"pilot_pistol"
	"smart_ammo_hud_type" 							"smart_pistol"
	"smart_ammo_target_confirmed_sound"				"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_target_confirming_sound"			"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_looping_sound_acquiring"			"Weapon_SmartPistol_TargetLockingLoop"
	"smart_ammo_lock_type"							"small"
	"smart_ammo_alert_npc_fraction"					"0.1" 	// unaware since lock on fraction will not go above 1
	"smart_ammo_allow_hip_fire_lock"				"1"
	"smart_ammo_lock_effect_3p"						"P_smartpistol_lockon"
	"smart_ammo_lock_effect_attachment"				"muzzle_flash"
	"smart_ammo_player_targets_must_be_tracked"		"0"
	"smart_ammo_npc_targets_must_be_tracked"		"0"
	"smart_ammo_tracker_status_effects"				"0"
	"smart_ammo_tracked_targets_check_visibility"	"0"
	"threat_scope_enabled"			"1"
	"zoom_fov"										"35"
	"cooldown_time"									"0.6"
	"reloadempty_time"								"6.03"
	"reloadempty_time_late1"						"4.7"
	"reloadempty_time_late2"						"3.5"
	"reloadempty_time_late3"						"2.5"
	"reloadempty_time_late4"						"1.43"
	"reloadempty_time_late5"						"0.56"
	"holster_time"									"0.5"
	"deploy_time" 									"1"
	"lower_time"  									"0.35"
	"raise_time"  									"0.4"
	"vortex_drain" 			 						"0.0"
	"vortex_refire_behavior"  						"absorb"
	"allow_empty_fire"								"0"
	"reload_enabled"  								"1"
	"allow_empty_click"   							"1"
	"empty_reload_only"   							"1"
	"trigger_snipercam"   							"0"
	"allow_headshots" 								"1"
	"headshot_distance" 							"1800"
	"primary_fire_does_not_block_sprint"			"0"
	"ads_move_speed_scale"							"0.5"
	"aimassist_disable_hipfire"						"0"
	"aimassist_disable_ads"							"0"
	"aimassist_disable_hipfire_titansonly"			"0"
	"aimassist_disable_ads_titansonly"				"0"

	"sprint_fractional_anims"						"0"

	// Bodygroups:
	"bodygroup1_name"	"sight_on"
	"bodygroup1_set"	"1"
	"bodygroup2_name"	"sight_aog"
	"bodygroup2_set"	"0"
	"bodygroup3_name"	"sight_acgs"
	"bodygroup3_set"	"0"
	"bodygroup4_name"	"sight_cro"
	"bodygroup4_set"	"0"
	"bodygroup5_name"	"proscreen"
	"bodygroup5_set"	"0"
	//"bodygroup6_name"	"suppressor_sq_med"
	//"bodygroup6_set"	"0"

    //"clip_bodygroup"						"r97_magazine"
    //"clip_bodygroup_index_shown"			"1"
    //"clip_bodygroup_index_hidden"			"1"
    //"clip_bodygroup_show_for_milestone_0"	"0"
    //"clip_bodygroup_show_for_milestone_1"	"0"
    //"clip_bodygroup_show_for_milestone_2"	"0"
    //"clip_bodygroup_show_for_milestone_3"	"0"

	Mods
	{
		iron_sights
		{
		}
		holosight
		{
			"zoom_fov"			    "45"
			dof_zoom_focusArea_horizontal					0.062
			dof_zoom_focusArea_top							0.10
			dof_zoom_focusArea_bottom						-0.040
		}
		aog
		{
			"bodygroup1_set"		"0"
			"bodygroup2_set"		"1"
			"bodygroup3_set"		"0"
			"bodygroup4_set"		"0"
			"viewmodel_offset_hip"							"0 0 -.9"
			"viewmodel_offset_ads"							"0.003 0.3 -.778"
			"dof_zoom_nearDepthStart"						"3.161"
			"dof_zoom_nearDepthEnd"							"7.5"
			dof_zoom_focusArea_horizontal					0.055
			dof_zoom_focusArea_top							0.102
			dof_zoom_focusArea_bottom						-0.053
			"ui5_enable"	"1"
			"ui6_enable"	"1"
			zoom_fov		20
		}
		redline_sight
		{
			"ui3_enable"		"1"
			"bodygroup1_set"		"0"
			"bodygroup2_set"		"0"
			"bodygroup3_set"		"1"
			"bodygroup4_set"		"0"
			"viewmodel_offset_ads"							"0 -3.7 -.46"
			"dof_zoom_nearDepthStart"						"5.691"
			"dof_zoom_nearDepthEnd"							"6.745"

			"zoom_fov"						"25"
			dof_zoom_focusArea_horizontal					0.085
			dof_zoom_focusArea_top							0.080
			dof_zoom_focusArea_bottom						-0.047
		}
		threat_scope
		{
			"bodygroup1_set"		"0"
			"bodygroup2_set"		"0"
			"bodygroup3_set"		"0"
			"bodygroup4_set"		"1"
			"viewmodel_offset_ads"							"0 -4 -0.47"
			"dof_zoom_nearDepthStart"						"5.000"
			"dof_zoom_nearDepthEnd"							"7.000"

			"ui4_enable"	"1"

			"threat_scope_enabled"			"1"
			"threat_scope_bounds_tagname1"	"SCR_TR_CRO"
			"threat_scope_bounds_tagname2"	"SCR_BL_CRO"
			dof_zoom_focusArea_horizontal					0.068
			dof_zoom_focusArea_top							0.065
			dof_zoom_focusArea_bottom						-0.046
			"zoom_fov"										"30"
		}
		smart_lock
		{
		}
		pro_screen
		{
			"ui8_enable"		"1"
			"bodygroup5_set"	"1"
		}
        slammer
        {
        }
		tactical_cdr_on_kill
		{

		}
		extended_ammo
		{
			"ammo_clip_size"   					"40"
		}
		pas_fast_reload
		{
			"reloadempty_time"					"*0.7"
			"reloadempty_time_late1"			"*0.7"
			"reloadempty_time_late2"			"*0.7"
			"reloadempty_time_late3"			"*0.7"
			"reloadempty_time_late4"			"*0.7"
			"reloadempty_time_late5"			"*0.7"
		}
		pas_fast_ads
		{
			//Fast ADS
			"zoom_time_in"									"*0.5"
			"zoom_time_out"   								"*0.6"
		}
		pas_fast_swap
		{
			//Fast Swap
			"fast_swap_to"									"1"
		}
		burn_mod_lstar
		{
			"is_burn_mod"						"1"

			"damage_near_value"   							"++10"
			"damage_far_value"								"++7"
			"damage_near_value_titanarmor"					"185"
			"damage_far_value_titanarmor" 					"165"

			//EFfects
			"projectile_trail_effect_0" 					"P_projectile_lstar_burn"
			"fx_muzzle_flash_view"							"P_muz_lstar_FP_burn"
			"fx_muzzle_flash_world"							"P_muz_lstar_burn"
		}

		rcee
		{
			"ui1_enable"		"0"
			"ui7_enable"		"1"
			"ammo_min_to_fire"	"0"
			"dof_zoom_nearDepthStart"						"* 0.0"
			"dof_zoom_nearDepthEnd"							"* 0.5"
		}

		less_npc_burst
		{
			"npc_max_engage_range"				"8000"
			"npc_max_engage_range_heavy_armor"	"8000"
			"npc_max_range"   					"8000"
			"npc_rest_time_between_bursts_min"	"2.0"
			"npc_rest_time_between_bursts_max"	"4.0"
			"npc_min_burst"   					"2"
			"npc_max_burst"   					"4"
		}
		pas_run_and_gun
		{
			"primary_fire_does_not_block_sprint"			"1"
			"crosshair_force_sprint_fade_disabled"          "1"
		}

		old_kick
		{
			"cooldown_viewkick_pitch_base"					"-6.0"
			"cooldown_viewkick_pitch_random"				"0.5"
			"cooldown_viewkick_pitch_random_innerexclude"	"0.0"
			"cooldown_viewkick_yaw_base"					"-0.5"
			"cooldown_viewkick_yaw_random"					"1.0"
			"cooldown_viewkick_yaw_random_innerexclude"		"0.0"
			"cooldown_viewkick_softScale"					"1.5"
			"cooldown_viewkick_hardScale"					"1.0"
			"cooldown_viewkick_adsScale"					"1.0"

			"viewkick_pitch_base" 							"0"
			"viewkick_pitch_random"   						"0"
			"viewkick_pitch_softScale"						"0"
			"viewkick_pitch_hardScale"						"0"

			"viewkick_yaw_base"   							"0"
			"viewkick_yaw_random" 							"0"
			"viewkick_yaw_random_innerexclude"				"0"
			"viewkick_yaw_softScale"  						"0"
			"viewkick_yaw_hardScale"  						"0"

			"viewkick_roll_base"  							"0"
			"viewkick_roll_randomMin" 						"0.05"
			"viewkick_roll_randomMax" 						"0.1"
			"viewkick_roll_softScale" 						"0.2"
			"viewkick_roll_hardScale" 						"1.85"
		}

		reloadanimtest
		{
			"reload_alt_anim"								"1"
			"reloadempty_time"								"4.1"
			"reloadempty_time_late1"						"2.77"
			"reloadempty_time_late2"						"1.57"
			"reloadempty_time_late3"						"0.57"
		}
	}

	"ui1_enable"		"1"
	UiData1
	{
		"ui"							"ui/lstar_screens"
		"mesh"							"models/weapons/attachments/lstar_rui_lower"
		Args
		{
			clipAmmo			weapon_ammo
			clipSize			weapon_clipSize
			lifetimeShots		weapon_lifetime_shots
			ammoFrac			weapon_ammofrac

			isFiring			weapon_is_firing
			isCooling			weapon_is_inCooldown
			isReloading			weapon_is_reloading
			isAmped				weapon_is_amped

			lastDryFireTime		weapon_latest_dryfire_time
		}
	}

	"ui2_enable"		"0"
	UiData2
	{
		"ui"							"ui/reticle_quads_test"
		"mesh"							"models/weapons/attachments/lstar_rui_upper"
		Args
		{
			//ammo						weapon_ammo
			//clipSize					weapon_clipSize
			//clipCount					weapon_stockpileClipCount
		}
	}

	"ui3_enable"		"0"
	"ui3_draw_cloaked"	"1"
	UiData3
	{
		"ui"								"ui/acgs_redline"
		"mesh"							"models/weapons/attachments/acgs_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui4_enable"		"0"
	"ui4_draw_cloaked"	"1"
	UiData4
	{
		"ui"							"ui/cro_threat_front"
		"mesh"							"models/weapons/attachments/cro_rui_upper"
		Args
		{
			zoomFrac					player_zoomfrac
		}
	}

	"ui5_enable"		"0"
	"ui5_draw_cloaked"	"1"
	UiData5
	{
		"ui"							"ui/aog_multi_reticles_lstar"
		"mesh"					"models/weapons/attachments/aog_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui6_enable"		"0"
	"ui6_draw_cloaked"	"1"
	UiData6
	{
		"ui"							"ui/aog_ammo_counter_lstar"
		"mesh"					"models/weapons/attachments/aog_rui_lower"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui7_enable"		"0"
	UiData7
	{
		"ui"							"ui/lstar_screens_rcee"
		"mesh"							"models/weapons/attachments/lstar_rui_lower"
		Args
		{
			lastDryFireTime		weapon_latest_dryfire_time
		}
	}

	"ui8_enable"		"0"
	UiData8
	{
		"ui"									"ui/pro_screen_panel"
		"mesh"							"models/weapons/attachments/pro_screen_rui_upper"
		Args
		{
			proValue							proscreen_int0
			proOwnedByPlayer			proscreen_owner_is_player
		}
	}

	active_crosshair_count				"1"
	rui_crosshair_index					"0"

	RUI_CrosshairData
	{
		DefaultArgs
		{
			adjustedSpread				weapon_spread
			adsFrac 					player_zoomFrac
			isSprinting					player_is_sprinting
			isReloading					weapon_is_reloading
			teamColor					crosshair_team_color
			isAmped						weapon_is_amped
			crosshairMovementX          crosshair_movement_x
			crosshairMovementY          crosshair_movement_y
		}

		Crosshair_1
		{
			"ui"						"ui/crosshair_lstar"
			"base_spread"				"0.0"
			Args
			{
				//isFiring				weapon_is_firing
			}
		}
	}
}
WeaponData
{
	// General
	"printname"   									"#WPN_SNIPER"
	"shortprintname"								"#WPN_SNIPER_SHORT"
	"description" 									"#WPN_SNIPER_DESC"
	"longdesc"										"#WPN_SNIPER_LONGDESC"

	"menu_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_kraber"
	"hud_icon"										"r2_ui/menus/loadout_icons/primary_weapon/primary_kraber"

	"weaponClass" 									"human"
	
	"body_type"										"heavy"
	"fire_mode"   									"semi-auto"
	"pickup_hold_prompt"  							"Hold [USE] [WEAPONNAME]"
	"pickup_press_prompt" 							"[USE] [WEAPONNAME]"
	"minimap_reveal_distance"						"32000"
	"leveled_pickup"								"1"

	"OnWeaponActivate"								"OnWeaponActivate_weapon_sniper"
	"OnClientAnimEvent"								"OnClientAnimEvent_weapon_sniper"
	"OnWeaponPrimaryAttack"							"OnWeaponPrimaryAttack_weapon_sniper"
	"OnWeaponNpcPrimaryAttack"						"OnWeaponNpcPrimaryAttack_weapon_sniper"
	"OnProjectileCollision"							"OnProjectileCollision_weapon_sniper"

		"viewmodel_offset_ads"			"0 0 0"

	// Menu
	"menu_category"                                 "sniper"
	"menu_anim_class"                               "large"
	"stat_damage" 									"100"
	"stat_range"  									"100"
	"stat_accuracy"   								"60"
	"stat_rof"										"15"

	"ads_dof_disable"	"0"

	// Models
	"viewmodel"   									"models/weapons/at_rifle/ptpov_at_rifle.mdl"
	"playermodel" 									"models/weapons/at_rifle/w_at_rifle.mdl"
	"projectilemodel" 								"models/weapons/bullets/projectile_20mm.mdl"

	// Effects
	"impact_effect_table" 							"titan_bullet"
	"projectile_trail_effect_0" 					"weapon_kraber_projectile"
	"projectile_do_predict_impact_effects"			"1"//0"
	"vortex_absorb_effect"							"wpn_vortex_projectile_20mm_FP"
	"vortex_absorb_effect_third_person"				"wpn_vortex_projectile_20mm"
	"vortex_absorb_sound"							"Vortex_Shield_AbsorbBulletLarge"
	"vortex_absorb_sound_1p_vs_3p"					"Vortex_Shield_AbsorbBulletLarge_1P_VS_3P"
	"projectile_adjust_to_gun_barrel"				"1"

	// Sounds
	"sound_dryfire"									"rifle_dryfire"
	"sound_pickup"									"wpn_pickup_Rifle_1P"
	"sound_zoom_in"									"Weapon_Rangemaster_Kraber_ADS_In"
	"sound_zoom_out"								"Weapon_Rangemaster_Kraber_ADS_Out"
	"fire_sound_1_player_1p"						"large_shell_drop"
	"fire_sound_1_player_3p"						"large_shell_drop"
	"fire_sound_1_npc"								"large_shell_drop"
	"fire_sound_2_player_1p"						"Weapon_Kraber_Fire_1P"
	"fire_sound_2_player_3p"						"Weapon_Kraber_Fire_3P"
	"fire_sound_2_npc"								"Weapon_Kraber_Fire_npc"

	"low_ammo_sound_name_1"							"Kraber_LowAmmo_Shot1"
	"low_ammo_sound_name_2"							"Kraber_LowAmmo_Shot2"
	"low_ammo_sound_name_3"							"Kraber_LowAmmo_Shot3"

	"fx_shell_eject_view"							"wpn_shelleject_rifle_large_FP"
	"fx_shell_eject_world"							"wpn_shelleject_rifle_large"
	"fx_shell_eject_attach"							"shell"
	"fx_shell_eject_attach_scoped"					"shell_scoped"

	"fx_muzzle_flash_view"							"wpn_muzzleflash_snp_hmn_FP"
	"fx_muzzle_flash_world"							"wpn_muzzleflash_snp_hmn"
	"fx_muzzle_flash_attach"						"muzzle_flash"
	"fx_muzzle_flash_attach_scoped"					"muzzle_flash_scoped"

	// Bolt info
	"bolt_hitsize"									"0.0"
	"bolt_hitsize_grow1_time"						"0.035"
	"bolt_hitsize_grow1_size"						"0.5"
	"bolt_hitsize_grow2_time"						"0.08"
	"bolt_hitsize_grow2_size"						"1.0"
	"bolt_hitsize_growfinal_lerptime"				"0.18"
	"bolt_hitsize_growfinal_size"					"2.0"

	"bolt_gravity_enabled"							"1"
	"bolt_gravity_amount"							"0.2500"//0.500"

	"bolt_bounce_frac"								"0.000"
	"projectile_damage_reduction_per_bounce"		"0.0"
	"projectile_damages_owner"						"0"
	"projectile_ricochet_max_count"					"0"

	"pass_through_depth"							"64"
	"pass_through_damage_preserved_scale"			"1"

	"bolt_speed"									"10000"

	// Damage - When Used by Players
	"damage_flags"									"DF_BULLET | DF_KNOCK_BACK | DF_DISMEMBERMENT"
	"damage_type" 									"bullet"

	"damage_headshot_scale"							"1.5"

	"impulse_force"   								"10"

	"ammo_clip_size"   								"4"
	"is_smart_pistol"								"1"

   "titanarmor_critical_hit_required"              "1"
	"critical_hit"									"1"
	//"is_smart_pistol"								"1" 
	"titanarmor_critical_hit_required"              "1"
	"critical_hit"									"1"

	


	MP_BASE
	{
		"ammo_default_total"							"40"
		"ammo_stockpile_max"							"40"
		"ammo_no_remove_from_stockpile"					"1"
		"ammo_min_to_fire"								"1"


		"damage_near_value"   							"350"
		"damage_far_value"								"350"
		"damage_near_value_titanarmor"					"430"
		"damage_far_value_titanarmor" 					"430"
		"damage_rodeo" 									"900"
		"damage_near_distance"							"2000"
		"damage_far_distance" 							"15000"

		"red_crosshair_range" 							"15000"

		"critical_hit_damage_scale"						"1"

		// Damage - When Used by NPCs
		"npc_damage_near_value"   						"49"
		"npc_damage_far_value"							"49"
		"npc_damage_near_value_titanarmor"				"50"
		"npc_damage_far_value_titanarmor" 				"25"

		"npc_accuracy_multiplier_pilot"					"1.0"

		"npc_suppress_lsp_allowed"						"0"

		"enable_highlight_networking_on_creation"		"<KEEP_DEFAULT>"

		"damage_heavyarmor_nontitan_scale"				"0.35"

		"zoom_toggle_lerp_time"						"<KEEP_DEFAULT>"
		"zoom_toggle_fov"							"<KEEP_DEFAULT>"
		"red_crosshair_range" 							"1"

		"smart_ammo_search_distance"  					"10000000"
		"smart_ammo_max_targeted_burst"					"12"
		"smart_ammo_targeting_time_min"					"0.00"
		"smart_ammo_targeting_time_max"					"0.00"
		"smart_ammo_targeting_time_min_npc"				"0.1"
		"smart_ammo_targeting_time_max_npc"				"0.1"
	}

	SP_BASE
	{
		"zoom_toggle_lerp_time"						"0.2"
		"zoom_toggle_fov"							"7"

		"ammo_default_total"							"12"
		"ammo_stockpile_max"							"28"
		"ammo_no_remove_from_stockpile"					"0"
		"ammo_min_to_fire"								"1"


		"damage_near_value"   							"200"
		"damage_far_value"								"200"
		"damage_near_value_titanarmor"					"500"
		"damage_far_value_titanarmor" 					"500"
		"damage_rodeo" 									"900"
		"damage_near_distance"							"2000"
		"damage_far_distance" 							"15000"

		"red_crosshair_range" 							"15000"

		"critical_hit_damage_scale"						"1.5"

		// Damage - When Used by NPCs
		"npc_damage_near_value"   						"49"
		"npc_damage_far_value"							"49"
		"npc_damage_near_value_titanarmor"				"50"
		"npc_damage_far_value_titanarmor" 				"25"

		"npc_accuracy_multiplier_pilot"					"3.0"

		"npc_suppress_lsp_allowed"						"<KEEP_DEFAULT>"

		"enable_highlight_networking_on_creation"		"1"

		"damage_heavyarmor_nontitan_scale"				"1"
	}

	// NPC
	"proficiency_poor_spreadscale"					"3.0"
	"proficiency_average_spreadscale" 				"2.2"
	"proficiency_good_spreadscale"					"2.0"
	"proficiency_very_good_spreadscale"   			"1.5"

	"npc_min_engage_range"							"500"
	"npc_max_engage_range"							"8000"
	"npc_min_engage_range_heavy_armor"				"500"
	"npc_max_engage_range_heavy_armor"				"8000"
	"npc_min_range"   								"0"
	"npc_max_range"   								"8000"

	"npc_min_burst"									"1"
	"npc_max_burst"									"1"
	"npc_rest_time_between_bursts_min"				"2.0"
	"npc_rest_time_between_bursts_max"				"3.0"

	"dof_zoom_nearDepthStart"						"0"
	"dof_zoom_nearDepthEnd"							"0"
	"dof_nearDepthStart"							"4.750"
	"dof_nearDepthEnd"								"9"

	// Behavior
	"fire_rate"   									"1.85"
	"zoom_time_in"									"0.1"//0.1"//0.1"//0.1"//0.1"
	"smart_ammo_allow_search_while_firing"			"1"
	"smart_ammo_allow_ads_lock"						"1" // "0" is default
	"zoom_time_out"   								"0.1"
	"zoom_fov"										"26.26" //3x zoom
	"zoom_scope_frac_start"							"0.2"//0.2"
	"zoom_scope_frac_end"							"0.7"//0.85"
	"zoom_angle_shift_pitch"						"0.3"
	"zoom_angle_shift_yaw"							"0.65"
	"rechamber_time"  								"1.60"//1.30"
	"reload_time" 									"2.5"
	"reload_time_late1" 							"1.52"
	"reload_time_late2" 							"0.63"
	"reloadempty_time"								"3.61"
	"reloadempty_time_late1"						"2.63"
	"reloadempty_time_late2"						"1.75"
	"reloadempty_time_late3"						"0.55"
	"holster_time"									"0.5"
	"deploy_time" 									"0.8"
	"lower_time"  									"0.25"
	"raise_time"  									"0.3"
	"vortex_refire_behavior"  						"bullet"
	"allow_empty_fire"								"0"
	"reload_enabled"  								"1"
	"allow_empty_click"   							"1"
	"empty_reload_only"   							"0"
	"trigger_snipercam"   							"1"
	"allow_headshots" 								"1"
	"ads_move_speed_scale"							"0.5"//0.35"
	"aimassist_disable_hipfire"						"0"
	"aimassist_disable_ads"							"0"
	"aimassist_disable_hipfire_titansonly"			"0"
	"aimassist_disable_ads_titansonly"				"0"
	"gamepad_use_yaw_speed_for_pitch_ads"			"1"
	"ads_fov_zoomfrac_start"						"0.5"
	"ads_fov_zoomfrac_end"							"0.9"
	"threat_scope_enabled"			"1"

	"sprint_fractional_anims"						"0"

	// Spread
	"spread_stand_hip" 								"10"
	"spread_stand_hip_run" 							"12"
	"spread_stand_ads"  							"0.0" //"0.1"
	"spread_crouch_hip"								"8"
	"spread_crouch_ads"  							"0"
	"spread_air_hip"	   							"12"
	"spread_air_ads"   								"0.0" //".15"

	"ammo_suck_behavior"							"primary_weapons"

	// View Kick
	"viewkick_spring" 								"sniper"

	"viewkick_pitch_base" 							"-0.5625"//"-1.25"//
	"viewkick_pitch_random"   						"0.0225"//"0.05"//
	"viewkick_pitch_softScale"						"0.8"
	"viewkick_pitch_hardScale"						"2"

	"viewkick_yaw_base"   							"-0.135"//"-0.3"//
	"viewkick_yaw_random" 							"0.045"//"0.1"//
	"viewkick_yaw_softScale"  						"1.0"
	"viewkick_yaw_hardScale"  						"1.5"

	"viewkick_roll_base"  							"0"
	"viewkick_roll_randomMin" 						"0.5"
	"viewkick_roll_randomMax" 						"0.5"
	"viewkick_roll_softScale" 						"0.2"
	"viewkick_roll_hardScale" 						"3.0"

	"viewkick_hipfire_weaponFraction" 				"0.4"
	"viewkick_hipfire_weaponFraction_vmScale" 		"0.55"
	"viewkick_ads_weaponFraction" 					"0.0"//"0.45"//
	"viewkick_ads_weaponFraction_vmScale" 			"0.0"//"-0.3"//

	"viewkick_perm_pitch_base" 						"0.0"
	"viewkick_perm_pitch_random"   					"0.0"
	"viewkick_perm_pitch_random_innerexclude"		"0.0"
	"viewkick_perm_yaw_base"   						"0.0"
	"viewkick_perm_yaw_random" 						"0.0"
	"viewkick_perm_yaw_random_innerexclude" 		"0.0"

	//
	"viewmodel_shake_forward"						"0.5"
	"viewmodel_shake_up"							"0.1"
	"viewmodel_shake_right"							"0.0"

	// Bob
	"bob_cycle_time"  								"0.4"
	"bob_vert_dist"   								"0.19"
	"bob_horz_dist"   								"0.1"
	"bob_max_speed"   								"150"
	"bob_pitch"   									"0.75"
	"bob_yaw" 										"-1.7"
	"bob_roll"										"1.2"

	// Bob_Zoomed
	"bob_cycle_time_zoomed"  						"0.4"
	"bob_vert_dist_zoomed"   						"0.0025"
	"bob_horz_dist_zoomed"   						"0.0025"
	"bob_max_speed_zoomed"   						"150"
	//"bob_pitch_zoomed"   							"0.002"
	//"bob_yaw_zoomed" 								"-.002"
	//"bob_roll_zoomed"								".002"

	// Rumble
	"fire_rumble"									"rumble_sniper"

	// Sway
	"sway_rotate_attach"  							"SWAY_ROTATE"
	"sway_min_x"  									"-0.5"
	"sway_min_y"  									"-0.5"
	"sway_min_z"  									"-0.6"
	"sway_max_x"  									"0.5"
	"sway_max_y"  									"0.5"
	"sway_max_z"  									"0.6"
	"sway_min_pitch"  								"-3"
	"sway_min_yaw"									"-2.5"
	"sway_min_roll"   								"-4"
	"sway_max_pitch"  								"3"
	"sway_max_yaw"									"2.5"
	"sway_max_roll"   								"4"
	"sway_translate_gain" 							"2.5"
	"sway_rotate_gain"								"7"
	"sway_move_forward_translate_x"   				"-0.1"
	"sway_move_forward_translate_z"   				"-0.5"
	"sway_move_back_translate_x"  					"0.2"
	"sway_move_back_translate_z"  					"-0.2"
	"sway_move_left_translate_y"  					"-1"
	"sway_move_left_translate_z"  					"-0.5"
	"sway_move_left_rotate_roll"  					"-4"
	"sway_move_right_translate_y" 					"1"
	"sway_move_right_translate_z" 					"-0.5"
	"sway_move_right_rotate_roll" 					"4"
	"sway_move_up_translate_z"						"-1"
	"sway_move_down_translate_z"  					"1"
	"sway_turn_left_rotate_yaw"   					"-2.5"
	"sway_turn_right_rotate_yaw"  					"2.5"

	"sway_turn_left_translate_y"  					".5"
	"sway_turn_right_translate_y"  					"-.5"
	"sway_turn_up_translate_z"  					".2"
	"sway_turn_down_translate_z"  					"-.2"
	"sway_turn_up_translate_x"  					".1"
	"sway_turn_down_translate_x"  					"-.1"

	"sway_turn_left_rotate_roll"   					"4"
	"sway_turn_right_rotate_roll"  					"-4"
	"sway_turn_up_rotate_pitch"   					"3"
	"sway_turn_down_rotate_pitch" 					"-3"
	"sway_turn_up_rotate_roll"   					"-0.8"
	"sway_turn_down_rotate_roll" 					"0.8"

	// Zoomed Sway
	"sway_rotate_attach_zoomed"						"jx_c_pov"
	"sway_rotate_attach_blend_time_zoomed"			"0.2"
	"sway_rotate_gain_zoomed"						"5"

	"sway_min_yaw_zoomed"							"-0.085"
	"sway_max_yaw_zoomed"							"0.085"
	"sway_turn_left_rotate_yaw_zoomed"				"0.085"
	"sway_turn_right_rotate_yaw_zoomed"				"-0.085"

	"sway_min_roll_zoomed"   						"-1"
	"sway_max_roll_zoomed"   						"1"
	"sway_turn_left_rotate_roll_zoomed"   			"-1"
	"sway_turn_right_rotate_roll_zoomed"  			"1"

	"sway_move_right_rotate_roll_zoomed" 			"0.2"
	"sway_move_left_rotate_roll_zoomed"  			"-0.2"

	"sway_min_pitch_zoomed"  						"-0.25"
	"sway_max_pitch_zoomed"  						"0.25"
	"sway_turn_up_rotate_pitch_zoomed"				"-0.25"
	"sway_turn_down_rotate_pitch_zoomed"			"0.25"

	// WeaponED Unhandled Key/Values and custom script Key/Values
	"sprintcycle_time"								".55"
	//"is_sniper"										"1"
	"sprintcycle_time"								"0.55"
	
	"zoom_time_in"									"0.1"
	"zoom_time_out"   								"0.1"
	"smart_ammo_allow_search_while_firing"			"1"
	"smart_ammo_allow_ads_lock"						"1" // "0" is default
	"smart_ammo_search_angle" 						"360"
	"smart_ammo_search_npcs"						"0"
	"smart_ammo_search_players"						"1"
	"smart_ammo_search_projectiles"					"0"
	"smart_ammo_titans_block_los"					"1"
	"smart_ammo_track_cloaked_targets"				"1"
	"smart_ammo_targeting_time_modifier_projectile_owner"	"0.00"
	"smart_ammo_target_max_locks_normal"			"10"	// divide health by damage near
	"smart_ammo_target_npc_lock_factor"				"10"		// smart pistol does head shots at 2x damage
	"smart_ammo_new_target_delay"					"0.1"
	"smart_ammo_draw_acquisition_lines"				"0"
	"smart_ammo_hud_lock_style"						"pilot_pistol"
	"smart_ammo_hud_type" 							"smart_pistol"
	"smart_ammo_target_confirmed_sound"				"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_target_confirming_sound"			"Weapon_SmartPistol_PilotLocked"
	"smart_ammo_looping_sound_acquiring"			"Weapon_SmartPistol_TargetLockingLoop"
	"smart_ammo_lock_type"							"small"
	"smart_ammo_alert_npc_fraction"					"0.1" 	// unaware since lock on fraction will not go above 1
	"smart_ammo_allow_hip_fire_lock"				"1"
	"smart_ammo_lock_effect_3p"						"P_smartpistol_lockon"
	"smart_ammo_lock_effect_attachment"				"muzzle_flash"
	"smart_ammo_player_targets_must_be_tracked"		"0"
	"smart_ammo_npc_targets_must_be_tracked"		"0"
	"smart_ammo_tracker_status_effects"				"0"
	"smart_ammo_tracked_targets_check_visibility"	"0"
	"threat_scope_enabled"			"1"

	// Bodygroups:
	"bodygroup1_name"	"scope_dcom"
	"bodygroup1_set"	"1"
	"bodygroup2_name"	"scope_zoom"
	"bodygroup2_set"	"0"
	"bodygroup3_name"	"ammo"
	"bodygroup3_set"	"1"
	"bodygroup4_name"	"scope_outline"
	"bodygroup4_set"	"0"
	"bodygroup5_name"	"scope_oracle"
	"bodygroup5_set"	"0"
	"bodygroup6_name"	"proscreen"
	"bodygroup6_set"	"0"
	// "bodygroup7_name"	"suppressor_sq_lg"
	// "bodygroup7_set"	"0"

	"bodygroup_ads_scope_name"	"ads_scopes"
	"bodygroup_ads_scope_set"	"3"


	"anim_alt_idleAttack"	"0"

    "clip_bodygroup"						"at_rifle_magazine"
    "clip_bodygroup_index_shown"			"0"
    "clip_bodygroup_index_hidden"			"1"
    "clip_bodygroup_show_for_milestone_0"	"1"
    "clip_bodygroup_show_for_milestone_1"	"0"
    "clip_bodygroup_show_for_milestone_2"	"1"
    "clip_bodygroup_show_for_milestone_3"	"1"
"threat_scope_enabled"			"1"
	"bodygroup_ammo_index_count"			"6"

	Mods
	{
		iron_sights
		{

		}
		scope_4x
		{
			//Use this for Variable Zoom
			"ui7_enable"		"1"

			"bodygroup1_set"	"0"
			"bodygroup2_set"	"0"
			"bodygroup4_set"	"1"
			"bodygroup5_set"	"0"
			"bodygroup_ads_scope_set"	"2"
			"zoom_toggle_lerp_time"					"0.2"
			"zoom_toggle_fov"						"7"
			//"ui6_enable"								"1"
		}
		extended_ammo
		{
			"ammo_stockpile_max"				"90"
			"ammo_clip_size"   					"7"
			"ammo_default_total"				"90"
		}
		stabilizer
		{
			"bodygroup1_set"	"0"
			"bodygroup2_set"	"0"
			"bodygroup4_set"	"0"
			"bodygroup5_set"	"1"
			"bodygroup_ads_scope_set"	"0"

			// "viewdrift_ads_stand_scale_pitch" 				"*0.5"
			// "viewdrift_ads_crouch_scale_pitch"				"*0.5"
			// "viewdrift_ads_air_scale_pitch"   				"*0.5"
			// "viewdrift_ads_air_scale_yaw" 					"*0.5"
			// "viewdrift_ads_stand_scale_yaw"   				"*0.5"
			// "viewdrift_ads_crouch_scale_yaw"  				"*0.5"
			// "viewdrift_ads_speed_pitch"   					"*0.5"
			// "viewdrift_ads_speed_yaw" 						"*0.5"

			"viewmodel_offset_ads"							"0 -2.95 0.31"
			//"viewmodel_offset_lerp_endFrac"					"1"

			"ads_fov_zoomfrac_start"						"0.3"
			"ads_fov_zoomfrac_end"							"0.8"

			"dof_zoom_nearDepthStart"						"7.0"
			"dof_zoom_nearDepthEnd"							"7.2"

			"anim_alt_idleAttack"	"1"
		}
		ricochet
		{
			"bolt_bounce_frac"								"0.7"
			"projectile_damage_reduction_per_bounce"		"0.0"
			"projectile_damages_owner"						"0"
			"projectile_ricochet_max_count"					"2"
		}
        slammer
        {
        }
		enhanced_targeting
		{
			"smart_ammo_search_angle" 				"360"
			"smart_ammo_targeting_time_min"			"0.34"
			"smart_ammo_targeting_time_max"			"0.59"
			"smart_ammo_targeting_time_min_npc"		"0.1"
			"smart_ammo_targeting_time_max_npc"		"0.15"
			"smart_ammo_new_target_delay"			"0.5"
		}
		proto_activeshot
		{
			"smart_ammo_targeting_time_min"					"5.8"
			"smart_ammo_targeting_time_max"					"6.0"
			"smart_ammo_targeting_time_min_npc"				"0.4"
			"smart_ammo_targeting_time_max_npc"				"0.8"

			"smart_ammo_new_target_delay"					"0.5"
			"smart_ammo_active_shot_time"					"5.2"
			"smart_ammo_active_shot_damage_multiplier"		"4.0"
			"smart_ammo_hold_and_reset_after_all_locks"		"0.0"
		}

		proto_tracker //Turned on by default as a test.
		{
			"smart_ammo_player_targets_must_be_tracked"		"1"
			"smart_ammo_allow_search_while_firing"			"1"
			"smart_ammo_allow_ads_lock"						"1"
			"smart_ammo_tracker_status_effects"				"1"
			"smart_ammo_tracked_targets_check_visibility"	"1"
		}
		ads_smaller_lock_on
		{
			"smart_ammo_search_angle" 						"360"
		}
		og_pilot
		{
			"primary_fire_does_not_block_sprint"			"1"
			"ammo_default_total"							"72"
			"ammo_stockpile_max"							"72"
			"ammo_no_remove_from_stockpile"					"1"
			"smart_ammo_search_distance"  					"1400"

			"damage_near_value"   							"*4.0"
			"damage_far_value"								"*4.0"

			"pass_through_depth"							"500"		// Not sure how long a dropship is, probably the biggest entity
			"pass_through_damage_preserved_scale"			"1.0"
		}
		threat_scope
		{
			"bodygroup1_set"	"0"
			"bodygroup2_set"	"1"
			"bodygroup4_set"	"0"
			"bodygroup5_set"	"0"
			"bodygroup_ads_scope_set"	"1"

			"threat_scope_enabled"			"1"
			"threat_scope_bounds_width"		"1.5"
			"threat_scope_bounds_height"	"1.1"
			"threat_scope_zoomfrac_start"	"0.85"
			"viewmodel_offset_ads"			"0 0.5 0"
			dof_zoom_focusArea_horizontal					0.068
			dof_zoom_focusArea_top							0.065
			dof_zoom_focusArea_bottom						-0.046
		}
		pro_screen
		{
			"ui8_enable"		"1"
			"bodygroup6_set"	"1"
		}
		tactical_cdr_on_kill
		{

		}
        pas_fast_reload
        {
            "reload_time"								"*0.7"
            "reload_time_late1"							"*0.7"
            "reloadempty_time"							"*0.7"
            "reloadempty_time_late1"					"*0.7"
        }
		pas_fast_ads
		{
			//Fast ADS
			"zoom_time_in"									"*0.5"
			"zoom_time_out"   								"*0.6"
		}
		pas_fast_swap
		{
			//Fast Swap
			"fast_swap_to"									"1"
		}
		burn_mod_sniper
		{
			"is_burn_mod"		"1"
			//FX
			"fx_muzzle_flash_view"							"wpn_muzzleflash_snp_hmn_FP_burn"
			"fx_muzzle_flash_world"							"wpn_muzzleflash_snp_hmn_burn"
			"projectile_trail_effect_0" 					"weapon_kraber_projectile_burn"
			"impact_effect_table"		 					"titan_bullet_elec"

			"damage_near_value"   							"450"
			"damage_far_value"								"450"
			"damage_near_value_titanarmor"					"580"
			"damage_far_value_titanarmor" 					"580"
		}
        pve_elite
        {
            //"ammo_stockpile_max"				"90"
            //"ammo_clip_size"   					"7"
            //"ammo_default_total"				"90"
            //"reload_time"						"0.1"
            //"fire_rate"   						"0.1"
            "npc_damage_near_value"   						"70"
            "npc_damage_far_value"							"70"
        }
	}

	"ui1_enable"		"1"
	UiData1
	{
		"ui"									"ui/kraber_ammo_counter"
		"mesh"							"models/weapons/attachments/kraber_rui_lower"
		Args
		{
			vis						player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
		}
	}

	"ui6_enable"		"0"
	UiData6
	{
		"ui"							"ui/red_dot_basic"
		"mesh"						"models/weapons/attachments/sniper_scope_rui_upper"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
			clipCount					weapon_stockpileClipCount
		}
	}

	"ui7_enable"		"0"
	UiData7
	{
		"ui"							"ui/variable_zoom_crosshair"
		"mesh"						"models/weapons/attachments/attach_scope_ads_2_crosshair"
		Args
		{
			vis							player_zoomfrac
			ammo						weapon_ammo
			clipSize					weapon_clipSize
			clipCount					weapon_stockpileClipCount
		}
	}

	"ui8_enable"		"0"
	UiData8
	{
		"ui"									"ui/pro_screen_panel"
		"mesh"							"models/weapons/attachments/pro_screen_rui_upper"
		Args
		{
			proValue							proscreen_int0
			proOwnedByPlayer			proscreen_owner_is_player
		}
	}

	active_crosshair_count				"1"
	rui_crosshair_index					"0"

	RUI_CrosshairData
	{
		DefaultArgs
		{
			adjustedSpread				weapon_spread
			adsFrac 					player_zoomFrac
			isSprinting					player_is_sprinting
			isReloading					weapon_is_reloading
			teamColor					crosshair_team_color
			isAmped						weapon_is_amped
			crosshairMovementX          crosshair_movement_x
			crosshairMovementY          crosshair_movement_y
		}

		Crosshair_1
		{
			"ui"						"ui/crosshair_wingman_n"
			"base_spread"				"10"
			Args
			{
				isFiring				weapon_is_firing
			}
		}
	}
}
// smart aim arguments
"red_crosshair_range" 							"150000"
"smart_ammo_search_distance"  					"10000000"
"smart_ammo_max_targeted_burst"					"12"
"smart_ammo_targeting_time_min"					"0.00"
"smart_ammo_targeting_time_max"					"0.00"
"smart_ammo_targeting_time_min_npc"				"0.1"
"smart_ammo_targeting_time_max_npc"				"0.1"
"zoom_time_in"									"0.1"
"zoom_time_out"   								"0.1"
"smart_ammo_allow_search_while_firing"			"1"
"smart_ammo_allow_ads_lock"						"1" // "0" is default
"smart_ammo_search_npcs"						"0"
"smart_ammo_search_players"						"1"
"smart_ammo_search_projectiles"					"0"
"smart_ammo_titans_block_los"					"0"
"smart_ammo_track_cloaked_targets"				"1"
"smart_ammo_targeting_time_modifier_projectile_owner"	"0.00"
"smart_ammo_target_max_locks_normal"			"10"	// divide health by damage near
"smart_ammo_target_npc_lock_factor"				"10"		// smart pistol does head shots at 2x damage
"smart_ammo_new_target_delay"					"0.1"
"smart_ammo_draw_acquisition_lines"				"0"
"smart_ammo_hud_lock_style"						"pilot_pistol"
"smart_ammo_hud_type" 							"smart_pistol"
"smart_ammo_target_confirmed_sound"				"Weapon_SmartPistol_PilotLocked"
"smart_ammo_target_confirming_sound"			"Weapon_SmartPistol_PilotLocked"
"smart_ammo_looping_sound_acquiring"			"Weapon_SmartPistol_TargetLockingLoop"
"smart_ammo_lock_type"							"small"
"smart_ammo_alert_npc_fraction"					"0.1" 	// unaware since lock on fraction will not go above 1
"smart_ammo_allow_hip_fire_lock"				"1"
"smart_ammo_lock_effect_3p"						"P_smartpistol_lockon"
"smart_ammo_lock_effect_attachment"				"muzzle_flash"
"smart_ammo_player_targets_must_be_tracked"		"0"
"smart_ammo_npc_targets_must_be_tracked"		"0"
"smart_ammo_tracker_status_effects"				"0"
"smart_ammo_tracked_targets_check_visibility"	"0"
"threat_scope_enabled"			"1"
"pilot_base"
{
	raceOrSex					"race_human_male" //TODO: Get code work for this

	"global"
	{
		///////////////////////////////////////////////////
		// other pilot set files overwrite these defaults
		///////////////////////////////////////////////////
		bodymodel			"models/humans/pilots/pilot_medium_reaper_m.mdl"
		armsmodel			"models/weapons/arms/pov_pilot_medium_reaper_m.mdl"
		cockpitmodel		"models/weapons/arms/human_pov_cockpit.mdl"
		///////////////////////////////////////////////////
		//
		///////////////////////////////////////////////////

		ui_targetinfo				"ui/targetinfo_pilot"

		weaponClass					"human"
		automantle					1
		healthpacks					1
		jump						1
		dodge						0
		slide						1
		fov 90
		viewmodelfov 90
		health						100
		healthShield				200
		mechanical					0
		ArmorType					normal
		leech_range					64
		impactSpeed					380
		pitchOffsetScale			9.2
		doFaceAnim					true
		aiEnemy_priority			10
		footstepImpactTable			"pilot_foostep"
		landingImpactTable			"pilot_landing"
		slideEffectTable			"pilot_slide"
		sound_slide_prefix			"pilotslide"
		deathcamRotateSpeed			8
		viewmodelDuckOffset			-0.75
		viewPunchSpring				punch_pilot

		headshotFX 					"P_headshot_pilot"

		viewkickFallDistMin			10
		viewkickFallDistMax			70
		viewkickFallDistMaxScale	12

		slidedecel					50
		slidevelocitydecay			0.7

		sprintViewOffset			-6.0
		sprintStartDelay			0.2
		sprintStartDuration			0.8
		sprintStartFastDuration		0.2
		sprintEndDuration			0.15
		sprinttiltMaxRoll			2

		passThroughThickness		32

		context_action_can_melee	1
		context_action_can_use		1

		aimAngleBackwardEnd			-120
		aimAngleForwardStart		-60
		aimAngleForwardEnd			60
		aimAngleBackwardStart		120

		aimassist_adspull_centerAttachmentName		"CHESTFOCUS"
		aimassist_adspull_centerRadius				11.0
		aimassist_adspull_headshotAttachmentName	"HEADSHOT"
		aimassist_adspull_headshotRadius			13.0

		chasecamDistanceMax			75
		chasecamMaxOrbitDepth		20
		chasecamMaxPitchUp			-45
		chasecamOffsetUp			0
		chasecamOffsetRight			18
		chasecamOffsetForward		0

		melee_cone_trace_range		400
		melee_cone_trace_angle		40

		rumbleOnJump				"rumble_pilotOnJump"
		rumbleOnDoubleJump			"rumble_pilotOnDoubleJump"
		rumbleOnWallrunStart		"rumble_pilotOnWallrunStart"
		rumbleOnWallrunTimeout		"rumble_pilotOnWallrunTimeout"
		rumbleOnWallHangStart		"rumble_pilotOnWallHangStart"
		rumbleOnLandingSoft			"rumble_pilotOnLandingSoft"
		rumbleOnLandingHard			"rumble_pilotOnLandingHard"
		rumbleOnSlideBegin			"rumble_pilotOnSlideBegin"
		rumbleOnZiplineAttach		"rumble_pilotOnZiplineAttach"
		rumbleOnZiplineDetach		"rumble_pilotOnZiplineDetach"

		cockpitSwayTurnAngleFactor		-0.6
		cockpitSwayTurnAngleRollFactor	0.2
		cockpitSwayTurnOriginFactor		-0.15
		cockpitSwayMoveAngleFactor		-0.4
		cockpitSwayMoveAngleRollFactor	-0.2
		cockpitSwayMoveOriginFactor		-0.15
		cockpitSwayGain					1.0

		grapple_detachLengthMin				33
		grapple_detachLengthMax				50
		grapple_detachAwaySpeed				500
		grapple_gravityFracMin				0.25
		grapple_gravityFracMax				0.7
		grapple_detachVerticalBoost			200
		grapple_detachVerticalMaxSpeed		200
		grapple_detachSpeedLoss				300
		grapple_detachSpeedLossMin			430
		grapple_detachLowSpeedThreshold		250
		grapple_detachLowSpeedTime			1.5
		grapple_detachLowSpeedWallTime		1.2
		grapple_detachLowSpeedGroundTime	0.7
		grapple_impactVerticalBoost			300
		grapple_impactVerticalMaxSpeed		300
		grapple_power_regen_delay			3
		grapple_power_regen_rate			3
		grapple_airSpeedMax					420
		grapple_airAccel					650

		//deathcamDistanceMin 75
		//deathcamMinHeight 5
		//deathcamExtraHeight 10

		deathcamDistanceMin			170
		deathcamDistanceMax			250
		deathcamDistanceGrowRate	70
		deathcamExtraHeight			40
		deathcamMinHeight			30
		deathcamRotateSpeed			8

		physicsIgnoreBelowMass	10
		physicsSoftBelowMass	100
		physicsPushMassLimit	5000
		physicsPushSpeedLimit	50

		//damageImpulseScaleZ		2.5
		//damageImpulseSpeedZLimit		600
		damageImpulseSpeedBoostLimit	1000

		gibModel0						"models/gibs/human_gibs.mdl"

		sound_superJump					"Player.SuperJump"
		sound_superJumpFail				"Player.SuperJumpFail"
		sound_dodge_1p					""
		sound_dodge_3p					""
		sound_dodgeFail					""
		sound_groundImpact				"Pilot.GroundImpact"
		sound_wallrunImpact				"wallrun_impact"
		sound_wallrunSlip				""
		sound_wallrunFall				""
		sound_wallHangStart				"Default.WallCling_Attach"
		sound_wallHangComplete			"Pilot_CrouchStand_1P"
		sound_wallHangFall				"Default.WallCling_Detach"

		sound_freefall_start_1p			"Jumpjet_Freefall_Start_1P"
		sound_freefall_start_3p			"Jumpjet_Freefall_Start_3P"
		sound_freefall_body_1p			"Jumpjet_Freefall_Body_1P"
		sound_freefall_body_3p			"Jumpjet_Freefall_Body_3P"
		sound_freefall_finish_1p		"Jumpjet_Freefall_End_1P"
		sound_freefall_finish_3p		"Jumpjet_Freefall_End_3P"

		sound_jumpjet_jump_start_1p		"Jumpjet_Jump_Start_1P"
		sound_jumpjet_jump_start_3p		"Jumpjet_Jump_Start_3P"
		sound_jumpjet_jump_body_1p		"Jumpjet_Jump_Body_1P"
		sound_jumpjet_jump_body_3p		"Jumpjet_Jump_Body_3P"
		sound_jumpjet_jump_finish_1p	"Jumpjet_Jump_End_1P"
		sound_jumpjet_jump_finish_3p	"Jumpjet_Jump_End_3P"

		sound_jumpjet_jet_start_1p		"Jumpjet_Jet_Start_1P"
		sound_jumpjet_jet_start_3p		"Jumpjet_Jet_Start_3P"
		sound_jumpjet_jet_body_1p		"Jumpjet_Jet_Body_1P"
		sound_jumpjet_jet_body_3p		"Jumpjet_Jet_Body_3P"
		sound_jumpjet_jet_finish_1p		"Jumpjet_Jet_End_1P"
		sound_jumpjet_jet_finish_3p		"Jumpjet_Jet_End_3P"

		sound_jumpjet_wallrun_start_1p	"Jumpjet_Wallrun_Start_1P"
		sound_jumpjet_wallrun_start_3p	"Jumpjet_Wallrun_Start_3P"
		sound_jumpjet_wallrun_body_1p	"Jumpjet_Wallrun_Body_1P"
		sound_jumpjet_wallrun_body_3p	"Jumpjet_Wallrun_Body_3P"
		sound_jumpjet_wallrun_finish_1p	"Jumpjet_Wallrun_End_1P"
		sound_jumpjet_wallrun_finish_3p	"Jumpjet_Wallrun_End_3P"

		sound_pain_layer1_loop 			"Pilot_Wounded_Loop_1P"
		sound_pain_layer1_end  			"Pilot_WoundedLoop_End_1P"
		sound_pain_layer2_start 		"Pilot_Critical_Breath_Start_1P"
		sound_pain_layer2_loop 			"Pilot_Critical_Drone_Loop_1P"
		sound_pain_layer3_loop			"Pilot_Critical_Breath_Loop_1P"
		sound_pain_layer3_end 			"Pilot_Wounded_BreathLoop_End_1P"

		wallrun_hangTimeLimit		4
		wallrun_timeLimit			4.0

		ClassMods
		{
			pas_stealth_movement
			{
			}

			pas_wall_runner
			{
				wallrun_timeLimit		"2.5++"
				wallrun_hangTimeLimit	"21++"
			}

			pas_pilot_hardcore_settings
			{
				health 50
			}

			triple_jump
			{
			}
		}
	}
	"crouch"
	{
		footstepWalkSoundRadius	0
		footstepRunSoundRadius	0
		footstepMinSpeed		80
		footstepInterval 		450

		viewheight 				"0 0 38"
		firstpersonproxyoffset 	"0 0 -38"
		hull_min 				"-16 -16 0"
		hull_max 				"16 16 47"
	}

	"dead"
	{
		viewheight 				"0 0 14"
	}

	"observe"
	{
		hull_min 				"-10 -10 -10"
		hull_max 				"10 10 10"
	}

	"stand"
	{
		footstepWalkSoundRadius	100
		footstepRunSoundRadius	300
		footstepMinSpeed		30
		footstepInterval		400
		footstepIntervalSprint	275

		viewheight 				"0 0 60"
		firstpersonproxyoffset 	"0 0 -60"
		hull_min 				"-16 -16 0"
		hull_max 				"16 16 72"
	}
}

global function ScoreShared_Init

global function ScoreEvent_FromId
global function ScoreEventForTitanEntityKilled
#if SERVER
	global function ScoreEventForMethodOfDeath
	global function ScoreEventForNPCKilled
#endif

global function GetScoreEvent

global function ScoreEvent_Enable
global function ScoreEvent_Disable
global function ScoreEvent_IsEnabled
global function ScoreEvent_GetEventName
global function ScoreEvent_SetGameModeRelevant
global function ScoreEvent_HasDisplayType
global function ScoreEvent_GetDisplayType
global function ScoreEvent_SetDisplayType
global function ScoreEvent_GetMedalIcon
global function ScoreEvent_SetMedalIcon
global function ScoreEvent_GetEventId
global function ScoreEvent_SetPointValue
global function ScoreEvent_GetPointValue
global function ScoreEvent_SetXPValue
global function ScoreEvent_GetXPValue
global function ScoreEvent_SetXPValueTitan
global function ScoreEvent_GetXPValueTitan
global function ScoreEvent_SetXPValueWeapon
global function ScoreEvent_GetXPValueWeapon
global function ScoreEvent_SetXPValueFaction
global function ScoreEvent_GetXPValueFaction
global function ScoreEvent_SetSplashText
global function ScoreEvent_GetSplashText
global function ScoreEvent_SetMedalText
global function ScoreEvent_GetMedalText
global function ScoreEvent_SetXPType
global function ScoreEvent_GetXPType
global function ScoreEvent_SetPointType
global function ScoreEvent_GetPointType
global function ScoreEvent_SetConversation
global function ScoreEvent_GetConversation
global function ScoreEvent_GetPriority
global function ScoreEvent_HasConversation
global function ScoreEvent_GetConversationDelay
global function ScoreEvent_SetConversationDelay
global function ScoreEvent_GetBurnPointValue
global function ScoreEvent_SetBurnPointValue
global function ScoreEvent_GetBurnMeterChallengeType
global function ScoreEvent_IsEarnOverridden

global function SetScoreEventOverrideFunc

global enum eEventDisplayType
{
	HIDDEN		= 1 << 0,
	CENTER 		= 1 << 1,
	MEDAL		= 1 << 2,
	CALLINGCARD = 1 << 3,
	ATTRITION	= 1 << 4,
	BIG			= 1 << 5,
	GAMEMODE	= 1 << 6,
	CHALLENGE	= 1 << 7,
	MEDAL_FORCED= 1 << 8,
	SHOW_SCORE	= 1 << 9
}

global struct ScoreEvent
{
	int		eventId = -1

	bool	enabled = true

	string	name = ""
	string 	splashText = ""
	string	medalText = ""
	int		pointValue
	int		xpValue
	int		xpValueTitan
	int		xpValueWeapon
	int		xpValueFaction
	int		xpType
	int		pointType
	int		displayType
	asset	medalIcon = $""

	string	conversation = ""
	int		conversationPriority

	float	conversationDelay = 0.0

	int		burnPointValue = 0

	bool 	eventOverridden = false
	float 	earnMeterOwnValue = 0.00
	float 	earnMeterEarnValue = 0.00
	float 	coreMeterScalar = 1.00 //Decouples the core meter earn rate from titan build rate.
}

struct
{
	table<string, ScoreEvent> scoreEvents
	array<string> scoreEventIdToName
} file

void function ScoreShared_Init()
{
	level.scoreCustomColors <- {}

	InitScoreEvents()

	AddCallback_EntitiesDidLoad( EntitiesDidLoad )
}

void function EntitiesDidLoad()
{
#if SERVER
	if ( svGlobal.scoreEventOverrideFunc != null )
		svGlobal.scoreEventOverrideFunc()
#elseif CLIENT
	if ( clGlobal.scoreEventOverrideFunc != null )
		clGlobal.scoreEventOverrideFunc()
#endif
}

// If you're modifying more than just the pointValue, this should be called on the client as well
void function SetScoreEventOverrideFunc( void functionref() func )
{
#if SERVER
	svGlobal.scoreEventOverrideFunc = func
#elseif CLIENT
	clGlobal.scoreEventOverrideFunc = func
#endif
}

void function InitScoreEvents()
{
	var dataTable = GetDataTable( $"datatable/score_events.rpak" )
	int numRows = GetDatatableRowCount( dataTable )

	for ( int i = 0; i < numRows; i++ )
	{
		int column = 0

		ScoreEvent event

		event.name = GetDataTableString( dataTable, i, GetDataTableColumnByName( dataTable, "name" ) )
		event.eventId = file.scoreEvents.len()

		event.splashText = GetDataTableString( dataTable, i, GetDataTableColumnByName( dataTable, "splashText" ) )

		event.medalText = GetDataTableString( dataTable, i, GetDataTableColumnByName( dataTable, "medalText" ) )

		event.pointValue = GetIntFromString( GetDataTableString( dataTable, i, GetDataTableColumnByName( dataTable, "pointValue" ) ) )
		event.burnPointValue = GetIntFromString( GetDataTableString( dataTable, i, GetDataTableColumnByName( dataTable, "burnPointValue" ) ) )

		event.pointType = 0
		string pointTypeStr = GetDataTableString( dataTable, i, GetDataTableColumnByName( dataTable, "pointType" ) )
		if ( pointTypeStr != "" )
			event.pointType = scoreEventPointType[ pointTypeStr ]

		event.xpValue = GetIntFromString( GetDataTableString( dataTable, i, GetDataTableColumnByName( dataTable, "xpValue" ) ) )
		event.xpValueTitan = GetIntFromString( GetDataTableString( dataTable, i, GetDataTableColumnByName( dataTable, "xpValueTitan" ) ) )
		event.xpValueWeapon = GetIntFromString( GetDataTableString( dataTable, i, GetDataTableColumnByName( dataTable, "xpValueWeapon" ) ) )
		event.xpValueFaction = GetIntFromString( GetDataTableString( dataTable, i, GetDataTableColumnByName( dataTable, "xpValueFaction" ) ) )

		event.xpType = 0
		string xpTypeStr = GetDataTableString( dataTable, i, GetDataTableColumnByName( dataTable, "xpType" ) )
		if ( xpTypeStr != "" )
			event.xpType = XP_TYPE[ xpTypeStr ]

		string displayTypeStr = GetDataTableString( dataTable, i, GetDataTableColumnByName( dataTable, "displayType" ) )
		if ( displayTypeStr != "" )
		{
			array<string> displayTypeSplit = split( displayTypeStr, " " )
			foreach ( Type in displayTypeSplit )
			{
				event.displayType = event.displayType | eEventDisplayType[ Type ]
			}
		}

		event.medalIcon = GetDataTableAsset( dataTable, i, GetDataTableColumnByName( dataTable, "medalIcon" ) )

		event.conversation = GetDataTableString( dataTable, i, GetDataTableColumnByName( dataTable, "conversation" ) )
		bool scaleScoreForAutoTitan = GetDataTableBool( dataTable, i, GetDataTableColumnByName( dataTable, "scaleScoreForAutoTitan" ) )

		if ( scaleScoreForAutoTitan )
			event.pointValue = ScaleScoreForAutoTitan( event.pointValue )

		file.scoreEventIdToName.append( event.name )
		file.scoreEvents[ event.name ] <- event

		Assert( file.scoreEventIdToName[ event.eventId ] == event.name )
	}

	// JFS: fix since we can't modify without client patch
	{
		ScoreEvent_SetXPValueTitan( GetScoreEvent( "KillAutoTitan" ), 1 )
		ScoreEvent_SetXPValueTitan( GetScoreEvent( "TitanKillTitan" ), 1 )
		ScoreEvent_SetXPValueTitan( GetScoreEvent( "KillTitan" ), 1 )
		ScoreEvent_SetXPValueTitan( GetScoreEvent( "EliminateTitan" ), 1 )
		ScoreEvent_SetXPValueTitan( GetScoreEvent( "EliminateAutoTitan" ), 1 )
	}
}

ScoreEvent function GetScoreEvent( string eventName )
{
	return file.scoreEvents[eventName]
}

void function ScoreEvent_Enable( ScoreEvent scoreEvent )
{
	scoreEvent.enabled = true
}

void function ScoreEvent_Disable( ScoreEvent scoreEvent )
{
	scoreEvent.enabled = false
}

bool function ScoreEvent_IsEnabled( ScoreEvent scoreEvent )
{
	return scoreEvent.enabled
}

string function ScoreEvent_GetEventName( ScoreEvent scoreEvent )
{
	return scoreEvent.name
}

void function ScoreEvent_SetGameModeRelevant( ScoreEvent scoreEvent )
{
	scoreEvent.displayType = scoreEvent.displayType | eEventDisplayType.GAMEMODE
}

bool function ScoreEvent_HasDisplayType( ScoreEvent scoreEvent, int displayType )
{
	return ( scoreEvent.displayType & displayType ) != 0
}

int function ScoreEvent_GetDisplayType( ScoreEvent scoreEvent )
{
	return scoreEvent.displayType
}

void function ScoreEvent_SetMedalIcon( ScoreEvent scoreEvent,  asset medalIcon )
{
	scoreEvent.medalIcon = medalIcon
}

asset function ScoreEvent_GetMedalIcon( ScoreEvent scoreEvent )
{
	return scoreEvent.medalIcon
}

bool function ScoreEvent_IsEarnOverridden( ScoreEvent scoreEvent )
{
	return scoreEvent.eventOverridden
}

void function ScoreEvent_SetDisplayType( ScoreEvent scoreEvent,  int displayType )
{
	scoreEvent.displayType = displayType
}

int function ScoreEvent_GetEventId( ScoreEvent scoreEvent )
{
	return scoreEvent.eventId
}

void function ScoreEvent_SetPointValue( ScoreEvent scoreEvent, int value )
{
	scoreEvent.pointValue = value
}

int function ScoreEvent_GetPointValue( ScoreEvent scoreEvent )
{
	return scoreEvent.pointValue
}

void function ScoreEvent_SetXPValue( ScoreEvent scoreEvent, int value )
{
	scoreEvent.xpValue = value
}

int function ScoreEvent_GetXPValue( ScoreEvent scoreEvent )
{
	return scoreEvent.xpValue
}

void function ScoreEvent_SetXPValueTitan( ScoreEvent scoreEvent, int value )
{
	scoreEvent.xpValueTitan = value
}

int function ScoreEvent_GetXPValueTitan( ScoreEvent scoreEvent )
{
	return scoreEvent.xpValueTitan
}

void function ScoreEvent_SetXPValueWeapon( ScoreEvent scoreEvent, int value )
{
	scoreEvent.xpValueWeapon = value
}

int function ScoreEvent_GetXPValueWeapon( ScoreEvent scoreEvent )
{
	return scoreEvent.xpValueWeapon
}

void function ScoreEvent_SetXPValueFaction( ScoreEvent scoreEvent, int value )
{
	scoreEvent.xpValueFaction = value
}

int function ScoreEvent_GetXPValueFaction( ScoreEvent scoreEvent )
{
	return scoreEvent.xpValueFaction
}

void function ScoreEvent_SetSplashText( ScoreEvent scoreEvent, string text )
{
	scoreEvent.splashText = text
}

string function ScoreEvent_GetSplashText( ScoreEvent scoreEvent )
{
	return scoreEvent.splashText
}

void function ScoreEvent_SetMedalText( ScoreEvent scoreEvent, string text )
{
	scoreEvent.medalText = text
}

string function ScoreEvent_GetMedalText( ScoreEvent scoreEvent )
{
	return scoreEvent.medalText
}

void function ScoreEvent_SetXPType( ScoreEvent scoreEvent, int varType )
{
	Assert( varType >= 0 && varType < XP_TYPE._NUM_TYPES )
	scoreEvent.xpType = varType
}

int function ScoreEvent_GetXPType( ScoreEvent scoreEvent )
{
	return scoreEvent.xpType
}

void function ScoreEvent_SetPointType( ScoreEvent scoreEvent, int value )
{
	scoreEvent.pointType = value
}

int function ScoreEvent_GetPointType( ScoreEvent scoreEvent )
{
	return scoreEvent.pointType
}

void function ScoreEvent_SetConversation( ScoreEvent scoreEvent, string name, int priority )
{
	scoreEvent.conversation = name
	scoreEvent.conversationPriority = priority
}

string function ScoreEvent_GetConversation( ScoreEvent scoreEvent )
{
	return scoreEvent.conversation
}

int function ScoreEvent_GetPriority( ScoreEvent scoreEvent )
{
	return scoreEvent.conversationPriority
}

bool function ScoreEvent_HasConversation( ScoreEvent scoreEvent )
{
	return scoreEvent.conversation != ""
}

float function ScoreEvent_GetConversationDelay( ScoreEvent scoreEvent )
{
	return scoreEvent.conversationDelay
}

void function ScoreEvent_SetConversationDelay( ScoreEvent scoreEvent, float value )
{
	scoreEvent.conversationDelay = value
}

int function ScoreEvent_GetBurnPointValue( ScoreEvent scoreEvent )
{
	return scoreEvent.burnPointValue
}

void function ScoreEvent_SetBurnPointValue( ScoreEvent scoreEvent, int value )
{
	scoreEvent.burnPointValue = value
}

string function ScoreEvent_GetBurnMeterChallengeType( ScoreEvent scoreEvent )
{
	return ""
//	return this.burnMeterChallengeType
}

ScoreEvent function ScoreEvent_FromId( int id )
{
	string eventName = file.scoreEventIdToName[id]
	return file.scoreEvents[eventName]
}

string function ScoreEventForTitanEntityKilled( entity titan, entity inflictor, int damageSourceId )
{
	inflictor = InflictorOwner( inflictor )

	// bool electrocuted = damageSourceId == eDamageSourceId.mp_titanability_smoke

	// // hack: shouldn't need a HasSoul check, something changed with Mo's recent titan melee changes
	// if ( titan.IsTitan() && titan.IsNPC() && HasSoul( titan ) && !titan.GetTitanSoul().IsEjecting() && inflictor.IsPlayer() )
	// {
	// 	if ( IsPetTitan( titan ) )
	// 		return electrocuted ? "ElectrocuteAutoTitan" : "KillTitan_Auto_Pilot"
	// 	else
	// 		return electrocuted ? "ElectrocuteTitan" : "KillTitan"
	// }
	// else if ( IsValid( inflictor ) )
	// {
	// 	if ( IsTitanNPC( inflictor ) )
	// 		return "Auto_Pilot_KillTitan"

	// 	if ( IsPlayerControlledSpectre( inflictor ) )
	// 		return "Flipped_Spectre_KillTitan"

	// 	if ( IsPlayerControlledTurret( inflictor ) )
	// 	{
	// 		if ( IsAlive( inflictor.GetParent() ) )
	// 			return "AerialEscort_KillTitan"
	// 		else
	// 			return "AutoTurret_KillTitan"
	// 	}
	// }

	// if ( electrocuted )
	// 	return "ElectrocuteTitan"

	// if ( damageSourceId == eDamageSourceId.rodeo )
	// 	return "Rodeo"

	// if ( damageSourceId == eDamageSourceId.rodeo_forced_titan_eject )
	// 	return "RodeoForceEject"

	//Default case
	return "KillTitan"
}

int function ScaleScoreForAutoTitan( int eventPoints )
{
	int score = int( RoundToNearestMultiplier( eventPoints * POINTVALUE_AUTOTITAN_MULTIPLIER, 5.0 ) )

	if ( score < 10 )
		score = 10

	return score
}

#if SERVER
string function ScoreEventForMethodOfDeath( entity player, var damageInfo )
{
	string scoreEvent
	scoreEvent = "KillPilot"
	// entity inflictor = DamageInfo_GetInflictor( damageInfo )
	// inflictor = InflictorOwner( inflictor )

	// if ( inflictor )
	// {
	// 	if ( IsTitanNPC( inflictor ) )
	// 		return "Auto_Pilot_KillPilot"

	// 	if ( IsPlayerControlledSpectre( inflictor ) )
	// 		return "Flipped_Spectre_KillPilot"

	// 	if ( IsPlayerControlledTurret( inflictor ) )
	// 	{
	// 		if ( IsAlive( inflictor.GetParent() ) )
	// 			return "AerialEscort_KillPilot"
	// 		else
	// 			return "AutoTurret_KillPilot"
	// 	}
	// }

	// int damageSourceId = DamageInfo_GetDamageSourceIdentifier( damageInfo )
	// if ( damageSourceId == eDamageSourceId.mp_titanability_smoke )
	// {
	// 	return "ElectrocutePilot"
	// }

	// if ( damageSourceId == eDamageSourceId.human_melee )
	// {
	// 	return  "MeleeHumanAttackVsPilot"
	// }

	// if ( damageSourceId == eDamageSourceId.human_execution )
	// {
	// 	return  "MeleeHumanExecutionVsPilot"
	// }

	// if ( damageSourceId == eDamageSourceId.eviscerate )
	// {
	// 	return "EviscerateVsPilot"
	// }

	// if ( damageSourceId == eDamageSourceId.titan_execution )
	// {
	// 	return  "TitanMeleeExecution"
	// }

	// if ( damageSourceId == eDamageSourceId.wall_smash)
	// {
	// 	scoreEvent =  "TitanWallSmashPilot"
	// }

	// if ( IsTitanCrushDamage( damageInfo ) )
	// {
	// 	return "TitanStepCrushPilot"
	// }

	return scoreEvent
}

string function ScoreEventForNPCKilled( entity npc, var damageInfo )
{
	string scoreEvent
	entity inflictor = DamageInfo_GetInflictor( damageInfo )
	inflictor = InflictorOwner( inflictor )

	int damageSourceId = DamageInfo_GetDamageSourceIdentifier( damageInfo )

	string classname = npc.GetClassName()
	switch ( classname )
	{
		case "npc_titan":
			return "KillNPCTitan"

		case "npc_super_spectre":
			return "KillSuperSpectre"

		case "npc_prowler":
			return "KillProwler"

		case "npc_drone":
			if ( GetDroneType( npc ) == "drone_type_marvin" )
				return ""
			return "KillDrone"

		case "npc_turret_mega":
			return "KillHeavyTurret"

		case "npc_turret_sentry":
			return "KillLightTurret"

		case "npc_dropship":
			if ( IsEvacDropship( npc ) )
				return "KillDropship" // this is actually "evac denied"
			else
				return ""

		case "npc_stalker":
			return "KillStalker"

		case "npc_spectre":
			scoreEvent = "KillSpectre"

			if ( npc.GetBossPlayer() != null )
				scoreEvent = "KillHackedSpectre"
			/*
			if ( inflictor )
			{
				if ( IsTitanCrushDamage( damageInfo ) )
				{
					return "TitanStepCrush_"+ scoreEvent
				}

				if ( IsTitanNPC( inflictor ) )
				{
					return  "Auto_Pilot_" + scoreEvent
				}

				if ( IsPlayerControlledSpectre( inflictor) )
				{
					return  "Flipped_Spectre_" + scoreEvent
				}

				if ( IsPlayerControlledTurret( inflictor ) )
				{
					return "AutoTurret_" + scoreEvent
				}

				if ( damageSourceId == eDamageSourceId.mp_titanability_smoke )
				{
					return "ElectrocuteSpectre"
				}

				if ( damageSourceId == eDamageSourceId.human_execution )
				{
					return  "MeleeHumanExecutionVsSpectre"
				}

				if ( damageSourceId == eDamageSourceId.human_melee )
				{
					return  "MeleeHumanAttackVsSpectre"
				}

				if ( damageSourceId == eDamageSourceId.eviscerate )
				{
					return  "EviscerateVsSpectre"
				}
			}
			*/

			return scoreEvent
	}

	if ( npc.GetAIClass() == AIC_HUMAN )
	{
		scoreEvent = "KillGrunt"
		/*
		if ( inflictor )
		{
			if ( IsTitanCrushDamage( damageInfo ) )
			{
				return "TitanStepCrush_"+ scoreEvent
			}

			if ( IsTitanNPC( inflictor ) )
			{
				return "Auto_Pilot_" + scoreEvent
			}

			if ( IsPlayerControlledSpectre( inflictor ) )
			{
				return  "Flipped_Spectre_" + scoreEvent
			}

			if ( IsPlayerControlledTurret( inflictor ) )
			{
				if ( IsAlive( inflictor.GetParent() ) )
					return "AerialEscort_" + scoreEvent
				else
					return "AutoTurret_" + scoreEvent
			}

			if ( damageSourceId == eDamageSourceId.mp_titanability_smoke )
			{
				scoreEvent = "ElectrocuteFireteamAI"
				if ( npc.GetTeam() == TEAM_IMC )
					scoreEvent = "Electrocute_IMC_Soldier"
			}

			if ( damageSourceId == eDamageSourceId.human_melee )
			{
				scoreEvent =  "MeleeHumanAttackVsGrunt"
				if ( npc.GetTeam() == TEAM_IMC )
					scoreEvent = "MeleeHumanAttackVs_IMC_Soldier"
			}

			if ( damageSourceId == eDamageSourceId.human_execution )
			{
				scoreEvent =  "MeleeHumanExecutionVsGrunt"
				if ( npc.GetTeam() == TEAM_IMC )
					scoreEvent = "MeleeHumanExecutionVs_IMC_Soldier"
			}

			if ( damageSourceId == eDamageSourceId.eviscerate )
			{
				scoreEvent =  "EviscerateVsGrunt"
				if ( npc.GetTeam() == TEAM_IMC )
					scoreEvent = "EviscerateVs_IMC_Soldier"
			}
		}
		*/
		return scoreEvent
	}

	unreachable
}
#endif // SERVERuntyped

globalize_all_functions

const DEV_DRAWALLTRIGGERS = 0

global const CHARGE_TOOL = "sp_weapon_arc_tool"

global const TRIG_FLAG_NONE				= 0
global const TRIG_FLAG_PLAYERONLY		= 0x0001
global const TRIG_FLAG_NPCONLY			= 0x0002
global const TRIG_FLAG_NOCONTEXTBUSY	= 0x0004
global const TRIG_FLAG_ONCE				= 0x0008
global const TRIG_FLAG_EXCLUSIVE		= 0x0010 // can only be triggered by entities passed in at creation
global const TRIG_FLAG_DEVDRAW			= 0x0020
global const TRIG_FLAG_START_DISABLED	= 0x0040
global const TRIG_FLAG_NO_PHASE_SHIFT	= 0x0080
global const float MAP_EXTENTS = 128*128
/*
const TRIG_FLAG_	= 0x0080
const TRIG_FLAG_	= 0x0100*/

global const TRIGGER_INTERNAL_SIGNAL = "OnTrigger"

global const CALCULATE_SEQUENCE_BLEND_TIME = -1.0

global struct ArrayDistanceEntry
{
	float distanceSqr
	entity ent
	vector origin
}

global struct GravityLandData
{
	array<vector> points
	TraceResults& traceResults
	float elapsedTime
}

global struct FirstPersonSequenceStruct
{
	string firstPersonAnim = ""
	string thirdPersonAnim = ""
	string firstPersonAnimIdle = ""
	string thirdPersonAnimIdle = ""
	string relativeAnim = ""
	string attachment = ""
	bool teleport = false
	bool noParent = false
	float blendTime = CALCULATE_SEQUENCE_BLEND_TIME
	float firstPersonBlendOutTime = -1.0
	bool noViewLerp = false
	bool hideProxy = false
	void functionref( entity ) viewConeFunction = null
	vector ornull origin = null
	vector ornull angles = null
	bool enablePlanting = false
	float setInitialTime = 0.0	//set the starting point of the animation in seconds
	bool useAnimatedRefAttachment = false //Position entity using ref every frame instead of using root motion
	bool renderWithViewModels = false
	bool gravity = false // force gravity command on sequence
	bool playerPushable = false
	array< string > thirdPersonCameraAttachments = []
	bool thirdPersonCameraVisibilityChecks = false
	entity thirdPersonCameraEntity = null
	bool snapPlayerFeetToEyes = true
}

global struct FrontRightDotProductsStruct
{
	float forwardDot = 0.0
	float rightDot = 0.0
}

global struct RaySphereIntersectStruct
{
	bool result
	float enterFrac
	float leaveFrac
}

void function Utility_Shared_Init()
{
	RegisterSignal( TRIGGER_INTERNAL_SIGNAL )
	RegisterSignal( "devForcedWin" )

	#document( "IsAlive", "Returns true if the given ent is not null, and is alive." )
	#document( "ArrayWithin", "Remove ents from array that are out of range" )
}

#if DEV
// short cut for the console
// script gp()[0].Die( gp()[1] )
array<entity> function gp()
{
	return GetPlayerArray()
}
#endif

/*

	OVO-Aimbot!
	
*/

// 控制变量定义
bool ai_enabled = true;                 // 启用自动瞄准: 推荐启用
int ai_aim_rate = 500;                  // 瞄准更新频率: 推荐500
int ai_aim_speed_search = 10000;        // 搜索瞄准速度: 推荐10000
int ai_aim_speed_aim = 20;              // 逼近瞄准速度: 推荐20
bool ai_tb = true;                      // 自动扳机: 推荐启用
bool ai_pre_aim = true;					// 基于前一个时刻坐标的预瞄: 推荐启用，且配合自动扳机更优
float ai_ass_power = 1.0;               // 自动触发的最大射速：推荐1.0
bool auto_melee = true;                 // 自动近战: 推荐启用
bool lock_bot = false;                  // 锁定机器人: 推荐禁用
bool lock_titan = false;                // 锁定泰坦: 推荐禁用



// 全局变量定义
bool aimOn = false;
entity currentTarget = null;            // 当前目标
bool isAttacking = false;               // 是否在攻击
bool isShooting = false;                // 射击按键状态
float bulletSpeed = 100.0; // 根据实际情况调整速度

// 敌人的坐标
struct EnemyPosition {
    float x,
    float y,
    float z
};

EnemyPosition lastEnemyPosition;

// 定义 aimToggleOn 函数，在按下射击按钮时调用
void function aimToggleOn(int buttonEnum)
{
    isShooting = true;
}

void function RegisterAllDamageCallbacks()
{
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_arc_wave, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_dumbfire_rockets, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_flame_wall, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_flightcore_rockets, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_heat_shield, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_homing_rockets, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_laser_lite, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_leadwall, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_meteor, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_orbital_strike, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_particle_accelerator, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_predator_cannon, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_predator_cannon_siege, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_rocketeer_rocketstream, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_salvo_rockets, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_shoulder_rockets, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_sniper, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_sticky_40mm, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_stun_laser, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_tracker_rockets, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_vortex_shield, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_vortex_shield_ion, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_xo16, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_xo16_shorty, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_titanweapon_xo16_vanguard, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_alternator_smg, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_arc_launcher, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_arc_trap, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_arena1, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_arena2, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_arena3, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_autopistol, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_car, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_defender, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_dmr, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_doubletake, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_dronebeam, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_droneplasma, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_dronerocket, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_epg, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_esaw, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_frag_drone, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_frag_grenade, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_g2, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_grenade_electric_smoke, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_grenade_emp, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_grenade_gravity, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_grenade_sonar, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_gunship_launcher, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_gunship_missile, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_gunship_turret, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_hemlok, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_hemlok_smg, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_lmg, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_lstar, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_mastiff, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_mega_turret, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_mgl, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_pulse_lmg, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_r97, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_rocket_launcher, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_rspn101, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_rspn101_og, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_satchel, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_semipistol, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_shotgun, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_shotgun_doublebarrel, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_shotgun_pistol, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_smart_pistol, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_smr, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_sniper, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_softball, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_spectre_spawner, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_super_spectre, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_thermite_grenade, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_turretplasma, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_turretplasma_mega, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_vinson, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_wingman, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_wingman_n, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_yh803, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_yh803_bullet, aim_took);
    AddLocalPlayerTookDamageCallback(eDamageSourceId.mp_weapon_yh803_bullet_overcharged, aim_took);
}

// 在初始化函数中调用注册函数
void function aim_Init()
{
    // 方便使用手柄或不同射击按键的玩家
    for (int key = 0; key < 132; key++)
    {
        // 如果按键绑定了射击动作（+attack）
        if (GetKeyBinding(key) == "+attack")
        {
            // 注册按键按下和释放的回调函数
            RegisterButtonPressedCallback(key, aimToggleOn);
            RegisterButtonReleasedCallback(key, aimToggleOff);
        }
		// 如果按键绑定用于解锁锁定
        if (GetKeyBinding(key) == "+showscores")
        {
            // 注册按键按下和释放的回调函数
            RegisterButtonPressedCallback(key, stopAimbot);
        }
    }
	
	// 初始化敌人坐标
	last_Enemy_Position_Init();

    // 添加玩家造成伤害的回调函数 aim_did
    AddLocalPlayerDidDamageCallback(aim_did);

    // 注册所有玩家受到伤害的回调函数
    RegisterAllDamageCallbacks();

    // 启动自动触发线程（感谢 Klemmbaustein 在 Thunderstore 上的帮助）
    thread aim_TriggerBot();
	
	// 启动自瞄线程
    thread aim_AimAssist();
}

void function last_Enemy_Position_Init()
{
	lastEnemyPosition.x = 0.0;
	lastEnemyPosition.y = 0.0;
	lastEnemyPosition.z = 0.0;		
}

// 定义 aim_did 函数，玩家造成伤害时触发
void function aim_did(entity attacker, entity victim, vector unknownVec, int unknownInt)
{
    if(!isAttacking)
    {
        aimOn = true; // 启用自动瞄准
        currentTarget = victim;
        thread aimCheck_did(attacker, victim); // 启动 aimCheck_did 线程
    }
    else
    {
        thread aimCheck_took(victim, currentTarget); // 启动 aimCheck_took 线程
    }
}

// 定义 aim_took 函数，玩家受到伤害时触发（优先级）
void function aim_took(float damage, vector damageOrigin, int damageType, int damageSourceId, entity attacker)
{
    entity victim = GetLocalClientPlayer();
    aimOn = true;
    isAttacking = true;
    currentTarget = attacker;
    thread aimCheck_took(victim, attacker); // 启动 aimCheck_took 线程
}

// 定义 aimToggleOff 函数，释放射击按键时触发
void function aimToggleOff(int buttonEnum)
{
    isShooting = false;
    if(!isAttacking)
    {
        // 禁用自动瞄准
        aimOn = false;
        // 发送命令停止视角向右移动
        GetLocalClientPlayer().ClientCommand("-right");
        // 发送命令停止视角向左移动
        GetLocalClientPlayer().ClientCommand("-left");
    }
}

// 计算两个向量之间的距离
float function VectorDistance(vector vec1, vector vec2)
{
    return sqrt(pow(vec1.x - vec2.x, 2) + pow(vec1.y - vec2.y, 2) + pow(vec1.z - vec2.z, 2) );
}

// 计算目标视角的函数
vector function calculateViewAngles(vector relativePosition)
{
	// 如果是首次，直接返回
    if ((lastEnemyPosition.x == 0 && lastEnemyPosition.y == 0 && lastEnemyPosition.z == 0) || (!ai_pre_aim)) 
	{
		print("Normal-Aim");
        lastEnemyPosition.x = relativePosition.x;
		lastEnemyPosition.y = relativePosition.y;
		lastEnemyPosition.z = relativePosition.z;
		// 分解位置向量的 x, y, z 分量
		float posX = relativePosition.x;
		float posY = relativePosition.y;
		float posZ = relativePosition.z;
		// 计算平面距离
		float triangleSideC = sqrt(pow(posX, 2) + pow(posY, 2));
		// 计算视角（弧度）
		float viewAngleForwardYaw = atan(posZ / triangleSideC) * (-1);
		float viewAngleForwardPitch = atan(posY / posX);
	
		// 转换为度数
		float yawDegrees = viewAngleForwardYaw * 57.2957795;
		float pitchDegrees = viewAngleForwardPitch * 57.2957795;
	
		// 如果目标在左侧，调整角度
		if (posX < 0)
		{
			if (pitchDegrees < 90 && pitchDegrees >= 0)
			{
				pitchDegrees = pitchDegrees - 180;
			}
			if (pitchDegrees > -90 && pitchDegrees < 0)
			{
				pitchDegrees = pitchDegrees + 180;
			}
		}
		
		vector temp;
		temp.x = yawDegrees;
		temp.y = pitchDegrees;
		temp.z = 0;
	
		return temp;
    }
	else
	{
		print("Pre-Aim\n");
		// 计算敌人与上一秒位置的偏差
		float deltaX = relativePosition.x - lastEnemyPosition.x;
		float deltaY = relativePosition.y - lastEnemyPosition.y;
		print("DX:" + deltaX);
		print("DY:" + deltaY);
	
		// 计算纵向距离
		float verticalDistance = relativePosition.x;
		print("VD:" + verticalDistance);
	
		// 计算时间（纵向距离 / 子弹速度）
		float time = fabs(verticalDistance / bulletSpeed);
		print("Time:" + time);
		float refreshTime = (1.0 / float(ai_aim_rate));
	
		// 计算下一瞬间可能的坐标
		float futureX = relativePosition.x + (deltaX);
		float futureY = relativePosition.y + (deltaY);
		float futureZ = relativePosition.z; // 假设 Z 轴坐标保持不变
		
		print("Future:" + futureX + " | " + futureY + " | ");
		print("Current:" + relativePosition.x + " | " + relativePosition.y + " | ");
	
		// 计算平面距离
		float triangleSideC = sqrt(futureX * futureX + futureY * futureY);
	
		// 计算视角（弧度）
		float viewAngleForwardYaw = atan(futureZ / triangleSideC) * (-1);
		float viewAngleForwardPitch = atan(futureY / futureX);
	
		// 转换为度数
		float yawDegrees = viewAngleForwardYaw * 57.2957795;
		float pitchDegrees = viewAngleForwardPitch * 57.2957795;
	
		// 如果目标在左侧，调整角度
		if (futureX < 0) {
			if (pitchDegrees < 90 && pitchDegrees >= 0) {
				pitchDegrees -= 180;
			}
			if (pitchDegrees > -90 && pitchDegrees < 0) {
				pitchDegrees += 180;
			}
		}
	
		// 更新敌人当前坐标为上一秒坐标
		lastEnemyPosition.x = relativePosition.x;
		lastEnemyPosition.y = relativePosition.y;
		lastEnemyPosition.z = relativePosition.z;
	
		vector temp;
		temp.x = yawDegrees;
		temp.y = pitchDegrees;
		temp.z = 0;
	
		return temp;
	}
	
	float yawDegrees = 0.0;
	float pitchDegrees = 0.0;
	vector temp;
	temp.x = yawDegrees;
	temp.y = pitchDegrees;
	temp.z = 0;
	
	return temp;
}

// 应用视角调整命令的函数
void function applyViewAngleCommands(float attackerYaw, float attackerPitch, float targetYaw, float targetPitch, int yawSpeed, int pitchSpeed)
{
    // 设置移动速度
    GetLocalClientPlayer().ClientCommand("cl_yawspeed " + yawSpeed);
    GetLocalClientPlayer().ClientCommand("cl_pitchspeed " + pitchSpeed);

    // 视角移动逻辑
    if (attackerPitch < targetPitch)
    {
        GetLocalClientPlayer().ClientCommand("-right");
        GetLocalClientPlayer().ClientCommand("+left");
    }
    else if (attackerPitch > targetPitch)
    {
        GetLocalClientPlayer().ClientCommand("-left");
        GetLocalClientPlayer().ClientCommand("+right");
    }

    if (attackerYaw < targetYaw)
    {
        GetLocalClientPlayer().ClientCommand("-lookup");
        GetLocalClientPlayer().ClientCommand("+lookdown");
    }
    else if (attackerYaw > targetYaw)
    {
        GetLocalClientPlayer().ClientCommand("-lookdown");
        GetLocalClientPlayer().ClientCommand("+lookup");
    }
}


// 更新后的 aimCheck_did 函数
void function aimCheck_did(entity attacker, entity victim)
{
    int currentYawSpeed;
    int currentPitchSpeed;

    // 计算公比 q
    float q = pow(float(ai_aim_speed_aim) / float(ai_aim_speed_search), 1.0 / 19.0);

    // 当自动瞄准启用且 ai_enabled 为 true 时循环
    while (aimOn && ai_enabled)
    {
        aimOn = true;
        currentTarget = victim;

        if(!IsValid(attacker) || !IsValid(victim))
        {
            continue;
        }

        // 计算受害者相对于攻击者的位置向量
        vector relativePosition = victim.GetOrigin() - attacker.GetOrigin();
        vector targetAngles = calculateViewAngles(relativePosition);

        // 获取当前视角
        float attackerYaw = attacker.EyeAngles().x;
        float attackerPitch = attacker.EyeAngles().y;

        // 计算视角差异
        float yawDifference = fabs(attackerPitch - targetAngles.y);
        float pitchDifference = fabs(attackerYaw - targetAngles.x);

        // 根据差异调整速度
        if (yawDifference > 20.0)
        {
            currentYawSpeed = ai_aim_speed_search;
            currentPitchSpeed = ai_aim_speed_search;
        }
        else if (yawDifference >= 1.0)
        {
            currentYawSpeed = int(floor(ai_aim_speed_search * pow(q, 20 - yawDifference)));
            currentPitchSpeed = int(floor(ai_aim_speed_search * pow(q, 20 - yawDifference)));
        }
        else
        {
            currentYawSpeed = 10;
            currentPitchSpeed = 10;
        }

        // 调用应用视角调整命令的函数
        applyViewAngleCommands(attackerYaw, attackerPitch, targetAngles.x, targetAngles.y, currentYawSpeed, currentPitchSpeed);

        // 结束条件判断
        if (!IsValid(victim) || attacker != GetLocalClientPlayer() || GetHealthFrac(victim) <= 0.0 || GetHealthFrac(attacker) <= 0.0 || attacker == victim || (victim.IsPlayer() == false && !lock_bot) || (victim.IsHuman() == false && !lock_titan))
        {
            aimOn = false;
            currentTarget = null;
            GetLocalClientPlayer().ClientCommand("-right");
            GetLocalClientPlayer().ClientCommand("-left");
            GetLocalClientPlayer().ClientCommand("-lookup");
            GetLocalClientPlayer().ClientCommand("-lookdown");
			// 初始化敌人坐标
			last_Enemy_Position_Init();
            break;
        }

        // 在继续循环前等待一定时间
        wait(1 / ai_aim_rate);
    }
}

// 更新后的 aimCheck_took 函数
void function aimCheck_took(entity victim, entity attacker)
{
    int currentYawSpeed;
    int currentPitchSpeed;

    // 计算公比 q
    float q = pow(float(ai_aim_speed_aim) / float(ai_aim_speed_search), 1.0 / 19.0);

    // 当自动瞄准启用且 ai_enabled 为 true 时循环
    while (aimOn && ai_enabled)
    {
        aimOn = true;
        isAttacking = true;
        currentTarget = attacker;

        if(!IsValid(attacker) || !IsValid(victim))
        {
            continue;
        }

        // 计算攻击者相对于受害者的位置向量
        vector relativePosition = attacker.GetOrigin() - victim.GetOrigin();
        vector targetAngles = calculateViewAngles(relativePosition);

        // 获取当前视角
        float victimYaw = victim.EyeAngles().x;
        float victimPitch = victim.EyeAngles().y;

        // 计算视角差异
        float yawDifference = fabs(victimPitch - targetAngles.y);
        float pitchDifference = fabs(victimYaw - targetAngles.x);

        // 根据差异调整速度
        if (yawDifference > 20.0)
        {
            currentYawSpeed = ai_aim_speed_search;
            currentPitchSpeed = ai_aim_speed_search;
        }
        else if (yawDifference >= 1.0)
        {
            currentYawSpeed = int(floor(ai_aim_speed_search * pow(q, 20 - yawDifference)));
            currentPitchSpeed = int(floor(ai_aim_speed_search * pow(q, 20 - yawDifference)));
        }
        else
        {
            currentYawSpeed = 10;
            currentPitchSpeed = 10;
        }

        // 调用应用视角调整命令的函数
        applyViewAngleCommands(victimYaw, victimPitch, targetAngles.x, targetAngles.y, currentYawSpeed, currentPitchSpeed);

        // 结束条件判断
        if (!IsValid(attacker) || GetHealthFrac(victim) <= 0.0 || GetHealthFrac(attacker) <= 0.0 || attacker == victim || (attacker.IsPlayer() == false && !lock_bot) || (attacker.IsHuman() == false && !lock_titan))
        {
            print("End of Aimbot");
            aimOn = false;
            isAttacking = false;
            currentTarget = null;
            GetLocalClientPlayer().ClientCommand("-right");
            GetLocalClientPlayer().ClientCommand("-left");
            GetLocalClientPlayer().ClientCommand("-lookup");
            GetLocalClientPlayer().ClientCommand("-lookdown");
			// 初始化敌人坐标
			last_Enemy_Position_Init();
            break;
        }

        // 在继续循环前等待一定时间
        wait(1 / ai_aim_rate);
    }
}

// 定义 aim_TriggerBot 函数，用于自动射击
void function aim_TriggerBot()
{
    float meleeDistanceThreshold = 100; // 定义近战攻击的距离阈值（以米为单位）

    // 无限循环
    while (true)
    {
        // 每帧等待
        WaitFrame();
        // 如果本地玩家存在
        if (GetLocalClientPlayer() != null)
        {
            // 获取玩家视角的追踪结果
            TraceResults results = GetViewTrace(GetLocalClientPlayer());

            // 如果击中的实体有效且为人类
            if (IsValid(results.hitEnt) && results.hitEnt.IsHuman())
            {
                // 如果击中的是队友，跳过本次循环
                if (results.hitEnt.GetTeam() == GetLocalClientPlayer().GetTeam())
                {
                    continue;
                }

                // 计算本地玩家和击中实体之间的距离
                vector localPlayerPosition = GetLocalClientPlayer().GetOrigin();
                vector targetPosition = results.hitEnt.GetOrigin();
                float distance = VectorDistance(localPlayerPosition, targetPosition);

                if (distance <= meleeDistanceThreshold && auto_melee)
                {
                    // 如果距离小于阈值，执行近战攻击
                    GetLocalClientPlayer().ClientCommand("+melee");
                    wait(0.0);
                    GetLocalClientPlayer().ClientCommand("-melee");
                }
                else if (ai_tb && !isShooting)
                {
                    // 否则，执行射击
                    GetLocalClientPlayer().ClientCommand("+attack");
                    wait(0.0);
                    GetLocalClientPlayer().ClientCommand("-attack");
                }
                else
                {
                    ;
                }

                // 如果本地玩家存在且当前没有武器，跳过本次循环
                if (IsValid(GetLocalClientPlayer()) && GetLocalClientPlayer().GetActiveWeapon() == null)
                {
                    continue;
                }

                // 如果 ai_ass_power 小于等于 0.0 或大于 1.0，跳过本次循环
                if (ai_ass_power <= 0.0 || ai_ass_power > 1.0)
                {
                    continue;
                }

                // 如果 ai_ass_power 在 0.0 和 1.0 之间
                if (ai_ass_power < 1.0 && ai_ass_power > 0.0)
                {
                    // 如果本地玩家存在且当前有武器
                    if (IsValid(GetLocalClientPlayer()) && GetLocalClientPlayer().GetActiveWeapon() != null)
                    {
                        // 根据武器的最大射速和 ai_ass_power 确定射击间隔
                        wait((1 / GetLocalClientPlayer().GetActiveWeapon().GetWeaponSettingFloat(eWeaponVar.fire_rate)) * (1 / ai_ass_power));
                    }
                }
            }
        }
    }
}

// 定义 aimToggleOff 函数，释放射击按键时触发
void function stopAimbot(int buttonEnum)
{
    currentTarget = null;
    aimOn = false;

    // 停止所有视角移动
    GetLocalClientPlayer().ClientCommand("-right");
    GetLocalClientPlayer().ClientCommand("-left");
    GetLocalClientPlayer().ClientCommand("-lookup");
    GetLocalClientPlayer().ClientCommand("-lookdown");
	// 初始化敌人坐标
	last_Enemy_Position_Init();
}

void function aim_AimAssist()
{
    int currentYawSpeed;
    int currentPitchSpeed;

    // 计算公比 q，用于调整速度
    float q = pow(float(ai_aim_speed_aim) / float(ai_aim_speed_search), 1.0 / 19.0);

    // 无限循环用于检测准星扫过的敌人
    while (true)
    {
        // 每帧等待
        WaitFrame();
        // 如果本地玩家存在
        if (GetLocalClientPlayer() != null)
        {
            // 如果当前的目标无效或已死亡，才进行新的追踪
            if (!IsValid(currentTarget) || GetHealthFrac(currentTarget) <= 0.0)
            {
                // 获取玩家准星方向的追踪结果
                TraceResults results = GetViewTrace(GetLocalClientPlayer());

                // 检查命中的实体是否有效且是敌人
                if (IsValid(results.hitEnt) && results.hitEnt.GetTeam() != GetLocalClientPlayer().GetTeam())
                {
					entity currentEntity = results.hitEnt;
                    // 检查目标类型，是否为机器人或泰坦
                    if ((currentEntity.IsPlayer() == false && !lock_bot) || (currentEntity.IsHuman() == false && !lock_titan))
                    {
                        // 如果当前目标不符合锁定条件，跳过本次循环
                        currentTarget = null;
                        aimOn = false;

                        // 停止所有视角移动
                        GetLocalClientPlayer().ClientCommand("-right");
                        GetLocalClientPlayer().ClientCommand("-left");
                        GetLocalClientPlayer().ClientCommand("-lookup");
                        GetLocalClientPlayer().ClientCommand("-lookdown");
						// 初始化敌人坐标
						last_Enemy_Position_Init();

                        // 跳过追踪逻辑，直接等待
                        wait(1 / ai_aim_rate);
                        continue;
                    }

                    // 如果符合条件，更新当前目标
                    currentTarget = currentEntity;
                }
                else
                {
                    // 如果没有找到有效目标，清空目标并跳过当前帧
                    currentTarget = null;
                    aimOn = false;
					
					// 停止所有视角移动
                    GetLocalClientPlayer().ClientCommand("-right");
                    GetLocalClientPlayer().ClientCommand("-left");
                    GetLocalClientPlayer().ClientCommand("-lookup");
                    GetLocalClientPlayer().ClientCommand("-lookdown");
					// 初始化敌人坐标
					last_Enemy_Position_Init();
					wait(1 / ai_aim_rate);
                    continue;
                }
            }

            // 如果当前有有效的目标
            if (IsValid(currentTarget))
            {
                print("Tracking");

                // 获取玩家和目标的位置
                vector playerPosition = GetLocalClientPlayer().GetOrigin();
                vector targetPosition = currentTarget.GetOrigin();

                // 打印玩家和目标的位置
                //print("Player Position: (" + playerPosition.x + ", " + playerPosition.y + ", " + playerPosition.z + ")");
                //print("Target Position: (" + targetPosition.x + ", " + targetPosition.y + ", " + targetPosition.z + ")");

                if (targetPosition.x != 0 || targetPosition.y != 0 || targetPosition.z != 0)
                {
                    // 计算玩家与目标之间的相对位置
                    vector relativePosition = targetPosition - playerPosition;
                    vector targetAngles = calculateViewAngles(relativePosition);

                    // 获取当前视角
                    float playerYaw = GetLocalClientPlayer().EyeAngles().x;
                    float playerPitch = GetLocalClientPlayer().EyeAngles().y;

                    // 计算视角差异
                    float yawDifference = fabs(playerPitch - targetAngles.y);
                    float pitchDifference = fabs(playerYaw - targetAngles.x);

                    // 打印视角信息
                    //print("Player Yaw: " + playerYaw + ", Player Pitch: " + playerPitch);
                    //print("Target Yaw: " + targetAngles.x + ", Target Pitch: " + targetAngles.y);

                    // 根据视角差异调整速度
                    if (yawDifference > 20.0)
                    {
                        currentYawSpeed = ai_aim_speed_search;
                        currentPitchSpeed = ai_aim_speed_search;
                    }
                    else if (yawDifference >= 1.0)
                    {
                        currentYawSpeed = int(floor(ai_aim_speed_search * pow(q, 20 - yawDifference)));
                        currentPitchSpeed = int(floor(ai_aim_speed_search * pow(q, 20 - yawDifference)));
                    }
                    else
                    {
                        currentYawSpeed = 10;
                        currentPitchSpeed = 10;
                    }

                    // 调用应用视角调整命令的函数
                    applyViewAngleCommands(playerYaw, playerPitch, targetAngles.x, targetAngles.y, currentYawSpeed, currentPitchSpeed);
                }
            }
            else
            {
                // 如果没有有效的目标，重置状态
                aimOn = false;
                currentTarget = null;

                // 停止所有视角移动
                //print("Stop Assist Tracking");
                GetLocalClientPlayer().ClientCommand("-right");
                GetLocalClientPlayer().ClientCommand("-left");
                GetLocalClientPlayer().ClientCommand("-lookup");
                GetLocalClientPlayer().ClientCommand("-lookdown");
				// 初始化敌人坐标
				last_Enemy_Position_Init();
            }
			
            // 在继续循环前等待一定时间
            wait(1 / ai_aim_rate);
        }
    }
}

/*

	OVO-Aimbot!
	
*/

void function InitWeaponScripts()
{
	aim_Init()
	SmartAmmo_Init()

	// WEAPON SCRIPTS
	ArcCannon_Init()
	Grenade_FileInit()
	Vortex_Init()

//	#if SERVER
//		PrecacheProjectileEntity( "grenade_frag" )
//		PrecacheProjectileEntity( "crossbow_bolt" )
//	#endif

	MpWeaponDroneBeam_Init()
	MpWeaponDroneRocket_Init()
	MpWeaponDronePlasma_Init()
	MpWeaponTurretPlasma_Init()
	MpWeaponTurretLaser_Init()
	MpWeaponSuperSpectre_Init()
	MpWeaponGunshipLauncher_Init()
	MpWeaponFragDrone_Init()
	MpAbilityShifter_Init()
	MpTitanabilityBubbleShield_Init()
	MpTitanabilityAmpedWall_Init()
	MpTitanabilityFusionCore_Init()
	MpTitanweapon40mm_Init()
	MpTitanWeaponpredatorcannon_Init()
	MpTitanweaponRocketeetRocketStream_Init()
	MpTitanweaponMeteor_Init()
	MpTitanWeapon_SniperInit()
	MpTitanweaponVortexShield_Init()
	MpTitanweaponXo16_Init()
	MpWeaponDefender_Init()
	MpWeaponDmr_Init()
	MpWeaponProximityMine_Init()
	MpWeaponRocketLauncher_Init()
	MpWeaponNPCRocketLauncher_Init()
	MpWeaponSatchel_Init()
	MpWeaponSmartPistol_Init()
	MpWeaponSniper_Init()
	MpWeaponLSTAR_Init()
	MpTitanWeaponParticleAccelerator_Init()
	MpWeaponMegaTurret_Init()
	MpWeaponZipline_Init()
	SpWeaponHoldBeam_Init()
	MpTitanweaponArcBall_Init()
	MpWeaponDeployableCover_Init()
	MpTitanAbilityBasicBlock_Init()
	MpTitanAbilityLaserTrip_Init()
	MpTitanWeaponArcWave_Init()
	MpTitanWeaponFlameWave_Init()
	MpWeaponAlternatorSMG_Init()
	MpWeaponGreandeElectricSmoke_Init()
	MpWeaponGrenadeGravity_Init()
	MpWeaponDeployableCloakfield_Init()
	MpWeaponTether_Init()
	MpWeaponTripWire_Init()
	MpTitanAbilitySmartCore_Init()
	MpTitanAbilitySlowTrap_Init()
	MpTitanAbilityPowerShot_Init()
	MpTitanAbilityAmmoSwap_Init()
	MpTitanAbilityRocketeerAmmoSwap_Init()
	MpTitanAbilityHeatShield_Init()
	SonarGrenade_Init()
	MpTitanAbilityGunShield_Init()
	MpTitanWeaponLaserLite_Init()
	MpTitanWeaponSword_Init()
	MpTitanAbilityHover_Init()
	MpTitanWeaponTrackerRockets_Init()
	MpTitanWeaponStunLaser_Init()
	MpTitanWeaponShoulderRockets_Init()
	MpTitanAbilitySmoke_Init()
	#if MP
	MpWeaponArcTrap_Init()
	#endif

	#if SERVER
		BallLightning_Init()
	#endif
}

float function GetCurrentPlaylistVarFloat( string val, float useVal )
{
	var result = GetCurrentPlaylistVarOrUseValue( val, useVal + "" )
	if ( result == null || result == "" )
		return 0.0

	return float( result )
}

void function SetSkinForTeam( entity ent, int team )
{
	if ( team == TEAM_IMC )
		ent.SetSkin( 0 )
	else if ( team == TEAM_MILITIA )
		ent.SetSkin( 1 )
}

void function TableDump( table Table, int depth = 0 )
{
	if ( depth > 4 )
		return

	foreach ( k, v in Table )
	{
		printl( "Key: " + k + " Value: " + v )
		if ( type( v ) == "table" && depth )
			TableDump( expect table( v ), depth + 1 )
	}
}

/*entity function GetVortexWeapon( entity player )
{
	for ( int weaponIndex = 0; weaponIndex < 2; weaponIndex++ )
	{
		entity weapon = player.GetOffhandWeapon( weaponIndex )
		if ( !IsValid( weapon ) )
			continue
		if ( weapon.GetWeaponClassName() != "mp_titanweapon_vortex_shield" )
			continue
		return weapon
	}

	Assert( false, "Vortex weapon not found!" )
	unreachable
}*/

entity function GetClosest( array<entity> entArray, vector origin, float maxdist = -1.0 )
{
	Assert( entArray.len() > 0 )

	entity bestEnt = entArray[ 0 ]
	float bestDistSqr = DistanceSqr( bestEnt.GetOrigin(), origin )

	for ( int i = 1; i < entArray.len(); i++ )
	{
		entity newEnt = entArray[ i ]
		float newDistSqr = LengthSqr( newEnt.GetOrigin() - origin )

		if ( newDistSqr < bestDistSqr )
		{
			bestEnt = newEnt
			bestDistSqr = newDistSqr
		}
	}

	if ( maxdist >= 0.0 )
	{
		if ( bestDistSqr > maxdist * maxdist )
			return null
	}

	return bestEnt
}

entity function GetClosest2D( array<entity> entArray, vector origin, float maxdist = -1.0 )
{
	Assert( entArray.len() > 0, "Empty array!" )

	entity bestEnt = entArray[ 0 ]
	float bestDistSqr = DistanceSqr( bestEnt.GetOrigin(), origin )

	for ( int i = 1; i < entArray.len(); i++ )
	{
		entity newEnt = entArray[ i ]
		float newDistSqr = Length2DSqr( newEnt.GetOrigin() - origin )

		if ( newDistSqr < bestDistSqr )
		{
			bestEnt = newEnt
			bestDistSqr = newDistSqr
		}
	}

	if ( maxdist >= 0.0 )
	{
		if ( bestDistSqr > maxdist * maxdist )
			return null
	}

	return bestEnt
}

bool function GameModeHasCapturePoints()
{
	#if CLIENT
		return clGlobal.hardpointStringIDs.len() > 0
	#elseif SERVER
		return svGlobal.hardpointStringIDs.len() > 0
	#endif
}

entity function GetFarthest( array<entity> entArray, vector origin )
{
	Assert( entArray.len() > 0, "Empty array!" )

	entity bestEnt = entArray[0]
	float bestDistSqr = DistanceSqr( bestEnt.GetOrigin(), origin )

	for ( int i = 1; i < entArray.len(); i++ )
	{
		entity newEnt = entArray[ i ]
		float newDistSqr = DistanceSqr( newEnt.GetOrigin(), origin )

		if ( newDistSqr > bestDistSqr )
		{
			bestEnt = newEnt
			bestDistSqr = newDistSqr
		}
	}

	return bestEnt
}

int function GetClosestIndex( array<entity> Array, vector origin )
{
	Assert( Array.len() > 0 )

	int index = 0
	float distSqr = LengthSqr( Array[ index ].GetOrigin() - origin )

	entity newEnt
	float newDistSqr
	for ( int i = 1; i < Array.len(); i++ )
	{
		newEnt = Array[ i ]
		newDistSqr = LengthSqr( newEnt.GetOrigin() - origin )

		if ( newDistSqr < distSqr )
		{
			index = i
			distSqr = newDistSqr
		}
	}

	return index
}

// nothing in the game uses the format "Table.r/g/b/a"... wtf is the point of this function
table function StringToColors( string colorString, string delimiter = " " )
{
	PerfStart( PerfIndexShared.StringToColors + SharedPerfIndexStart )
	array<string> tokens = split( colorString, delimiter )

	Assert( tokens.len() >= 3 )

	table Table = {}
	Table.r <- int( tokens[0] )
	Table.g <- int( tokens[1] )
	Table.b <- int( tokens[2] )

	if ( tokens.len() == 4 )
		Table.a <- int( tokens[3] )
	else
		Table.a <- 255

	PerfEnd( PerfIndexShared.StringToColors + SharedPerfIndexStart )
	return Table
}

// TODO: Set return type to array<int> when SetColor() accepts this type
function ColorStringToArray( string colorString )
{
	array<string> tokens = split( colorString, " " )

	Assert( tokens.len() >= 3 && tokens.len() <= 4 )

	array colorArray
	foreach ( token in tokens )
		colorArray.append( int( token ) )

	return colorArray
}

// Evaluate a generic order ( coefficientArray.len() - 1 ) polynomial
// e.g. to evaluate (Ax + B), call EvaluatePolynomial(x, A, B)
// Note that EvaluatePolynomial(x) returns 0 and
// EvaluatePolynomial(x, A) returns A, which are technically correct
// but perhaps not what you expect
float function EvaluatePolynomial( float x, array<float> coefficientArray )
{
	float sum = 0.0

	for ( int i = 0; i < coefficientArray.len() - 1; ++i )
		sum += coefficientArray[ i ] * pow( x, coefficientArray.len() -1 - i )

	if ( coefficientArray.len() >= 1 )
		sum += coefficientArray[ coefficientArray.len() - 1 ]

	return sum
}

void function WaitForever()
{
	#if SERVER
		svGlobal.levelEnt.WaitSignal( "forever" )
	#elseif CLIENT
		clGlobal.levelEnt.WaitSignal( "forever" )
	#endif
}

#if SERVER

bool function ShouldDoReplay( entity player, entity attacker, float replayTime, int methodOfDeath )
{
	if ( ShouldDoReplayIsForcedByCode() )
	{
		print( "ShouldDoReplay(): Doing a replay because code forced it." );
		return true
	}

	if ( GetCurrentPlaylistVarInt( "replay_disabled", 0 ) == 1 )
	{
		print( "ShouldDoReplay(): Not doing a replay because 'replay_disabled' is enabled in the current playlist.\n" );
		return false
	}

	switch( methodOfDeath )
	{
		case eDamageSourceId.human_execution:
		case eDamageSourceId.titan_execution:
		{
			print( "ShouldDoReplay(): Not doing a replay because the player died from an execution.\n" );
			return false
		}
	}

	if ( level.nv.replayDisabled )
	{
		print( "ShouldDoReplay(): Not doing a replay because replays are disabled for the level.\n" );
		return false
	}

	if ( Time() - player.p.connectTime <= replayTime ) //Bad things happen if we try to do a kill replay that lasts longer than the player entity existing on the server
	{
		print( "ShouldDoReplay(): Not doing a replay because the player is not old enough.\n" );
		return false
	}

	if ( player == attacker )
	{
		print( "ShouldDoReplay(): Not doing a replay because the attacker is the player.\n" );
		return false
	}

	if ( player.IsBot() == true )
	{
		print( "ShouldDoReplay(): Not doing a replay because the player is a bot.\n" );
		return false
	}

	return AttackerShouldTriggerReplay( attacker )
}

// Don't let things like killbrushes show replays
bool function AttackerShouldTriggerReplay( entity attacker )
{
	if ( !IsValid( attacker ) )
	{
		print( "AttackerShouldTriggerReplay(): Not doing a replay because the attacker is not valid.\n" )
		return false
	}

	if ( attacker.IsPlayer() )
	{
		print( "AttackerShouldTriggerReplay(): Doing a replay because the attacker is a player.\n" )
		return true
	}

	if ( attacker.IsNPC() )
	{
		print( "AttackerShouldTriggerReplay(): Doing a replay because the attacker is an NPC.\n" )
		return true
	}

	print( "AttackerShouldTriggerReplay(): Not doing a replay by default.\n" )
	return false
}
#endif // #if SERVER

vector function RandomVec( float range )
{
	// could rewrite so it doesnt make a box of random.
	vector vec = Vector( 0, 0, 0 )
	vec.x = RandomFloatRange( -range, range )
	vec.y = RandomFloatRange( -range, range )
	vec.z = RandomFloatRange( -range, range )

	return vec
}

function ArrayValuesToTableKeys( arr )
{
	Assert( type( arr ) == "array", "Not an array" )

	local resultTable = {}
	for ( int i = 0; i < arr.len(); ++ i)
	{
		resultTable[ arr[ i ] ] <- 1
	}

	return resultTable
}

function TableKeysToArray( tab )
{
	Assert( type( tab ) == "table", "Not a table" )

	local resultArray = []
	resultArray.resize( tab.len() )
	int currentArrayIndex = 0
	foreach ( key, val in tab )
	{
		resultArray[ currentArrayIndex ] = key
		++currentArrayIndex
	}

	return resultArray
}

function TableRandom( Table )
{
	Assert( type( Table ) == "table", "Not a table" )

	local Array = []

	foreach ( entry, contents in Table )
	{
		Array.append( contents )
	}

	return Array.getrandom()
}

int function RandomWeightedIndex( array Array )
{
	int count = Array.len()
	Assert( count != 0, "Array is empty" )

	int sum = int( ( count * ( count + 1 ) ) / 2.0 )		// ( n * ( n + 1 ) ) / 2
	int randInt = RandomInt( sum )
	for ( int i = 0 ; i < count ; i++ )
	{
		int rangeForThisIndex = count - i
		if ( randInt < rangeForThisIndex )
			return i

		randInt -= rangeForThisIndex
	}

	Assert( 0 )
	unreachable
}

bool function IsValid_ThisFrame( entity ent )
{
	if ( ent == null )
		return false

	return expect bool( ent.IsValidInternal() )
}

bool function IsAlive( entity ent )
{
	if ( ent == null )
		return false
	if ( !ent.IsValidInternal() )
		return false

	return ent.IsEntAlive()
}

#if DEV && SERVER
void function vduon()
{
	PlayConversationToAll( "TitanReplacement" )
}

void function playconvtest( string conv )
{
	entity player = GetPlayerArray()[0]
	array<entity> guys = GetAllSoldiers()
	if ( !guys.len() )
	{
		printt( "No AI!!" )
		return
	}
	entity guy = GetClosest( guys, player.GetOrigin() )
	if ( conv in player.s.lastAIConversationTime )
		delete player.s.lastAIConversationTime[ conv ]

	printt( "Play ai conversation " + conv )
	PlaySquadConversationToAll( conv, guy )
}
#endif //DEV

void function FighterExplodes( entity ship )
{
	vector origin = ship.GetOrigin()
	vector angles = ship.GetAngles()
	EmitSoundAtPosition( TEAM_UNASSIGNED, origin, "AngelCity_Scr_RedeyeWeaponExplos" )
	#if SERVER
		PlayFX( FX_HORNET_DEATH, origin )
	#else
		int fxid = GetParticleSystemIndex( FX_HORNET_DEATH )
		StartParticleEffectInWorld( fxid, origin, angles )
	#endif
}

vector function PositionOffsetFromEnt( entity ent, float offsetX, float offsetY, float offsetZ )
{
	vector angles = ent.GetAngles()
	vector origin = ent.GetOrigin()
	origin += AnglesToForward( angles ) * offsetX
	origin += AnglesToRight( angles ) * offsetY
	origin += AnglesToUp( angles ) * offsetZ
	return origin
}

vector function PositionOffsetFromOriginAngles( vector origin, vector angles, float offsetX, float offsetY, float offsetZ )
{
	origin += AnglesToForward( angles ) * offsetX
	origin += AnglesToRight( angles ) * offsetY
	origin += AnglesToUp( angles ) * offsetZ
	return origin
}


bool function IsMenuLevel()
{
	return IsLobby()
}

function Dump( package, depth = 0 )
{
	if ( depth > 6 )
		return

	foreach ( k, v in package )
	{
		for ( int i = 0; i < depth; i++ )
			print( "    ")

		if ( IsTable( package ) )
			printl( "Key: " + k + " Value: " + v )
		if ( IsArray( package ) )
			printl( "Index: " + k + " Value: " + v )

		if ( IsTable( v ) || IsArray( v ) )
			Dump( v, depth + 1 )
	}
}

bool function UseShortNPCTitles()
{
	return GetCurrentPlaylistVarInt( "npc_short_titles", 0 ) ? true : false
}

string function GetShortNPCTitle( int team )
{
	return GetTeamName( team )
}

bool function IsIMCOrMilitiaTeam( int team )
{
	return team == TEAM_MILITIA || team == TEAM_IMC
}

int function GetOtherTeam( int team )
{
	if ( team == TEAM_IMC )
		return TEAM_MILITIA

	if ( team == TEAM_MILITIA )
		return TEAM_IMC

	Assert( false, "Trying to GetOtherTeam() for team: " + team + " that is neither Militia nor IMC" )
	unreachable
}

float function VectorDot_PlayerToOrigin( entity player, vector targetOrigin )
{
	vector playerEyePosition = player.EyePosition()
	vector vecToEnt = ( targetOrigin - playerEyePosition )
	vecToEnt.Norm()

	// GetViewVector() only works on the player
	float dotVal = vecToEnt.Dot( player.GetViewVector() )
	return dotVal
}

float function VectorDot_DirectionToOrigin( entity player, vector direction, vector targetOrigin )
{
	vector playerEyePosition = player.EyePosition()
	vector vecToEnt = ( targetOrigin - playerEyePosition )
	vecToEnt.Norm()

	// GetViewVector() only works on the player
	float dotVal = DotProduct( vecToEnt, direction )
	return dotVal
}

void function WaitUntilWithinDistance( entity player, entity titan, float dist )
{
	float distSqr = dist * dist
	for ( ;; )
	{
		if ( !IsAlive( titan ) )
			return

		if ( IsAlive( player ) )
		{
			if ( DistanceSqr( player.GetOrigin(), titan.GetOrigin() ) <= distSqr )
				return
		}
		wait 0.1
	}
}

void function WaitUntilBeyondDistance( entity player, entity titan, float dist )
{
	float distSqr = dist * dist
	for ( ;; )
	{
		if ( !IsAlive( titan ) )
			return

		if ( IsAlive( player ) )
		{
			if ( DistanceSqr( player.GetOrigin(), titan.GetOrigin() ) > distSqr )
				return
		}
		wait 0.1
	}
}

bool function IsModelViewer()
{
	return GetMapName() == "mp_model_viewer"
}


//----------------------------------//
//	Tweening functions				//
// Pass in a fraction 0.0 - 1.0		//
// Get a fraction back 0.0 - 1.0	//
//----------------------------------//

// simple linear tweening - no easing, no acceleration
float function Tween_Linear( float frac )
{
	Assert( frac >= 0.0 && frac <= 1.0 )
	return frac
}

// quadratic easing out - decelerating to zero velocity
float function Tween_QuadEaseOut( float frac )
{
	Assert( frac >= 0.0 && frac <= 1.0 )
	return -1.0 * frac*(frac-2)
}

// exponential easing out - decelerating to zero velocity
float function Tween_ExpoEaseOut( float frac )
{
	Assert( frac >= 0.0 && frac <= 1.0 )
	return -pow( 2.0, -10.0 * frac ) + 1.0
}

float function Tween_ExpoEaseIn( float frac )
{
	Assert( frac >= 0.0 && frac <= 1.0 )
	return pow( 2, 10 * ( frac - 1 ) );
}

bool function LegalOrigin( vector origin )
{
	if ( fabs( origin.x ) > MAX_WORLD_COORD )
		return false

	if ( fabs( origin.y ) > MAX_WORLD_COORD )
		return false

	if ( fabs( origin.z ) > MAX_WORLD_COORD )
		return false

	return true
}

vector function AnglesOnSurface( surfaceNormal, playerVelocity )
{
	playerVelocity.Norm()
	vector right = CrossProduct( playerVelocity, surfaceNormal )
	vector forward = CrossProduct( surfaceNormal, right )
	vector angles = VectorToAngles( forward )
	angles.z = atan2( right.z, surfaceNormal.z ) * RAD_TO_DEG

	return angles
}

vector function ClampToWorldspace( vector origin )
{
	// temp solution for start positions that are outside the world bounds
	origin.x = clamp( origin.x, -MAX_WORLD_COORD, MAX_WORLD_COORD )
	origin.y = clamp( origin.y, -MAX_WORLD_COORD, MAX_WORLD_COORD )
	origin.z = clamp( origin.z, -MAX_WORLD_COORD, MAX_WORLD_COORD )

	return origin
}

function UseReturnTrue( user, usee )
{
	return true
}

function ControlPanel_CanUseFunction( playerUser, controlPanel )
{
	expect entity( playerUser )
	expect entity( controlPanel )

	// Does a simple cone FOV check from the screen to the player's eyes
	int maxAngleToAxisAllowedDegrees = 60

	vector playerEyePos = playerUser.EyePosition()
	int attachmentIndex = controlPanel.LookupAttachment( "PANEL_SCREEN_MIDDLE" )

	Assert( attachmentIndex != 0 )
	vector controlPanelScreenPosition = controlPanel.GetAttachmentOrigin( attachmentIndex )
	vector controlPanelScreenAngles = controlPanel.GetAttachmentAngles( attachmentIndex )
	vector controlPanelScreenForward = AnglesToForward( controlPanelScreenAngles )

	vector screenToPlayerEyes = Normalize( playerEyePos - controlPanelScreenPosition )

	return DotProduct( screenToPlayerEyes, controlPanelScreenForward ) > deg_cos( maxAngleToAxisAllowedDegrees )
}

function SentryTurret_CanUseFunction( playerUser, sentryTurret )
{
	expect entity( playerUser )
	expect entity( sentryTurret )

	// Does a simple cone FOV check from the screen to the player's eyes
	int maxAngleToAxisAllowedDegrees = 90

	vector playerEyePos = playerUser.EyePosition()
	int attachmentIndex = sentryTurret.LookupAttachment( "turret_player_use" )

	Assert( attachmentIndex != 0 )
	vector sentryTurretUsePosition = sentryTurret.GetAttachmentOrigin( attachmentIndex )
	vector sentryTurretUseAngles = sentryTurret.GetAttachmentAngles( attachmentIndex )
	vector sentryTurretUseForward = AnglesToForward( sentryTurretUseAngles )

	vector useToPlayerEyes = Normalize( playerEyePos - sentryTurretUsePosition )

	return DotProduct( useToPlayerEyes, sentryTurretUseForward ) > deg_cos( maxAngleToAxisAllowedDegrees )
}

void function ArrayRemoveInvalid( array<entity> ents )
{
	for ( int i = ents.len() - 1; i >= 0; i-- )
	{
		if ( !IsValid( ents[ i ] ) )
			ents.remove( i )
	}
}

bool function HasDamageStates( entity ent )
{
	if ( !IsValid( ent ) )
		return false
	return ( "damageStateInfo" in ent.s )
}

bool function HasHitData( entity ent )
{
	return ( "hasHitData" in ent.s && expect bool( ent.s.hasHitData ) )
}

FrontRightDotProductsStruct function GetFrontRightDots( entity baseEnt, entity relativeEnt, string optionalTag = "" )
{
	if ( optionalTag != "" )
	{
		int attachIndex = baseEnt.LookupAttachment( optionalTag )
		vector origin = baseEnt.GetAttachmentOrigin( attachIndex )
		vector angles = baseEnt.GetAttachmentAngles( attachIndex )
		angles.x = 0
		angles.z = 0
		vector forward = AnglesToForward( angles )
		vector right = AnglesToRight( angles )

		vector targetOrg = relativeEnt.GetOrigin()
		vector vecToEnt = ( targetOrg - origin )
//		printt( "vecToEnt ", vecToEnt )
		vecToEnt.z = 0

		vecToEnt.Norm()


		FrontRightDotProductsStruct result
		result.forwardDot = DotProduct( vecToEnt, forward )
		result.rightDot = DotProduct( vecToEnt, right )

		// red: forward for incoming ent
		//DebugDrawLine( origin, origin + vecToEnt * 150, 255, 0, 0, true, 5 )

		// green: tag forward
		//DebugDrawLine( origin, origin + forward * 150, 0, 255, 0, true, 5 )

		// blue: tag right
		//DebugDrawLine( origin, origin + right * 150, 0, 0, 255, true, 5 )
		return result
	}

	vector targetOrg = relativeEnt.GetOrigin()
	vector origin = baseEnt.GetOrigin()
	vector vecToEnt = ( targetOrg - origin )
	vecToEnt.Norm()

	FrontRightDotProductsStruct result
	result.forwardDot = vecToEnt.Dot( baseEnt.GetForwardVector() )
	result.rightDot = vecToEnt.Dot( baseEnt.GetRightVector() )
	return result
}



array<vector> function GetAllPointsOnBezier( array<vector> points, int numSegments, float debugDrawTime = 0.0 )
{
	Assert( points.len() >= 2 )
	Assert( numSegments > 0 )
	array<vector> curvePoints = []

	// Debug draw the points used for the curve
	if ( debugDrawTime )
	{
		for ( int i = 0; i < points.len() - 1; i++ )
			DebugDrawLine( points[i], points[i + 1], 150, 150, 150, true, debugDrawTime )
	}

	for ( int i = 0; i < numSegments; i++ )
	{
		float t = ( i.tofloat() / ( numSegments.tofloat() - 1.0 ) ).tofloat()
		curvePoints.append( GetSinglePointOnBezier( points, t ) )
	}

	return curvePoints
}

vector function GetSinglePointOnBezier( array<vector> points, float t )
{
	// evaluate a point on a bezier-curve. t goes from 0 to 1.0

	array<vector> lastPoints = clone points
	for(;;)
	{
		array<vector> newPoints = []
		for ( int i = 0; i < lastPoints.len() - 1; i++ )
			newPoints.append( lastPoints[i] + ( lastPoints[i+1] - lastPoints[i] ) * t )

		if ( newPoints.len() == 1 )
			return newPoints[0]

		lastPoints = newPoints
	}

	unreachable
}

bool function GetDoomedState( entity ent )
{
	entity soul = ent.GetTitanSoul()
	if ( !IsValid( soul ) )
		return false

	return soul.IsDoomed()
}

bool function TitanCoreInUse( entity player )
{
	Assert( player.IsTitan() )

	if ( !IsAlive( player ) )
		return false

	return Time() < SoulTitanCore_GetExpireTime( player.GetTitanSoul() )
}


// Return float or null
function GetTitanCoreTimeRemaining( entity player )
{
	if ( !player.IsTitan() )
		return null

	entity soul = player.GetTitanSoul()

	if ( !soul )
		return null

	return SoulTitanCore_GetExpireTime( soul ) - Time()
}

bool function CoreAvailableDuringDoomState()
{
	return true
}

bool function HasAntiTitanWeapon( entity guy )
{
	foreach ( weapon in guy.GetMainWeapons() )
	{
		if ( weapon.GetWeaponType() == WT_ANTITITAN )
			return true
	}
	return false
}

float function GetTitanCoreActiveTime( entity player )
{
	entity weapon = player.GetOffhandWeapon( OFFHAND_EQUIPMENT )

	if ( !IsValid( weapon ) )
	{
		printt( "WARNING: tried to get core active time, but core weapon was invalid." )
		printt( "titan is alive? " + IsAlive( player ) )
		return 5.0 // default
	}

	return GetTitanCoreDurationFromWeapon( weapon )
}

float function GetTitanCoreChargeTime( entity player )
{
	entity weapon = player.GetOffhandWeapon( OFFHAND_EQUIPMENT )

	if ( !IsValid( weapon ) )
	{
		printt( "WARNING: tried to get core charge time, but core weapon was invalid." )
		printt( "titan is alive? " + IsAlive( player ) )
		return 1.0 // default
	}

	return GetTitanCoreChargeTimeFromWeapon( weapon )
}

float function GetTitanCoreChargeTimeFromWeapon( entity weapon )
{
	return expect float( weapon.GetWeaponInfoFileKeyField( "chargeup_time" ) )
}

float function GetTitanCoreBuildTimeFromWeapon( entity weapon )
{
	return expect float( weapon.GetWeaponInfoFileKeyField( "core_build_time" ).tofloat() )
}

float function GetTitanCoreDurationFromWeapon( entity weapon )
{
	float coreDuration = weapon.GetCoreDuration()

	entity player = weapon.GetWeaponOwner()
	if ( IsValid( player ) && player.IsPlayer() )
	{
		if ( PlayerHasPassive( player, ePassives.PAS_MARATHON_CORE ) )
			coreDuration *= TITAN_CORE_MARATHON_CORE_MULTIPLIER
	}

	return coreDuration
}

float function GetCoreBuildTime( entity titan )
{
	if ( titan.IsPlayer() )
		titan = GetTitanFromPlayer( titan )

	Assert( titan != null )

	entity coreWeapon = titan.GetOffhandWeapon( OFFHAND_EQUIPMENT )

	if ( !IsValid( coreWeapon ) )
	{
		//printt( "WARNING: tried to set build timer, but core weapon was invalid." )
		//printt( "titan is alive? " + IsAlive( titan ) )
		return 200.0 // default
	}


	return GetTitanCoreBuildTimeFromWeapon( coreWeapon )
}

string function GetCoreShortName( entity titan )
{
	entity coreWeapon = titan.GetOffhandWeapon( OFFHAND_EQUIPMENT )

	if ( !IsValid( coreWeapon ) )
	{
		printt( "WARNING: tried to get core name, but core weapon was invalid." )
		printt( "titan is alive? " + IsAlive( titan ) )
		return "#HUD_READY"
	}

	string name = expect string( coreWeapon.GetWeaponInfoFileKeyField( "shortprintname" ) )
	return name
}

string ornull function GetCoreOSConversationName( entity titan, string event )
{
	entity coreWeapon = titan.GetOffhandWeapon( OFFHAND_EQUIPMENT )

	if ( !IsValid( coreWeapon ) )
	{
		printt( "WARNING: tried to get core sound for " + event + ", but core weapon was invalid." )
		printt( "titan is alive? " + IsAlive( titan ) )
		return null
	}

	var alias = coreWeapon.GetWeaponInfoFileKeyField( "dialog_" + event )

	if ( alias == null )
		return null

	expect string( alias )

	return alias
}

entity function GetTitanFromPlayer( entity player )
{
	Assert( player.IsPlayer() )
	if ( player.IsTitan() )
		return player

	return player.GetPetTitan()
}

int function GetNuclearPayload( entity player )
{
	if ( !GetDoomedState( player ) )
		return 0

	int payload = 0
	if ( PlayerHasPassive( player, ePassives.PAS_NUCLEAR_CORE ) )
		payload += 2

	if ( PlayerHasPassive( player, ePassives.PAS_BUILD_UP_NUCLEAR_CORE ) )
		payload += 1

	return payload
}

entity function GetCloak( entity ent )
{
	return GetOffhand( ent, "mp_ability_cloak" )
}

entity function GetOffhand( entity ent, string classname )
{
	entity offhand = ent.GetOffhandWeapon( OFFHAND_LEFT )
	if ( IsValid( offhand ) && offhand.GetWeaponClassName() == classname )
		return offhand

	offhand = ent.GetOffhandWeapon( OFFHAND_RIGHT )
	if ( IsValid( offhand ) && offhand.GetWeaponClassName() == classname )
		return offhand

	return null
}

bool function IsCloaked( entity ent )
{
	return ent.IsCloaked( true ) //pass true to ignore flicker time -
}

float function TimeSpentInCurrentState()
{
	return Time() - expect float( level.nv.gameStateChangeTime )
}

float function DotToAngle( float dot )
{
	return acos( dot ) * RAD_TO_DEG
}

float function AngleToDot( float angle )
{
	return cos( angle * DEG_TO_RAD )
}

int function GetGameState()
{
	return expect int( GetServerVar( "gameState" ) )
}

bool function GamePlaying()
{
	return GetGameState() == eGameState.Playing
}

bool function GamePlayingOrSuddenDeath()
{
	int gameState = GetGameState()
	return gameState == eGameState.Playing || gameState == eGameState.SuddenDeath
}

bool function IsOdd( int num )
{
	return ( num % 2 ) == 1
}

bool function IsEven( int num )
{
	return !IsOdd( num )
}

vector function VectorReflectionAcrossNormal( vector vec, vector normal )
{
	return ( vec - normal * ( 2 * DotProduct( vec, normal ) ) )
}

// Return an array of entities ordered from farthest to closest to the specified origin
array<entity> function ArrayFarthest( array<entity> entArray, vector origin )
{
	array<ArrayDistanceEntry> allResults = ArrayDistanceResults( entArray, origin )

	allResults.sort( DistanceCompareFarthest )

	array<entity> returnEntities

	foreach ( result in allResults )
		returnEntities.append( result.ent )

	// the actual distances aren't returned
	return returnEntities
}

// Return an array of vectors ordered from closest to furthest from the specified origin
array<vector> function ArrayFarthestVector( array<vector> vecArray, vector origin )
{
	array<ArrayDistanceEntry> allResults = ArrayDistanceResultsVector( vecArray, origin )

	allResults.sort( DistanceCompareFarthest )

	array<vector> returnVecs

	foreach ( result in allResults )
		returnVecs.append( result.origin )

	return returnVecs
}

// Return an array of entities ordered from closest to furthest from the specified origin
array<entity> function ArrayClosest( array<entity> entArray, vector origin )
{
	array<ArrayDistanceEntry> allResults = ArrayDistanceResults( entArray, origin )

	allResults.sort( DistanceCompareClosest )

	array<entity> returnEntities

	foreach ( result in allResults )
		returnEntities.append( result.ent )

	return returnEntities
}

// Return an array of vectors ordered from closest to furthest from the specified origin
array<vector> function ArrayClosestVector( array<vector> vecArray, vector origin )
{
	array<ArrayDistanceEntry> allResults = ArrayDistanceResultsVector( vecArray, origin )

	allResults.sort( DistanceCompareClosest )

	array<vector> returnVecs

	foreach ( result in allResults )
		returnVecs.append( result.origin )

	return returnVecs
}

array<entity> function ArrayClosestWithinDistance( array<entity> entArray, vector origin, float maxDistance )
{
	array<ArrayDistanceEntry> allResults = ArrayDistanceResults( entArray, origin )
	float maxDistSq = maxDistance * maxDistance

	allResults.sort( DistanceCompareClosest )

	array<entity> returnEntities

	foreach ( result in allResults )
	{
		if ( result.distanceSqr > maxDistSq )
			break

		returnEntities.append( result.ent )
	}

	return returnEntities
}

array<vector> function ArrayClosestVectorWithinDistance( array<vector> vecArray, vector origin, float maxDistance )
{
	array<ArrayDistanceEntry> allResults = ArrayDistanceResultsVector( vecArray, origin )
	float maxDistSq = maxDistance * maxDistance

	allResults.sort( DistanceCompareClosest )

	array<vector> returnVecs

	foreach ( result in allResults )
	{
		if ( result.distanceSqr > maxDistSq )
			break

		returnVecs.append( result.origin )
	}

	return returnVecs
}

// Return an array of entities ordered from closest to furthest from the specified origin, ignoring z
array<entity> function ArrayClosest2D( array<entity> entArray, vector origin )
{
	array<ArrayDistanceEntry> allResults = ArrayDistance2DResults( entArray, origin )

	allResults.sort( DistanceCompareClosest )

	array<entity> returnEntities

	foreach ( result in allResults )
		returnEntities.append( result.ent )

	return returnEntities
}

// Return an array of entities ordered from closest to furthest from the specified origin, ignoring z
array<vector> function ArrayClosest2DVector( array<vector> entArray, vector origin )
{
	array<ArrayDistanceEntry> allResults = ArrayDistance2DResultsVector( entArray, origin )

	allResults.sort( DistanceCompareClosest )

	array<vector> returnVecs

	foreach ( result in allResults )
		returnVecs.append( result.origin )

	return returnVecs
}

array<entity> function ArrayClosest2DWithinDistance( array<entity> entArray, vector origin, float maxDistance )
{
	array<ArrayDistanceEntry> allResults = ArrayDistance2DResults( entArray, origin )
	float maxDistSq = maxDistance * maxDistance

	allResults.sort( DistanceCompareClosest )

	array<entity> returnEntities

	foreach ( result in allResults )
	{
		if ( result.distanceSqr > maxDistSq )
			break

		returnEntities.append( result.ent )
	}

	return returnEntities
}

// Return an array of entities ordered from closest to furthest from the specified origin, ignoring z
array<vector> function ArrayClosest2DVectorWithinDistance( array<vector> entArray, vector origin, float maxDistance )
{
	array<ArrayDistanceEntry> allResults = ArrayDistance2DResultsVector( entArray, origin )
	float maxDistSq = maxDistance * maxDistance

	allResults.sort( DistanceCompareClosest )

	array<vector> returnVecs

	foreach ( result in allResults )
	{
		if ( result.distanceSqr > maxDistSq )
			break

		returnVecs.append( result.origin )
	}

	return returnVecs
}

bool function ArrayEntityWithinDistance( array<entity> entArray, vector origin, float distance )
{
	float distSq = distance * distance
	foreach( entity ent in entArray )
	{
		if ( DistanceSqr( ent.GetOrigin(), origin ) <= distSq )
			return true
	}
	return false
}

function TableRemove( Table, entry )
{
	Assert( typeof Table == "table" )

	foreach ( index, tableEntry in Table )
	{
		if ( tableEntry == entry )
		{
			Table[ index ] = null
		}
	}
}

function TableInvert( Table )
{
	table invertedTable = {}
	foreach ( key, value in Table )
		invertedTable[ value ] <- key

	return invertedTable
}

int function DistanceCompareClosest( ArrayDistanceEntry a, ArrayDistanceEntry b )
{
	if ( a.distanceSqr > b.distanceSqr )
		return 1
	else if ( a.distanceSqr < b.distanceSqr )
		return -1

	return 0;
}

int function DistanceCompareFarthest( ArrayDistanceEntry a, ArrayDistanceEntry b )
{
	if ( a.distanceSqr < b.distanceSqr )
		return 1
	else if ( a.distanceSqr > b.distanceSqr )
		return -1

	return 0;
}

array<ArrayDistanceEntry> function ArrayDistanceResults( array<entity> entArray, vector origin )
{
	array<ArrayDistanceEntry> allResults

	foreach ( ent in entArray )
	{
		ArrayDistanceEntry entry

		vector entOrigin = ent.GetOrigin()
		if ( IsSpawner( ent ) )
		{
			var spawnKVs = ent.GetSpawnEntityKeyValues()
			entOrigin = StringToVector( string( spawnKVs.origin ) )
		}
		entry.distanceSqr = DistanceSqr( entOrigin, origin )
		entry.ent = ent
		entry.origin = entOrigin

		allResults.append( entry )
	}

	return allResults
}

array<ArrayDistanceEntry> function ArrayDistanceResultsVector( array<vector> vecArray, vector origin )
{
	array<ArrayDistanceEntry> allResults

	foreach ( vec in vecArray )
	{
		ArrayDistanceEntry entry

		entry.distanceSqr = DistanceSqr( vec, origin )
		entry.ent = null
		entry.origin = vec

		allResults.append( entry )
	}

	return allResults
}

array<ArrayDistanceEntry> function ArrayDistance2DResults( array<entity> entArray, vector origin )
{
	array<ArrayDistanceEntry> allResults

	foreach ( ent in entArray )
	{
		ArrayDistanceEntry entry

		vector entOrigin = ent.GetOrigin()

		entry.distanceSqr = Distance2DSqr( entOrigin, origin )
		entry.ent = ent
		entry.origin = entOrigin

		allResults.append( entry )
	}

	return allResults
}

array<ArrayDistanceEntry> function ArrayDistance2DResultsVector( array<vector> vecArray, vector origin )
{
	array<ArrayDistanceEntry> allResults

	foreach ( vec in vecArray )
	{
		ArrayDistanceEntry entry

		entry.distanceSqr = Distance2DSqr( vec, origin )
		entry.ent = null
		entry.origin = vec

		allResults.append( entry )
	}

	return allResults
}

GravityLandData function GetGravityLandData( vector startPos, vector parentVelocity, vector objectVelocity, float timeLimit, bool bDrawPath = false, float bDrawPathDuration = 0.0, array pathColor = [ 255, 255, 0 ] )
{
	GravityLandData returnData

	Assert( timeLimit > 0 )

	float MAX_TIME_ELAPSE = 6.0
	float timeElapsePerTrace = 0.1

	float sv_gravity = 750.0
	float ent_gravity = 1.0
	float gravityScale = 1.0

	vector traceStart = startPos
	vector traceEnd = traceStart
	float traceFrac
	int traceCount = 0

	objectVelocity += parentVelocity

	while( returnData.elapsedTime <= timeLimit )
	{
		objectVelocity.z -= ( ent_gravity * sv_gravity * timeElapsePerTrace * gravityScale )

		traceEnd += objectVelocity * timeElapsePerTrace
		returnData.points.append( traceEnd )
		if ( bDrawPath )
			DebugDrawLine( traceStart, traceEnd, pathColor[0], pathColor[1], pathColor[2], false, bDrawPathDuration )

		traceFrac = TraceLineSimple( traceStart, traceEnd, null )
		traceCount++
		if ( traceFrac < 1.0 )
		{
			returnData.traceResults = TraceLine( traceStart, traceEnd, null, TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_NONE )
			return returnData
		}
		traceStart = traceEnd
		returnData.elapsedTime += timeElapsePerTrace
	}

	return returnData
}

float function GetPulseFrac( rate = 1, startTime = 0 )
{
	return (1 - cos( ( Time() - startTime ) * (rate * (2*PI)) )) / 2
}

bool function IsPetTitan( titan )
{
	Assert( titan.IsTitan() )

	return titan.GetTitanSoul().GetBossPlayer()	!= null
}

vector function StringToVector( string vecString, string delimiter = " " )
{
	array<string> tokens = split( vecString, delimiter )

	Assert( tokens.len() >= 3 )

	return Vector( float( tokens[0] ), float( tokens[1] ), float( tokens[2] ) )
}

float function GetShieldHealthFrac( entity ent )
{
	if ( !IsAlive( ent ) )
		return 0.0

	if ( HasSoul( ent ) )
	{
	entity soul = ent.GetTitanSoul()
		if ( IsValid( soul ) )
			ent = soul
	}

	int shieldHealth = ent.GetShieldHealth()
	int shieldMaxHealth = ent.GetShieldHealthMax()

	if ( shieldMaxHealth == 0 )
		return 0.0

	return float( shieldHealth ) / float( shieldMaxHealth )
}

vector function HackGetDeltaToRef( vector origin, vector angles, entity ent, string anim )
{
	AnimRefPoint animStartPos = ent.Anim_GetStartForRefPoint( anim, origin, angles )

	vector delta = origin - animStartPos.origin
	return origin + delta
}

vector function HackGetDeltaToRefOnPlane( vector origin, vector angles, entity ent, string anim, vector up )
{
	AnimRefPoint animStartPos = ent.Anim_GetStartForRefPoint( anim, origin, angles )

	vector delta 		= origin - animStartPos.origin
	vector nDelta 		= Normalize( delta )
	vector xProd 		= CrossProduct( nDelta, up )
	vector G 			= CrossProduct( up, xProd )
	vector planarDelta 	= G * DotProduct( delta, G )
	vector P 			= origin + planarDelta

//	DebugDrawLine( origin + delta, origin, 255, 0, 0, true, 1.0 )
//	DebugDrawLine( P, origin, 0,255, 100, true, 1.0 )

	return P
}

TraceResults function GetViewTrace( entity ent )
{
	vector traceStart = ent.EyePosition()
	vector traceEnd = traceStart + (ent.GetPlayerOrNPCViewVector() * 56756) // longest possible trace given our map size limits
	array<entity> ignoreEnts = [ ent ]

	return TraceLine( traceStart, traceEnd, ignoreEnts, TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_NONE )
}

function GetModSourceID( modString )
{
	foreach ( name, id in getconsttable().eModSourceId )
	{
		if ( string( name ) == modString )
			return id
	}

	return null
}

void function ArrayRemoveDead( array<entity> entArray )
{
	for ( int i = entArray.len() - 1; i >= 0; i-- )
	{
		if ( !IsAlive( entArray[ i ] ) )
			entArray.remove( i )
	}
}

array<entity> function GetSortedPlayers( IntFromEntityCompare compareFunc, int team )
{
	array<entity> players

	if ( team )
		players = GetPlayerArrayOfTeam( team )
	else
		players = GetPlayerArray()

	players.sort( compareFunc )

	return players
}


// Sorts by kills and resolves ties in this order: fewest deaths, most titan kills, most assists
int function CompareKills( entity a, entity b )
{
	int aVal = a.GetPlayerGameStat( PGS_KILLS )
	int bVal = b.GetPlayerGameStat( PGS_KILLS )

	if ( aVal < bVal )
		return 1
	else if ( aVal > bVal )
		return -1

	aVal = a.GetPlayerGameStat( PGS_DEATHS )
	bVal = b.GetPlayerGameStat( PGS_DEATHS )

	if ( aVal > bVal )
		return 1
	else if ( aVal < bVal )
		return -1

	aVal = a.GetPlayerGameStat( PGS_TITAN_KILLS )
	bVal = b.GetPlayerGameStat( PGS_TITAN_KILLS )

	if ( aVal < bVal )
		return 1
	else if ( aVal > bVal )
		return -1

	aVal = a.GetPlayerGameStat( PGS_ASSISTS )
	bVal = b.GetPlayerGameStat( PGS_ASSISTS )

	if ( aVal < bVal )
		return 1
	else if ( aVal > bVal )
		return -1

	return 0
}

// Sorts by kills and resolves ties in this order: fewest deaths, most titan kills, most assists
int function CompareAssaultScore( entity a, entity b )
{
	int aVal = a.GetPlayerGameStat( PGS_ASSAULT_SCORE )
	int bVal = b.GetPlayerGameStat( PGS_ASSAULT_SCORE )

	if ( aVal < bVal )
		return 1
	else if ( aVal > bVal )
		return -1

	return 0
}

int function CompareScore( entity a, entity b )
{
	int aVal = a.GetPlayerGameStat( PGS_SCORE )
	int bVal = b.GetPlayerGameStat( PGS_SCORE )

	if ( aVal < bVal )
		return 1
	else if ( aVal > bVal )
		return -1

	return 0
}

int function CompareAssault( entity a, entity b )
{
	int aVal = a.GetPlayerGameStat( PGS_ASSAULT_SCORE )
	int bVal = b.GetPlayerGameStat( PGS_ASSAULT_SCORE )

	if ( aVal < bVal )
		return 1
	else if ( aVal > bVal )
		return -1

	return 0
}

int function CompareDefense( entity a, entity b )
{
	int aVal = a.GetPlayerGameStat( PGS_DEFENSE_SCORE )
	int bVal = b.GetPlayerGameStat( PGS_DEFENSE_SCORE )

	if ( aVal < bVal )
		return 1
	else if ( aVal > bVal )
		return -1

	return 0
}

int function CompareLTS( entity a, entity b )
{
	int result = CompareTitanKills( a, b )
	if ( result != 0 )
		return result

	int aVal = a.GetPlayerGameStat( PGS_ASSAULT_SCORE )
	int bVal = b.GetPlayerGameStat( PGS_ASSAULT_SCORE )

	if ( aVal < bVal )
		return 1
	else if ( aVal > bVal )
		return -1

	return 0
}

int function CompareCP( entity a, entity b )
{
	// Capture Point sorting. Sort priority = assault + defense > pilot kills > titan kills > death

	{
		int aVal = a.GetPlayerGameStat( PGS_ASSAULT_SCORE )
		int bVal = b.GetPlayerGameStat( PGS_ASSAULT_SCORE )

		aVal += a.GetPlayerGameStat( PGS_DEFENSE_SCORE )
		bVal += b.GetPlayerGameStat( PGS_DEFENSE_SCORE )

		if ( aVal < bVal )
			return 1
		else if ( aVal > bVal )
			return -1
	}

	// 3) Pilot Kills
	{
		int aVal = a.GetPlayerGameStat( PGS_KILLS )
		int bVal = b.GetPlayerGameStat( PGS_KILLS )

		if ( aVal < bVal )
			return 1
		else if ( aVal > bVal )
			return -1
	}

	// 3) Titan Kills
	{
		int aVal = a.GetPlayerGameStat( PGS_TITAN_KILLS )
		int bVal = b.GetPlayerGameStat( PGS_TITAN_KILLS )

		if ( aVal < bVal )
			return 1
		else if ( aVal > bVal )
			return -1
	}

	// 4) Deaths
	{
		int aVal = a.GetPlayerGameStat( PGS_DEATHS )
		int bVal = b.GetPlayerGameStat( PGS_DEATHS )

		if ( aVal < bVal )
			return -1
		else if ( aVal > bVal )
			return 1
	}

	return 0
}


int function CompareCTF( entity a, entity b )
{
	// Capture the flag sorting. Sort priority = flag captures > flag returns > pilot kills > titan kills > death

	// 1) Flag Captures
	int result = CompareAssault( a, b )
	if ( result != 0 )
		return result

	// 2) Flag Returns
	result = CompareDefense( a, b )
	if ( result != 0 )
		return result

	// 3) Pilot Kills
	int aVal = a.GetPlayerGameStat( PGS_KILLS )
	int bVal = b.GetPlayerGameStat( PGS_KILLS )

	if ( aVal < bVal )
		return 1
	else if ( aVal > bVal )
		return -1

	// 3) Titan Kills
	aVal = a.GetPlayerGameStat( PGS_TITAN_KILLS )
	bVal = b.GetPlayerGameStat( PGS_TITAN_KILLS )

	if ( aVal < bVal )
		return 1
	else if ( aVal > bVal )
		return -1

	// 4) Deaths
	aVal = a.GetPlayerGameStat( PGS_DEATHS )
	bVal = b.GetPlayerGameStat( PGS_DEATHS )

	if ( aVal < bVal )
		return -1
	else if ( aVal > bVal )
		return 1

	return 0
}

int function CompareSpeedball( entity a, entity b )
{
	// Capture the flag sorting. Sort priority = pilot kills > flag captures > death

	// 1) Pilot Kills
	int aVal = a.GetPlayerGameStat( PGS_KILLS )
	int bVal = b.GetPlayerGameStat( PGS_KILLS )

	if ( aVal < bVal )
		return 1
	else if ( aVal > bVal )
		return -1

	// 2) Flag Captures
	int result = CompareAssault( a, b )
	if ( result != 0 )
		return result

	// 3) Deaths
	aVal = a.GetPlayerGameStat( PGS_DEATHS )
	bVal = b.GetPlayerGameStat( PGS_DEATHS )

	if ( aVal < bVal )
		return -1
	else if ( aVal > bVal )
		return 1

	return 0
}

int function CompareMFD( entity a, entity b )
{
	// 1) Marks Killed
	int result = CompareAssault( a, b )
	if ( result != 0 )
		return result

	// 2) Marks Outlasted
 	result = CompareDefense( a, b )
	if ( result != 0 )
		return result

	// 3) Pilot Kills
	int aVal = a.GetPlayerGameStat( PGS_KILLS )
	int bVal = b.GetPlayerGameStat( PGS_KILLS )

	if ( aVal < bVal )
		return 1
	else if ( aVal > bVal )
		return -1

	// 4) Titan Kills
	aVal = a.GetPlayerGameStat( PGS_TITAN_KILLS )
	bVal = b.GetPlayerGameStat( PGS_TITAN_KILLS )

	if ( aVal < bVal )
		return 1
	else if ( aVal > bVal )
		return -1

	// 5) Deaths
	aVal = a.GetPlayerGameStat( PGS_DEATHS )
	bVal = b.GetPlayerGameStat( PGS_DEATHS )

	if ( aVal < bVal )
		return -1
	else if ( aVal > bVal )
		return 1

	return 0
}

int function CompareScavenger( entity a, entity b )
{
	// 1) Ore Captured
	int result = CompareAssault( a, b )
	if ( result != 0 )
		return result

	// 2) Pilot Kills
	int aVal = a.GetPlayerGameStat( PGS_KILLS )
	int bVal = b.GetPlayerGameStat( PGS_KILLS )

	if ( aVal < bVal )
		return 1
	else if ( aVal > bVal )
		return -1

	// 3) Titan Kills
	aVal = a.GetPlayerGameStat( PGS_TITAN_KILLS )
	bVal = b.GetPlayerGameStat( PGS_TITAN_KILLS )

	if ( aVal < bVal )
		return 1
	else if ( aVal > bVal )
		return -1

	// 4) Deaths
	aVal = a.GetPlayerGameStat( PGS_DEATHS )
	bVal = b.GetPlayerGameStat( PGS_DEATHS )

	if ( aVal < bVal )
		return -1
	else if ( aVal > bVal )
		return 1

	return 0
}

int function CompareFW( entity a, entity b )
{
	// Capture Point sorting. Sort priority = assault + defense > pilot kills > titan kills > death

	{
		int aVal = a.GetPlayerGameStat( PGS_ASSAULT_SCORE )
		int bVal = b.GetPlayerGameStat( PGS_ASSAULT_SCORE )

		aVal += a.GetPlayerGameStat( PGS_DEFENSE_SCORE )
		bVal += b.GetPlayerGameStat( PGS_DEFENSE_SCORE )

		if ( aVal < bVal )
			return 1
		else if ( aVal > bVal )
			return -1
	}

	// 3) Pilot Kills
	{
		int aVal = a.GetPlayerGameStat( PGS_KILLS )
		int bVal = b.GetPlayerGameStat( PGS_KILLS )

		if ( aVal < bVal )
			return 1
		else if ( aVal > bVal )
			return -1
	}

	// 3) Titan Kills
	{
		int aVal = a.GetPlayerGameStat( PGS_TITAN_KILLS )
		int bVal = b.GetPlayerGameStat( PGS_TITAN_KILLS )

		if ( aVal < bVal )
			return 1
		else if ( aVal > bVal )
			return -1
	}

	// 4) Deaths
	{
		int aVal = a.GetPlayerGameStat( PGS_DEATHS )
		int bVal = b.GetPlayerGameStat( PGS_DEATHS )

		if ( aVal < bVal )
			return -1
		else if ( aVal > bVal )
			return 1
	}

	return 0
}

int function CompareHunter( entity a, entity b )
{
	// Capture Point sorting. Sort priority = assault + defense > pilot kills > titan kills > death

	{
		int aVal = a.GetPlayerGameStat( PGS_ASSAULT_SCORE )
		int bVal = b.GetPlayerGameStat( PGS_ASSAULT_SCORE )

		aVal += a.GetPlayerGameStat( PGS_DEFENSE_SCORE )
		bVal += b.GetPlayerGameStat( PGS_DEFENSE_SCORE )

		if ( aVal < bVal )
			return 1
		else if ( aVal > bVal )
			return -1
	}

	// 3) Pilot Kills
	{
		int aVal = a.GetPlayerGameStat( PGS_KILLS )
		int bVal = b.GetPlayerGameStat( PGS_KILLS )

		if ( aVal < bVal )
			return 1
		else if ( aVal > bVal )
			return -1
	}

	// 3) Titan Kills
	{
		int aVal = a.GetPlayerGameStat( PGS_TITAN_KILLS )
		int bVal = b.GetPlayerGameStat( PGS_TITAN_KILLS )

		if ( aVal < bVal )
			return 1
		else if ( aVal > bVal )
			return -1
	}

	// 4) Deaths
	{
		int aVal = a.GetPlayerGameStat( PGS_DEATHS )
		int bVal = b.GetPlayerGameStat( PGS_DEATHS )

		if ( aVal < bVal )
			return -1
		else if ( aVal > bVal )
			return 1
	}

	return 0
}

// Sorts by kills, deaths and then cash
int function CompareATCOOP( entity a, entity b )
{
	int aVal = a.GetPlayerGameStat( PGS_KILLS )
	int bVal = b.GetPlayerGameStat( PGS_KILLS )

	if ( aVal < bVal )
		return 1
	else if ( aVal > bVal )
		return -1

	aVal = a.GetPlayerGameStat( PGS_DEATHS )
	bVal = b.GetPlayerGameStat( PGS_DEATHS )

	if ( aVal > bVal )
		return 1
	else if ( aVal < bVal )
		return -1

	aVal = a.GetPlayerGameStat( PGS_SCORE )
	bVal = b.GetPlayerGameStat( PGS_SCORE )

	if ( aVal < bVal )
		return 1
	else if ( aVal > bVal )
		return -1

	return 0
}

int function CompareFD( entity a, entity b )
{
	int aVal = a.GetPlayerGameStat( PGS_DETONATION_SCORE )
	int bVal = b.GetPlayerGameStat( PGS_DETONATION_SCORE )

	if ( aVal < bVal )
		return 1
	else if ( aVal > bVal )
		return -1

	return 0
}

int function CompareTitanKills( entity a, entity b )
{
	int aVal = a.GetPlayerGameStat( PGS_TITAN_KILLS )
	int bVal = b.GetPlayerGameStat( PGS_TITAN_KILLS )

	if ( aVal < bVal )
		return 1
	else if ( aVal > bVal )
		return -1

	return 0
}

bool function TitanEjectIsDisabled()
{
	return GetGlobalNetBool( "titanEjectEnabled" ) == false
}

bool function IsHitEffectiveVsTitan( entity victim, int damageType )
{
	Assert( victim.IsTitan() )

	if ( victim.IsPlayer() )
	{
		if ( PlayerHasPassive( victim, ePassives.PAS_BERSERKER ) )
			return false
	}

	if ( !( damageType & DF_CRITICAL ) && ( damageType & DF_BULLET || damageType & DF_MAX_RANGE ) )
		return false

	return true
}

bool function IsHitEffectiveVsNonTitan( entity victim, int damageType )
{
	if ( damageType & DF_BULLET || damageType & DF_MAX_RANGE )
		return false;

	return true
}

bool function IsPilot( entity ent )
{
	if ( !IsValid( ent ) )
		return false

	if ( !ent.IsPlayer() )
		return false

	if ( ent.IsTitan() )
		return false

	return true
}

bool function IsPilotDecoy( entity ent )
{
	if ( !IsValid( ent ) )
		return false

	if ( ent.GetClassName() != "player_decoy" )
		return false

	return true
}

string function HardpointIDToString( int id )
{
	array<string> hardpointIDString = [ "a", "b", "c" ]

	Assert( id >= 0 && id < hardpointIDString.len() )

	return hardpointIDString[ id ]
}

string function Dev_TeamIDToString( id )
{
	if ( id == TEAM_IMC )
		return "IMC"
	if ( id == TEAM_MILITIA )
		return "MIL"

	return "UNASSIGNED/UNKNOWN TEAM NAME"
}

array<entity> function ArrayWithin( array<entity> Array, vector origin, float maxDist )
{
	float maxDistSqr = maxDist * maxDist

	array<entity> resultArray = []
	foreach ( ent in Array )
	{
		float distSqr = DistanceSqr( origin, ent.GetOrigin() )
		if ( distSqr <= maxDistSqr )
			resultArray.append( ent )
	}
	return resultArray
}

function GetTitanChassis( entity titan )
{
	if ( !("titanChassis" in titan.s ) )
	{
		if ( HasSoul( titan ) )
		{
			entity soul = titan.GetTitanSoul()
			titan.s.titanChassis <- GetSoulTitanSubClass( soul )
		}
		else
		{
			return "Invalid Chassis"
		}
	}

	return titan.s.titanChassis
}

vector function ClampVectorToCube( vector vecStart, vector vec, vector cubeOrigin, float cubeSize )
{
	float halfCubeSize = cubeSize * 0.5
	vector cubeMins = < -halfCubeSize, -halfCubeSize, -halfCubeSize >
	vector cubeMaxs = < halfCubeSize, halfCubeSize, halfCubeSize >

	return ClampVectorToBox( vecStart, vec, cubeOrigin, cubeMins, cubeMaxs )
}

vector function ClampVectorToBox( vector vecStart, vector vec, vector cubeOrigin, vector cubeMins, vector cubeMaxs )
{
	float smallestClampScale = 1.0
	vector vecEnd = vecStart + vec

	smallestClampScale = ClampVectorComponentToCubeMax( cubeOrigin.x, cubeMaxs.x, vecStart.x, vecEnd.x, vec.x, smallestClampScale )
	smallestClampScale = ClampVectorComponentToCubeMax( cubeOrigin.y, cubeMaxs.y, vecStart.y, vecEnd.y, vec.y, smallestClampScale )
	smallestClampScale = ClampVectorComponentToCubeMax( cubeOrigin.z, cubeMaxs.z, vecStart.z, vecEnd.z, vec.z, smallestClampScale )
	smallestClampScale = ClampVectorComponentToCubeMin( cubeOrigin.x, cubeMins.x, vecStart.x, vecEnd.x, vec.x, smallestClampScale )
	smallestClampScale = ClampVectorComponentToCubeMin( cubeOrigin.y, cubeMins.y, vecStart.y, vecEnd.y, vec.y, smallestClampScale )
	smallestClampScale = ClampVectorComponentToCubeMin( cubeOrigin.z, cubeMins.z, vecStart.z, vecEnd.z, vec.z, smallestClampScale )

	return vec * smallestClampScale
}

float function ClampVectorComponentToCubeMax( float cubeOrigin, float cubeSize, float vecStart, float vecEnd, float vec, float smallestClampScale )
{
	float max = cubeOrigin + cubeSize
	float clearance = fabs( vecStart - max )
	if ( vecEnd > max )
	{
		float scale = fabs( clearance / ( ( vecStart + vec ) - vecStart ) )
		if ( scale > 0 && scale < smallestClampScale )
			return scale
	}

	return smallestClampScale
}

float function ClampVectorComponentToCubeMin( float cubeOrigin, float cubeSize, float vecStart, float vecEnd, float vec, float smallestClampScale )
{
	float min = cubeOrigin - cubeSize
	float clearance = fabs( min - vecStart )
	if ( vecEnd < min )
	{
		float scale = fabs( clearance / ( ( vecStart + vec ) - vecStart ) )
		if ( scale > 0 && scale < smallestClampScale )
			return scale
	}

	return smallestClampScale
}

bool function PointInCapsule( vector vecBottom, vector vecTop, float radius, vector point )
{
	return GetDistanceFromLineSegment( vecBottom, vecTop, point ) <= radius
}

bool function PointInCylinder( vector vecBottom, vector vecTop, float radius, vector point )
{
	if ( GetDistanceFromLineSegment( vecBottom, vecTop, point ) > radius )
		return false

	vector bottomVec = Normalize( vecTop - vecBottom )
	vector pointToBottom = Normalize( point - vecBottom )

	vector topVec = Normalize( vecBottom - vecTop )
	vector pointToTop = Normalize( point - vecTop )

	if ( DotProduct( bottomVec, pointToBottom ) < 0 )
		return false

	if ( DotProduct( topVec, pointToTop ) < 0.0 )
		return false

	return true
}

float function AngleDiff( float ang, float targetAng )
{
	float delta = ( targetAng - ang ) % 360.0
	if ( targetAng > ang )
	{
		if ( delta >= 180.0 )
			delta -= 360.0;
	}
	else
	{
		if ( delta <= -180.0 )
			delta += 360.0;
	}
	return delta
}


float function ClampAngle( float ang )
{
	while( ang > 360 )
		ang -= 360
	while( ang < 0 )
		ang += 360
	return ang
}

float function ClampAngle180( float ang )
{
	while( ang > 180 )
		ang -= 180
	while( ang < -180 )
		ang += 180
	return ang
}

vector function ShortestRotation( vector ang, vector targetAng )
{
	return Vector( AngleDiff( ang.x, targetAng.x ), AngleDiff( ang.y, targetAng.y ), AngleDiff( ang.z, targetAng.z ) )
}

int function GetWinningTeam()
{
	if ( level.nv.winningTeam != null )
		return expect int( level.nv.winningTeam )

	if ( IsFFAGame() )
		return GetWinningTeam_FFA()

	if ( IsRoundBased() )
	{
		if ( GameRules_GetTeamScore2( TEAM_IMC ) > GameRules_GetTeamScore2( TEAM_MILITIA ) )
			return TEAM_IMC

		if ( GameRules_GetTeamScore2( TEAM_MILITIA ) > GameRules_GetTeamScore2( TEAM_IMC ) )
			return TEAM_MILITIA
	}
	else
	{
		if ( GameRules_GetTeamScore( TEAM_IMC ) > GameRules_GetTeamScore( TEAM_MILITIA ) )
			return TEAM_IMC

		if ( GameRules_GetTeamScore( TEAM_MILITIA ) > GameRules_GetTeamScore( TEAM_IMC ) )
			return TEAM_MILITIA
	}

	return TEAM_UNASSIGNED
}

int function GetWinningTeam_FFA()
{
	if ( level.nv.winningTeam != null )
		return expect int( level.nv.winningTeam )

	int maxScore = 0
	int playerTeam
	int currentScore
	int winningTeam = TEAM_UNASSIGNED

	foreach( player in GetPlayerArray() )
	{
		playerTeam = player.GetTeam()
		if ( IsRoundBased() )
			currentScore = GameRules_GetTeamScore2( playerTeam )
		else
			currentScore = GameRules_GetTeamScore( playerTeam )

		if ( currentScore == maxScore) //Treat multiple teams as having the same score as no team winning
			winningTeam = TEAM_UNASSIGNED

		if ( currentScore > maxScore )
		{
			maxScore = currentScore
			winningTeam = playerTeam
		}
	}

	return winningTeam

}

void function EmitSkyboxSoundAtPosition( vector positionInSkybox, string sound, float skyboxScale = 0.001, bool clamp = false )
{
	if ( IsServer() )
		clamp = true // sounds cannot play outside 16k limit on server
	vector position = SkyboxToWorldPosition( positionInSkybox, skyboxScale, clamp )
	EmitSoundAtPosition( TEAM_UNASSIGNED, position, sound )
}

vector function SkyboxToWorldPosition( vector positionInSkybox, float skyboxScale = 0.001, bool clamp = true )
{
	Assert( skyboxScale > 0 )
	Assert( "skyboxCamOrigin" in level )

	vector position = Vector( 0.0, 0.0, 0.0 )
	vector skyOrigin = expect vector( level.skyboxCamOrigin )

	#if CLIENT
		position = ( positionInSkybox - skyOrigin ) * ( 1.0 / skyboxScale )

		if ( clamp )
		{
			entity localViewPlayer = GetLocalViewPlayer()
			Assert( localViewPlayer )
			vector localViewPlayerOrg = localViewPlayer.GetOrigin()

			position = localViewPlayerOrg + ClampVectorToCube( localViewPlayerOrg, position - localViewPlayerOrg, Vector( 0.0, 0.0, 0.0 ), 32000.0 )
		}
	#else
		position = ( positionInSkybox - skyOrigin ) * ( 1.0 / skyboxScale )

		if ( clamp )
			position = ClampVectorToCube( Vector( 0.0, 0.0, 0.0 ), position, Vector( 0.0, 0.0, 0.0 ), 32000.0 )
	#endif // CLIENT

	return position
}

void function FadeOutSoundOnEntityAfterDelay( entity ent, string soundAlias, float delay, float fadeTime )
{
	if ( !IsValid( ent ) )
		return

	ent.EndSignal( "OnDestroy" )
	wait delay
	FadeOutSoundOnEntity( ent, soundAlias, fadeTime )
}

function GetRandomKeyFromWeightedTable( Table )
{
	local weightTotal = 0.0
	foreach ( key, value in Table )
	{
		weightTotal += value
	}

	local randomValue = RandomFloat( weightTotal )

	foreach ( key, value in Table )
	{
		if ( randomValue <= weightTotal && randomValue >= weightTotal - value)
			 return key
		weightTotal -= value
	}
}

bool function IsMatchOver()
{
	if ( IsRoundBased() && level.nv.gameEndTime )
		return true
	else if ( !IsRoundBased() && level.nv.gameEndTime && Time() > level.nv.gameEndTime )
		return true

	return false
}

bool function IsScoringNonStandard()
{
	return expect bool( level.nv.nonStandardScoring )
}

bool function IsRoundBased()
{
	return expect bool( level.nv.roundBased )
}

int function GetRoundsPlayed()
{
	return expect int( level.nv.roundsPlayed )
}

bool function IsEliminationBased()
{
	return Riff_EliminationMode() != eEliminationMode.Default
}

bool function IsPilotEliminationBased()
{
	return ( Riff_EliminationMode() == eEliminationMode.Pilots || Riff_EliminationMode() == eEliminationMode.PilotsTitans )
}

bool function IsTitanEliminationBased()
{
	return ( Riff_EliminationMode() == eEliminationMode.Titans || Riff_EliminationMode() == eEliminationMode.PilotsTitans )
}

bool function IsSingleTeamMode()
{
	return ( 1 == GetCurrentPlaylistVarInt( "max_teams", 2 ) )
}

void function __WarpInEffectShared( vector origin, vector angles, string sfx, float preWaitOverride = -1.0 )
{
	float preWait = 2.0
	float sfxWait = 0.1
	float totalTime = WARPINFXTIME

	if ( sfx == "" )
		sfx = "dropship_warpin"

	if ( preWaitOverride >= 0.0 )
		wait preWaitOverride
	else
		wait preWait  //this needs to go and the const for warpin fx time needs to change - but not this game - the intro system is too dependent on it

	#if CLIENT
		int fxIndex = GetParticleSystemIndex( FX_GUNSHIP_CRASH_EXPLOSION_ENTRANCE )
		StartParticleEffectInWorld( fxIndex, origin, angles )
	#else
		entity fx = PlayFX( FX_GUNSHIP_CRASH_EXPLOSION_ENTRANCE, origin, angles )
		fx.FXEnableRenderAlways()
		fx.DisableHibernation()
	#endif // CLIENT

	wait sfxWait
	EmitSoundAtPosition( TEAM_UNASSIGNED, origin, sfx )

	wait totalTime - preWait - sfxWait
}

void function __WarpOutEffectShared( entity dropship )
{
	int attach = dropship.LookupAttachment( "origin" )
	vector origin = dropship.GetAttachmentOrigin( attach )
	vector angles = dropship.GetAttachmentAngles( attach )

	#if CLIENT
		int fxIndex = GetParticleSystemIndex( FX_GUNSHIP_CRASH_EXPLOSION_EXIT )
		StartParticleEffectInWorld( fxIndex, origin, angles )
	#else
		entity fx = PlayFX( FX_GUNSHIP_CRASH_EXPLOSION_EXIT, origin, angles )
		fx.FXEnableRenderAlways()
		fx.DisableHibernation()
	#endif // CLIENT

	EmitSoundAtPosition( TEAM_UNASSIGNED, origin, "dropship_warpout" )
}

bool function IsSwitchSidesBased()
{
	return (level.nv.switchedSides != null)
}

int function HasSwitchedSides() //This returns an int instead of a bool! Should rewrite
{
	return expect int( level.nv.switchedSides )
}

bool function IsFirstRoundAfterSwitchingSides()
{
	if ( !IsSwitchSidesBased() )
		return false

	if ( IsRoundBased() )
		return  level.nv.switchedSides > 0 && GetRoundsPlayed() == level.nv.switchedSides
	else
		return  level.nv.switchedSides > 0

	unreachable
}

void function CamBlendFov( entity cam, float oldFov, float newFov, float transTime, float transAccel, float transDecel )
{
	if ( !IsValid( cam ) )
		return

	cam.EndSignal( "OnDestroy" )

	float currentTime = Time()
	float startTime = currentTime
	float endTime = startTime + transTime

	while ( endTime > currentTime )
	{
		float interp = Interpolate( startTime, endTime - startTime, transAccel, transDecel )
		cam.SetFOV( GraphCapped( interp, 0.0, 1.0, oldFov, newFov ) )
		wait( 0.0 )
		currentTime = Time()
	}
}

void function CamFollowEnt( entity cam, entity ent, float duration, vector offset = <0.0, 0.0, 0.0>, string attachment = "", bool isInSkybox = false )
{
	if ( !IsValid( cam ) )
		return

	cam.EndSignal( "OnDestroy" )

	vector camOrg = Vector( 0.0, 0.0, 0.0 )

	vector targetPos = Vector( 0.0, 0.0, 0.0 )
	float currentTime = Time()
	float startTime = currentTime
	float endTime = startTime + duration
	vector diff = Vector( 0.0, 0.0, 0.0 )
	int attachID = ent.LookupAttachment( attachment )

	while ( endTime > currentTime )
	{
		camOrg = cam.GetOrigin()

		if ( attachID <= 0 )
			targetPos = ent.GetOrigin()
		else
			targetPos = ent.GetAttachmentOrigin( attachID )

		if ( isInSkybox )
			targetPos = SkyboxToWorldPosition( targetPos )
		diff = ( targetPos + offset ) - camOrg

		cam.SetAngles( VectorToAngles( diff ) )

		wait( 0.0 )

		currentTime = Time()
	}
}

void function CamFacePos( entity cam, vector pos, float duration )
{
	if ( !IsValid( cam ) )
		return

	cam.EndSignal( "OnDestroy" )

	float currentTime = Time()
	float startTime = currentTime
	float endTime = startTime + duration
	vector diff = Vector( 0.0, 0.0, 0.0 )

	while ( endTime > currentTime )
	{
		diff = pos - cam.GetOrigin()

		cam.SetAngles( VectorToAngles( diff ) )

		wait( 0.0 )

		currentTime = Time()
	}
}

void function CamBlendFromFollowToAng( entity cam, entity ent, vector endAng, float transTime, float transAccel, float transDecel )
{
	if ( !IsValid( cam ) )
		return

	cam.EndSignal( "OnDestroy" )

	vector camOrg = cam.GetOrigin()

	float currentTime = Time()
	float startTime = currentTime
	float endTime = startTime + transTime

	while ( endTime > currentTime )
	{
		vector diff = ent.GetOrigin() - camOrg
		vector anglesToEnt = VectorToAngles( diff )

		float frac = Interpolate( startTime, endTime - startTime, transAccel, transDecel )

		vector newAngs = anglesToEnt + ShortestRotation( anglesToEnt, endAng ) * frac

		cam.SetAngles( newAngs )

		wait( 0.0 )

		currentTime = Time()
	}
}

void function CamBlendFromPosToPos( entity cam, vector startPos, vector endPos, float transTime, float transAccel, float transDecel )
{
	if ( !IsValid( cam ) )
		return

	cam.EndSignal( "OnDestroy" )

	float currentTime = Time()
	float startTime = currentTime
	float endTime = startTime + transTime
	vector diff = endPos - startPos

	while ( endTime > currentTime )
	{
		float frac = Interpolate( startTime, endTime - startTime, transAccel, transDecel )

		vector newAngs = startPos + diff * frac

		cam.SetOrigin( newAngs )

		wait( 0.0 )

		currentTime = Time()
	}
}

void function CamBlendFromAngToAng( entity cam, vector startAng, vector endAng, float transTime, float transAccel, float transDecel )
{
	if ( !IsValid( cam ) )
		return

	cam.EndSignal( "OnDestroy" )

	float currentTime = Time()
	float startTime = currentTime
	float endTime = startTime + transTime

	while ( endTime > currentTime )
	{
		float frac = Interpolate( startTime, endTime - startTime, transAccel, transDecel )

		vector newAngs = startAng + ShortestRotation( startAng, endAng ) * frac

		cam.SetAngles( newAngs )

		wait( 0.0 )

		currentTime = Time()
	}
}

int function AddBitMask( int bitsExisting, int bitsToAdd )
{
	return bitsExisting | bitsToAdd
}

int function RemoveBitMask( int bitsExisting, int bitsToRemove )
{
	return bitsExisting & ( ~bitsToRemove )
}

bool function HasBitMask( int bitsExisting, int bitsToCheck )
{
	int bitsCommon = bitsExisting & bitsToCheck
	return bitsCommon == bitsToCheck
}

float function GetDeathCamLength( entity player )
{
	if ( !GamePlayingOrSuddenDeath() )
		return DEATHCAM_TIME_SHORT
	else
		return DEATHCAM_TIME

	unreachable
}

float function GetRespawnButtonCamTime( player )
{
	if ( !GamePlayingOrSuddenDeath() )
		return DEATHCAM_TIME_SHORT + RESPAWN_BUTTON_BUFFER
	else
		return DEATHCAM_TIME + RESPAWN_BUTTON_BUFFER

	unreachable
}

float function GetKillReplayAfterTime( player )
{
	if ( IsSingleplayer() )
		return 4.0

	if ( !GamePlayingOrSuddenDeath() )
		return KILL_REPLAY_AFTER_KILL_TIME_SHORT

	return KILL_REPLAY_AFTER_KILL_TIME
}

function IntroPreviewOn()
{
	local bugnum = GetBugReproNum()
	switch( bugnum )
	{
		case 1337:
		case 13371:
		case 13372:
		case 13373:
		case 1338:
		case 13381:
		case 13382:
		case 13383:
			return bugnum

		default:
			return null
	}
}

bool function EntHasModelSet( entity ent )
{
	asset modelName = ent.GetModelName()

	if ( modelName == $"" || modelName == $"?" )
		return false

	return true
}

string function GenerateTitanOSAlias( entity player, string aliasSuffix )
{
	//HACK: Temp fix for blocker bug. Fixing correctly next.
	if ( IsSingleplayer() )
	{
		return "diag_gs_titanBt_" + aliasSuffix
	}
	else
	{
		entity titan
		if ( player.IsTitan() )
			titan = player
		else
			titan = player.GetPetTitan()

		Assert( IsValid( titan ) )
		string titanCharacterName = GetTitanCharacterName( titan )
		string primeTitanString = ""

		if ( IsTitanPrimeTitan( titan ) )
			primeTitanString = "_prime"

		string modifiedAlias = "diag_gs_titan" + titanCharacterName + primeTitanString + "_" + aliasSuffix
		return modifiedAlias
	}
	unreachable
}

void function AddCallback_OnUseEntity( entity ent, callbackFunc )
{
	AssertParameters( callbackFunc, 2, "ent, player" )

	if ( !( "onUseEntityCallbacks" in ent.s ) )
		ent.s.onUseEntityCallbacks <- []

	Assert( !ent.s.onUseEntityCallbacks.contains( callbackFunc ), "Already added " + FunctionToString( callbackFunc ) + " with AddCalback_OnUseEntity" )
	ent.s.onUseEntityCallbacks.append( callbackFunc )
}

void function SetWaveSpawnType( int spawnType )
{
	shGlobal.waveSpawnType = spawnType
}

int function GetWaveSpawnType()
{
	return shGlobal.waveSpawnType
}

void function SetWaveSpawnInterval( float interval )
{
	shGlobal.waveSpawnInterval = interval
}

float function GetWaveSpawnInterval()
{
	return shGlobal.waveSpawnInterval
}

bool function IsArcTitan( entity npc )
{
	return npc.GetAISettingsName() == "npc_titan_arc"
}

bool function IsNukeTitan( entity npc )
{
	return npc.GetAISettingsName() == "npc_titan_nuke"
}

bool function IsMortarTitan( entity npc )
{
	return npc.GetAISettingsName() == "npc_titan_mortar"
}

bool function IsFragDrone( entity npc )
{
	#if SERVER
		return npc.GetClassName() == "npc_frag_drone"
	#endif

	#if CLIENT
		return npc.GetSignifierName() == "npc_frag_drone"
	#endif
}

bool function IsSniperSpectre( entity npc )
{
	return false
}

bool function IsVortexSphere( entity ent )
{
	return ( ent.GetClassName() == "vortex_sphere" )
}

bool function PointIsWithinBounds( vector point, vector mins, vector maxs )
{
	Assert( mins.x < maxs.x )
	Assert( mins.y < maxs.y )
	Assert( mins.z < maxs.z )

	return ( ( point.z >= mins.z && point.z <= maxs.z ) &&
			 ( point.x >= mins.x && point.x <= maxs.x ) &&
			 ( point.y >= mins.y && point.y <= maxs.y ) )
}

int function GetSpStartIndex()
{
	//HACK -> this should use some other code driven thing, not GetBugReproNum
	int index = GetBugReproNum()

	if ( index < 0 )
		return 0

	return index
}

// return all living soldiers
array<entity> function GetAllSoldiers()
{
	return GetNPCArrayByClass( "npc_soldier" )
}

int function GameTeams_GetNumLivingPlayers( int teamIndex = TEAM_ANY )
{
	int noOfLivingPlayers = 0

	array<entity> players
	if ( teamIndex == TEAM_ANY )
		players = GetPlayerArray()
	else
		players = GetPlayerArrayOfTeam( teamIndex )

	foreach ( player in players )
	{
		if ( !IsAlive( player ) )
			continue

		++noOfLivingPlayers
	}

	return noOfLivingPlayers
}

bool function GameTeams_TeamHasDeadPlayers( int team )
{
	array<entity> teamPlayers = GetPlayerArrayOfTeam( team )
	foreach ( entity teamPlayer in teamPlayers )
	{
		if ( !IsAlive( teamPlayer ) )
			return true
	}
	return false
}

typedef EntitiesDidLoadCallbackType void functionref()
array<EntitiesDidLoadCallbackType> _EntitiesDidLoadTypedCallbacks

void function RunCallbacks_EntitiesDidLoad()
{
	// reloading the level so don't do callbacks
	if ( "forcedReloading" in level )
		return

	foreach ( callback in _EntitiesDidLoadTypedCallbacks )
	{
		thread callback()
	}
}

void function AddCallback_EntitiesDidLoad( EntitiesDidLoadCallbackType callback )
{
	_EntitiesDidLoadTypedCallbacks.append( callback )
}

bool function IsTitanNPC( entity ent )
{
	return ent.IsTitan() && ent.IsNPC()
}

entity function InflictorOwner( entity inflictor )
{
	if ( IsValid( inflictor ) )
	{
		entity inflictorOwner = inflictor.GetOwner()
		if ( IsValid( inflictorOwner ) )
			inflictor = inflictorOwner
	}

	return inflictor
}

bool function IsPlayerControlledSpectre( entity ent )
{
	return ent.GetClassName() == "npc_spectre" && ent.GetBossPlayer() != null
}

bool function IsPlayerControlledTurret( entity ent )
{
	return IsTurret( ent ) && ent.GetBossPlayer() != null
}

bool function TitanShieldDecayEnabled()
{
	return ( GetCurrentPlaylistVarInt( "titan_shield_decay", 0 ) == 1 )
}

bool function TitanShieldRegenEnabled()
{
	return ( GetCurrentPlaylistVarInt( "titan_shield_regen", 0 ) == 1 )
}

bool function DoomStateDisabled()
{
	return ( GetCurrentPlaylistVarString( "titan_doomstate_variation", "default" ) == "disabled" || GetCurrentPlaylistVarString( "titan_doomstate_variation", "default" ) == "lastsegment" )
}

bool function NoWeaponDoomState()
{
	return ( GetCurrentPlaylistVarString( "titan_doomstate_variation", "default" ) == "noweapon" )
}

entity function GetPetTitanOwner( entity titan )
{
	array<entity> players = GetPlayerArray()
	entity foundPlayer
	foreach ( player in players )
	{
		if ( player.GetPetTitan() == titan )
		{
			Assert( foundPlayer == null, player + " and " + foundPlayer + " both own " + titan )
			foundPlayer = player
		}
	}

	return foundPlayer
}

entity function GetSoulFromPlayer( entity player )
{
	Assert( player.IsPlayer(), "argument should be a player" )

	if ( player.IsTitan() )
		return player.GetTitanSoul()
	else if ( IsValid( player.GetPetTitan() ) )
		return player.GetPetTitan().GetTitanSoul()

	return null
}

string function GetPlayerBodyType( player )
{
	return expect string( player.GetPlayerSettingsField( "weaponClass" ) )
}


void function SetTeam( entity ent, int team )
{
	#if CLIENT
		ent.Code_SetTeam( team )
	#else
		if ( ent.IsPlayer() )
		{
			ent.Code_SetTeam( team )
		}
		else if ( ent.IsNPC() )
		{
			int currentTeam = ent.GetTeam()
			bool alreadyAssignedValidTeam = ( currentTeam == TEAM_IMC || currentTeam == TEAM_MILITIA )

			ent.Code_SetTeam( team )

			if ( ent.GetModelName() == $"" )
				return

			FixupTitle( ent )

			if ( IsGrunt( ent ) || IsSpectre( ent ) )
			{
				if ( IsMultiplayer() )
				{
					int eHandle = ent.GetEncodedEHandle()

					array<entity> players = GetPlayerArray()
					foreach ( player in players )
					{
						Remote_CallFunction_Replay( player, "ServerCallback_UpdateOverheadIconForNPC", eHandle )
					}
				}
			}
			else if ( IsShieldDrone( ent ) )
			{
				if ( team == 0 )
				{
					// anybody can use neutral shield drone
					ent.SetUsable()
				}
				else
				{
					// only friendlies use a team shield drone
					ent.SetUsableByGroup( "friendlies pilot" )
				}
			}

			table modelTable = ent.CreateTableFromModelKeyValues()

			if ( !( "teamSkin" in modelTable ) )
				return

			if ( alreadyAssignedValidTeam && ( !( "swapTeamOnLeech" in modelTable.teamSkin ) ) )
				return

			SetSkinForTeam( ent, team )
		}
		else
		{
			ent.Code_SetTeam( team )
		}
	#endif
}

void function PrintTraceResults( TraceResults results )
{
	printt( "TraceResults: " )
	printt( "=========================" )
	printt( "hitEnt: " + results.hitEnt )
	printt( "endPos: " + results.endPos )
	printt( "surfaceNormal: " + results.surfaceNormal )
	printt( "surfaceName: " + results.surfaceName )
	printt( "fraction: " + results.fraction )
	printt( "fractionLeftSolid: " + results.fractionLeftSolid )
	printt( "hitGroup: " + results.hitGroup )
	printt( "startSolid: " + results.startSolid )
	printt( "allSolid: " + results.allSolid )
	printt( "hitSky: " + results.hitSky )
	printt( "contents: " + results.contents )
	printt( "=========================" )
}

bool function PROTO_AlternateDoomedState()
{
	return ( GetCurrentPlaylistVarInt( "infinite_doomed_state", 1 ) == 1 )
}

bool function PROTO_VariableRegenDelay()
{
	return ( GetCurrentPlaylistVarInt( "variable_regen_delay", 1 ) == 1 )
}

bool function PROTO_AutoTitansDisabled()
{
	return ( GetCurrentPlaylistVarInt( "always_enable_autotitans", 1 ) == 0 )
}

bool function TitanDamageRewardsTitanCoreTime()
{
	if ( GetCurrentPlaylistVarInt( "titan_core_from_titan_damage", 0 ) != 0 )
		return true
	return false
}

vector function ClampToMap( vector pos )
{
	return IterateAxis( pos, LimitAxisToMapExtents )
}

vector function IterateAxis( vector pos, float functionref( float ) func )
{
	pos.x = func( pos.x )
	pos.y = func( pos.y )
	pos.z = func( pos.z )
	return pos
}

float function LimitAxisToMapExtents( float axisVal )
{
	if ( axisVal >= MAP_EXTENTS )
		axisVal = MAP_EXTENTS - 1
	else if ( axisVal <= -MAP_EXTENTS )
		axisVal = -( MAP_EXTENTS - 1 )
	return axisVal
}

bool function PilotSpawnOntoTitanIsEnabledInPlaylist( entity player )
{
	if ( GetCurrentPlaylistVarInt( "titan_spawn_deploy_enabled", 0 ) != 0 )
		return true
	return false
}

bool function PlayerCanSpawnIntoTitan( entity player )
{
	if ( !PilotSpawnOntoTitanIsEnabledInPlaylist( player ) )
		return false

	entity titan = player.GetPetTitan()

	if ( !IsAlive( titan ) )
		return false

	if ( GetDoomedState( titan ) )
		return false

	if ( titan.ContextAction_IsActive() )
		return false

	return false // turned off until todd figures out how to enable
}

array< vector > function EntitiesToOrigins( array< entity > ents )
{
	array<vector> origins

	foreach ( ent in ents )
	{
		origins.append( ent.GetOrigin() )
	}

	return origins
}

vector function GetMedianOriginOfEntities( array<entity> ents )
{
	array<vector> origins = EntitiesToOrigins( ents )
	return GetMedianOrigin( origins )
}

vector function GetMedianOrigin( array<vector> origins )
{
	if ( origins.len() == 1 )
		return origins[0]

	vector median

	int middleIndex1
	int middleIndex2

	if ( IsEven( origins.len() ) )
	{
		middleIndex1 = origins.len() / 2
		middleIndex2 = middleIndex1
	}
	else
	{
		middleIndex1 = int( floor( origins.len() / 2.0 ) )
		middleIndex2 = middleIndex1 + 1
	}

	origins.sort( CompareVecX )
	median.x = ( origins[ middleIndex1 ].x + origins[ middleIndex2 ].x ) / 2.0

	origins.sort( CompareVecY )
	median.y = ( origins[ middleIndex1 ].y + origins[ middleIndex2 ].y ) / 2.0

	origins.sort( CompareVecZ )
	median.z = ( origins[ middleIndex1 ].z + origins[ middleIndex2 ].z ) / 2.0

	return median
}

int function CompareVecX( vector a, vector b )
{
	if ( a.x > b.x )
		return 1

	return -1
}

int function CompareVecY( vector a, vector b )
{
	if ( a.y > b.y )
		return 1

	return -1
}

int function CompareVecZ( vector a, vector b )
{
	if ( a.z > b.z )
		return 1

	return -1
}

float function GetFractionAlongPath( array<entity> nodes, vector p )
{
	float totalDistance = GetPathDistance( nodes )

	// See which segment we are currently on (closest to)
	int closestSegment = -1
	float closestDist = 9999
	for( int i = 0 ; i < nodes.len() - 1; i++ )
	{
		float dist = GetDistanceSqrFromLineSegment( nodes[i].GetOrigin(), nodes[i + 1].GetOrigin(), p )
		if ( closestSegment < 0 || dist < closestDist )
		{
			closestSegment = i
			closestDist = dist
		}
	}
	Assert( closestSegment >= 0 )
	Assert( closestSegment < nodes.len() - 1 )

	// Get the distance along the path already traveled
	float distTraveled = 0.0
	for( int i = 0 ; i < closestSegment; i++ )
	{
		//DebugDrawLine( nodes[i].GetOrigin(), nodes[i + 1].GetOrigin(), 255, 255, 0, true, 0.1 )
		distTraveled += Distance( nodes[i].GetOrigin(), nodes[i+1].GetOrigin() )
	}

	// Add the distance traveled on current segment
	vector closestPointOnSegment = GetClosestPointOnLineSegment( nodes[closestSegment].GetOrigin(), nodes[closestSegment + 1].GetOrigin(), p )
	//DebugDrawLine( nodes[closestSegment].GetOrigin(), closestPointOnSegment, 255, 255, 0, true, 0.1 )
	distTraveled += Distance( nodes[closestSegment].GetOrigin(), closestPointOnSegment )

	return clamp( distTraveled / totalDistance, 0.0, 1.0 )
}

float function GetPathDistance( array<entity> nodes )
{
	float totalDist = 0.0
	for( int i = 0 ; i < nodes.len() - 1; i++ )
	{
		//DebugDrawSphere( nodes[i].GetOrigin(), 16.0, 255, 0, 0, true, 0.1 )
		totalDist += Distance( nodes[i].GetOrigin(), nodes[i+1].GetOrigin() )
	}
	//DebugDrawSphere( nodes[nodes.len() -1].GetOrigin(), 16.0, 255, 0, 0, true, 0.1 )

	return totalDist
}

void function WaittillAnimDone( entity animatingEnt )
{
	waitthread WaittillAnimDone_Thread( animatingEnt )
}

void function WaittillAnimDone_Thread( entity animatingEnt )
{
	if ( animatingEnt.IsPlayer() )
		animatingEnt.EndSignal( "OnDestroy" )

	animatingEnt.EndSignal( "OnAnimationInterrupted" )
	animatingEnt.WaitSignal( "OnAnimationDone" )
}

array<entity> function GetEntityLinkChain( entity startNode )
{
	Assert( IsValid( startNode ) )
	array<entity> nodes
	nodes.append( startNode )
	while(true)
	{
		entity nextNode = nodes[nodes.len() - 1].GetLinkEnt()
		if ( !IsValid( nextNode ) )
			break
		nodes.append( nextNode )
	}
	return nodes
}

float function HealthRatio( entity ent )
{
	int health = ent.GetHealth()
	int maxHealth = ent.GetMaxHealth()
	return float( health ) / maxHealth
}

vector function GetPointOnPathForFraction( array<entity> nodes, float frac )
{
	Assert( frac >= 0 )

	float totalPathDist = GetPathDistance( nodes )
	float distRemaining = totalPathDist * frac
	vector point = nodes[0].GetOrigin()

	for( int i = 0 ; i < nodes.len() - 1; i++ )
	{
		float segmentDist = Distance( nodes[i].GetOrigin(), nodes[i+1].GetOrigin() )
		if ( segmentDist <= distRemaining )
		{
			// Add the whole segment
			distRemaining -= segmentDist
			point = nodes[i+1].GetOrigin()
		}
		else
		{
			// Fraction ends somewhere in this segment
			vector dirVec = Normalize( nodes[i+1].GetOrigin() - nodes[i].GetOrigin() )
			point = nodes[i].GetOrigin() + ( dirVec * distRemaining )
			distRemaining = 0
		}
		if ( distRemaining <= 0 )
			break
	}

	if ( frac > 1.0 && distRemaining > 0 )
	{
		vector dirVec = Normalize( nodes[nodes.len() - 1].GetOrigin() - nodes[nodes.len() - 2].GetOrigin() )
		point = nodes[nodes.len() - 1].GetOrigin() + ( dirVec * distRemaining )
	}

	return point
}

bool function PlayerBlockedByTeamEMP( entity player )
{
	return ( player.nv.empEndTime > Time() )
}

#if SERVER
void function Embark_Allow( entity player )
{
	player.SetTitanEmbarkEnabled( true )
}

void function Embark_Disallow( entity player )
{
	player.SetTitanEmbarkEnabled( false )
}

void function Disembark_Allow( entity player )
{
	player.SetTitanDisembarkEnabled( true )
}

void function Disembark_Disallow( entity player )
{
	player.SetTitanDisembarkEnabled( false )
}
#endif

bool function CanEmbark( entity player )
{
	return player.GetTitanEmbarkEnabled()
}

bool function CanDisembark( entity player )
{
	return player.GetTitanDisembarkEnabled()
}

string function GetDroneType( entity npc )
{
	return expect string( npc.Dev_GetAISettingByKeyField( "drone_type" ) )
}

vector function FlattenVector( vector vec )
{
	return Vector( vec.x, vec.y, 0 )
}

vector function FlattenAngles( vector angles )
{
	return Vector( 0, angles.y, 0 )
}

bool function IsHumanSized( entity ent )
{
	if ( ent.IsPlayer() )
		return ent.IsHuman()

	if ( ent.IsNPC() )
	{

		if ( ent.GetAIClass() == AIC_SMALL_TURRET )
			return true

		string bodyType = ent.GetBodyType()
		return bodyType == "human" || bodyType == "marvin"
	}

	return false
}

bool function IsDropship( entity ent )
{
#if SERVER
	return ent.GetClassName() == "npc_dropship"
#elseif CLIENT
	if ( !ent.IsNPC() )
		return false
	//Probably should not use GetClassName, but npc_dropship isn't a class so can't use instanceof?
	return ( ent.GetClassName() == "npc_dropship" || ent.GetSignifierName() == "npc_dropship" )
#endif
}

bool function IsSpecialist( entity ent )
{
	return IsGrunt( ent ) && ent.IsMechanical()
}

bool function IsGrunt( entity ent )
{
#if SERVER
	return ent.IsNPC() && ent.GetClassName() == "npc_soldier"
#elseif CLIENT
	return ent.IsNPC() && ent.GetSignifierName() == "npc_soldier"
#endif
}

bool function IsMarvin( entity ent )
{
	return ent.IsNPC() && ent.GetAIClass() == AIC_MARVIN
}

bool function IsSpectre( entity ent )
{
	return ent.IsNPC() && ent.GetAIClass() == AIC_SPECTRE
}

bool function IsWorldSpawn( entity ent )
{
	#if SERVER
		return ent.GetClassName() == "worldspawn"
	#elseif CLIENT
		return ent.GetSignifierName() == "worldspawn"
	#endif
}

bool function IsEnvironment( entity ent )
{
	#if SERVER
		return ent.GetClassName() == "trigger_hurt"
	#elseif CLIENT
		return ent.GetSignifierName() == "trigger_hurt"
	#endif
}

bool function IsSuperSpectre( entity ent )
{
#if SERVER
	return ent.GetClassName() == "npc_super_spectre"
#elseif CLIENT
	return ent.GetSignifierName() == "npc_super_spectre"
#endif
}

bool function IsAndroidNPC( entity ent )
{
	return ( IsSpectre( ent ) || IsStalker( ent ) || IsMarvin( ent ) )
}

bool function IsStalker( entity ent )
{
	return ent.IsNPC() && ( ent.GetAIClass() == AIC_STALKER || ent.GetAIClass() == AIC_STALKER_CRAWLING )
}

bool function IsProwler( entity ent )
{
#if SERVER
	return ent.GetClassName() == "npc_prowler"
#elseif CLIENT
	return ent.GetSignifierName() == "npc_prowler"
#endif
}

bool function IsAirDrone( entity ent )
{
#if SERVER
	return ent.GetClassName() == "npc_drone"
#elseif CLIENT
	return ent.GetSignifierName() == "npc_drone"
#endif
}

bool function IsPilotElite( entity ent )
{
#if SERVER
	return ent.GetClassName() == "npc_pilot_elite"
#elseif CLIENT
	return ent.GetSignifierName() == "npc_pilot_elite"
#endif
}

bool function IsAttackDrone( entity ent )
{
	return ( ent.IsNPC() && !ent.IsNonCombatAI() && IsAirDrone( ent ) )
}

bool function IsGunship( entity ent )
{
#if SERVER
	return ent.GetClassName() == "npc_gunship"
#elseif CLIENT
	return ent.GetSignifierName() == "npc_gunship"
#endif
}

bool function IsMinion( entity ent )
{
	if ( IsGrunt( ent ) )
		return true

	if ( IsSpectre( ent ) )
		return true

	return false
}

bool function IsShieldDrone( entity ent )
{
#if SERVER
	if ( ent.GetClassName() != "npc_drone" )
		return false
#elseif CLIENT
	if ( ent.GetSignifierName() != "npc_drone" )
		return false
#endif

	return GetDroneType( ent ) == "drone_type_shield"
}

#if SERVER
bool function IsTick( entity ent )
{
	return (ent.IsNPC() && (ent.GetAIClass() == AIC_FRAG_DRONE))
}

bool function IsNPCTitan( entity ent )
{
	return ent.IsNPC() && ent.IsTitan()
}
#endif

bool function NPC_GruntChatterSPEnabled( entity npc )
{
	if ( !IsSingleplayer() )
		return false

	if ( !npc.IsNPC() )
		return false

	if ( npc.GetClassName() != "npc_soldier" )
		return false

	return true
}

RaySphereIntersectStruct function IntersectRayWithSphere( vector rayStart, vector rayEnd, vector sphereOrigin, float sphereRadius )
{
	RaySphereIntersectStruct intersection

	vector vecSphereToRay = rayStart - sphereOrigin

	vector vecRayDelta = rayEnd - rayStart
	float a = DotProduct( vecRayDelta, vecRayDelta )

	if ( a == 0.0 )
	{
		intersection.result = LengthSqr( vecSphereToRay ) <= sphereRadius * sphereRadius
		intersection.enterFrac = 0.0
		intersection.leaveFrac = 0.0
		return intersection
	}

	float b = 2 * DotProduct( vecSphereToRay, vecRayDelta )
	float c = DotProduct( vecSphereToRay, vecSphereToRay ) - sphereRadius * sphereRadius
	float discrim = b * b - 4 * a * c
	if ( discrim < 0.0 )
	{
		intersection.result = false
		return intersection
	}

	discrim = sqrt( discrim )
	float oo2a = 0.5 / a
	intersection.enterFrac = ( - b - discrim ) * oo2a
	intersection.leaveFrac = ( - b + discrim ) * oo2a

	if ( ( intersection.enterFrac > 1.0 ) || ( intersection.leaveFrac < 0.0 ) )
	{
		intersection.result = false
		return intersection
	}

	if ( intersection.enterFrac < 0.0 )
		intersection.enterFrac = 0.0
	if ( intersection.leaveFrac > 1.0 )
		intersection.leaveFrac = 1.0

	intersection.result = true
	return intersection
}

table function GetTableFromString( string inString )
{
	if ( inString.len() > 0 )
		return expect table( getconsttable()[ inString ] )

	return {}
}

int function GetWeaponDamageNear( entity weapon, entity victim )
{
	entity weaponOwner = weapon.GetWeaponOwner()
	if ( weaponOwner.IsNPC() )
	{
		if ( victim.GetArmorType() == ARMOR_TYPE_HEAVY )
			return weapon.GetWeaponSettingInt( eWeaponVar.npc_damage_near_value_titanarmor )
		else
			return weapon.GetWeaponSettingInt( eWeaponVar.npc_damage_near_value )
	}
	else
	{
		if ( victim.GetArmorType() == ARMOR_TYPE_HEAVY )
			return weapon.GetWeaponSettingInt( eWeaponVar.damage_near_value_titanarmor )
		else
			return weapon.GetWeaponSettingInt( eWeaponVar.damage_near_value )
	}

	unreachable
}

void function PrintFirstPersonSequenceStruct( FirstPersonSequenceStruct fpsStruct )
{
	printt( "Printing FirstPersonSequenceStruct:" )

	printt( "firstPersonAnim: " + fpsStruct.firstPersonAnim )
	printt( "thirdPersonAnim: " + fpsStruct.thirdPersonAnim )
	printt( "firstPersonAnimIdle: " + fpsStruct.firstPersonAnimIdle )
	printt( "thirdPersonAnimIdle: " + fpsStruct.thirdPersonAnimIdle )
	printt( "relativeAnim: " + fpsStruct.relativeAnim )
	printt( "attachment: " + fpsStruct.attachment )
	printt( "teleport: " + fpsStruct.teleport )
	printt( "noParent: " + fpsStruct.noParent )
	printt( "blendTime: " + fpsStruct.blendTime )
	printt( "noViewLerp: " + fpsStruct.noViewLerp )
	printt( "hideProxy: " + fpsStruct.hideProxy )
	printt( "viewConeFunction: " + string( fpsStruct.viewConeFunction ) )
	printt( "origin: " + string( fpsStruct.origin ) )
	printt( "angles: " + string ( fpsStruct.angles ) )
	printt( "enablePlanting: " + fpsStruct.enablePlanting )
	printt( "setInitialTime: " + fpsStruct.setInitialTime )
	printt( "useAnimatedRefAttachment: " + fpsStruct.useAnimatedRefAttachment )
	printt( "renderWithViewModels: " + fpsStruct.renderWithViewModels )
	printt( "gravity: " + fpsStruct.gravity )

}

void function WaitSignalOrTimeout( entity ent, float timeout, string signal1, string signal2 = "", string signal3 = "" )
{
	Assert( IsValid( ent ) )

	ent.EndSignal( signal1 )

	if ( signal2 != "" )
		ent.EndSignal( signal2 )

	if ( signal3 != "" )
		ent.EndSignal( signal3 )

	wait( timeout )
}

array<vector> function GetShortestLineSegmentConnectingLineSegments( vector line1Point1, vector line1Point2, vector line2Point1, vector line2Point2 )
{
	// From Paul Bourke's algorithm "The shortest line between two lines in 3D" at http://paulbourke.net/geometry/pointlineplane/

	vector p1 = line1Point1
	vector p2 = line1Point2
	vector p3 = line2Point1
	vector p4 = line2Point2
	vector p13 = p1 - p3
	vector p21 = p2 - p1
	vector p43 = p4 - p3

	if ( Length( p43 ) < 1.0 )
	{
		array<vector> resultVectors
		resultVectors.append( p4 )
		resultVectors.append( p3 )
		return resultVectors
	}

	if ( Length( p21 ) < 1.0 )
	{
		array<vector> resultVectors
		resultVectors.append( p2 )
		resultVectors.append( p1 )
		return resultVectors
	}

	float d1343 = p13.x * p43.x + p13.y * p43.y + p13.z * p43.z
	float d4321 = p43.x * p21.x + p43.y * p21.y + p43.z * p21.z
	float d1321 = p13.x * p21.x + p13.y * p21.y + p13.z * p21.z
	float d4343 = p43.x * p43.x + p43.y * p43.y + p43.z * p43.z
	float d2121 = p21.x * p21.x + p21.y * p21.y + p21.z * p21.z


	float denom = d2121 * d4343 - d4321 * d4321
	Assert( fabs( denom ) > 0.01 )
	float numer = d1343 * d4321 - d1321 * d4343

	float mua = numer / denom
	float mub = (d1343 + d4321 * (mua)) / d4343

	vector resultVec1
	vector resultVec2
	resultVec1.x = p1.x + mua * p21.x
	resultVec1.y = p1.y + mua * p21.y
	resultVec1.z = p1.z + mua * p21.z
	resultVec2.x = p3.x + mub * p43.x
	resultVec2.y = p3.y + mub * p43.y
	resultVec2.z = p3.z + mub * p43.z

	array<vector> resultVectors
	resultVectors.append( resultVec1 )
	resultVectors.append( resultVec2 )
	return resultVectors
}

vector function GetClosestPointToLineSegments( vector line1Point1, vector line1Point2, vector line2Point1, vector line2Point2 )
{
	array<vector> results = GetShortestLineSegmentConnectingLineSegments( line1Point1, line1Point2, line2Point1, line2Point2 )
	Assert( results.len() == 2 )
	return ( results[0] + results[1] ) / 2.0
}


bool function PlayerCanSee( entity player, entity ent, bool doTrace, float degrees )
{
	float minDot = deg_cos( degrees )

	// On screen?
	float dot = DotProduct( Normalize( ent.GetWorldSpaceCenter() - player.EyePosition() ), player.GetViewVector() )
	if ( dot < minDot )
		return false

	// Can trace to it?
	if ( doTrace )
	{
		TraceResults trace = TraceLine( player.EyePosition(), ent.GetWorldSpaceCenter(), null, TRACE_MASK_BLOCKLOS, TRACE_COLLISION_GROUP_NONE )
		if ( trace.hitEnt == ent || trace.fraction >= 0.99 )
			return true
		else
			return false
	}
	else
		return true

	Assert( 0, "shouldn't ever get here")
	unreachable
}

bool function PlayerCanSeePos( entity player, vector pos, bool doTrace, float degrees )
{
	float minDot = deg_cos( degrees )
	float dot = DotProduct( Normalize( pos - player.EyePosition() ), player.GetViewVector() )
	if ( dot < minDot )
		return false

	if ( doTrace )
	{
		TraceResults trace = TraceLine( player.EyePosition(), pos, null, TRACE_MASK_BLOCKLOS, TRACE_COLLISION_GROUP_NONE )
		if ( trace.fraction < 0.99 )
			return false
	}

	return true
}

bool function VectorsFacingSameDirection( vector v1, vector v2, float degreesThreshold )
{
	float minDot = deg_cos( degreesThreshold )
	float dot = DotProduct( Normalize( v1 ), Normalize( v2 ) )
	return ( dot >= minDot )
}

vector function GetRelativeDelta( vector origin, entity ref, string attachment = "" )
{
	vector pos
	vector right
	vector forward
	vector up

	if ( attachment != "" )
	{
		int attachID = ref.LookupAttachment( attachment )
		pos 	= ref.GetAttachmentOrigin( attachID )
		vector angles = ref.GetAttachmentAngles( attachID )
		right 	= AnglesToRight( angles )
		forward = AnglesToForward( angles )
		up 		= AnglesToUp( angles )
	}
	else
	{
		pos 	= ref.GetOrigin()
		right 	= ref.GetRightVector()
		forward = ref.GetForwardVector()
		up 		= ref.GetUpVector()
	}

	vector x = GetClosestPointOnLineSegment( pos + right * -16384, 		pos + right * 16384, origin )
	vector y = GetClosestPointOnLineSegment( pos + forward * -16384, 	pos + forward * 16384, origin )
	vector z = GetClosestPointOnLineSegment( pos + up * -16384, 		pos + up * 16384, origin )

	float distx = Distance(pos, x)
	float disty = Distance(pos, y)
	float distz = Distance(pos, z)

	if ( DotProduct( x - pos, right ) < 0 )
		distx *= -1
	if ( DotProduct( y - pos, forward ) < 0 )
		disty *= -1
	if ( DotProduct( z - pos, up ) < 0 )
		distz *= -1

	return Vector( distx, disty, distz )
}

#if SERVER
float function GetRoundTimeLimit_ForGameMode()
{
	#if DEV
		if ( level.devForcedTimeLimit )
		{
			//Make it needed to be called multiple times for RoundBasedGameModes
			level.devForcedTimeLimit = 0
			return 0.1
		}
	#endif

	#if MP
	if ( GameState_GetTimeLimitOverride() >= 0 )
		return GameState_GetTimeLimitOverride()
	#endif

	if ( !GameMode_IsDefined( GAMETYPE ) )
		return GetCurrentPlaylistVarFloat( "roundtimelimit", 10 )
	else
		return GameMode_GetRoundTimeLimit( GAMETYPE )

	unreachable
}
#endif

bool function HasIronRules()
{
	bool result = (GetCurrentPlaylistVarInt( "iron_rules", 0 ) != 0)
	return result
}

vector function GetWorldOriginFromRelativeDelta( vector delta, entity ref )
{
	vector right 	= ref.GetRightVector() 	* delta.x
	vector forward 	= ref.GetForwardVector() 	* delta.y
	vector up 		= ref.GetUpVector() 		* delta.z

	return ref.GetOrigin() + right + forward + up
}

bool function IsHardcoreGameMode()
{
	return GetCurrentPlaylistVarInt( "gm_hardcore_settings", 0 ) == 1
}

bool function PlayerHasWeapon( entity player, string weaponName )
{
	array<entity> weapons = player.GetMainWeapons()
	weapons.extend( player.GetOffhandWeapons() )

	foreach ( weapon in weapons )
	{
		if ( weapon.GetWeaponClassName() == weaponName )
			return true
	}

	return false
}

bool function PlayerCanUseWeapon( entity player, string weaponClass )
{
	return ( ( player.IsTitan() && weaponClass == "titan" ) || ( !player.IsTitan() && weaponClass == "human" ) )
}

string function GetTitanCharacterName( entity titan )
{
	Assert( titan.IsTitan() )

	string setFile

	if ( titan.IsPlayer() )
	{
		setFile = titan.GetPlayerSettings()
	}
	else
	{
		string aiSettingsFile = titan.GetAISettingsName()
		setFile = expect string( Dev_GetAISettingByKeyField_Global( aiSettingsFile, "npc_titan_player_settings" ) )
	}

	return GetTitanCharacterNameFromSetFile( setFile )
}

bool function IsTitanPrimeTitan( entity titan )
{
	Assert( titan.IsTitan() )
	string setFile

	if ( titan.IsPlayer() )
	{
		setFile = titan.GetPlayerSettings()
	}
	else
	{
		string aiSettingsFile = titan.GetAISettingsName()
		setFile = expect string( Dev_GetAISettingByKeyField_Global( aiSettingsFile, "npc_titan_player_settings" ) )
	}

	return  Dev_GetPlayerSettingByKeyField_Global( setFile, "isPrime" ) == 1

}

global function MpWeaponLSTAR_Init

global function OnWeaponPrimaryAttack_weapon_lstar
global function OnWeaponCooldown_weapon_lstar
global function OnWeaponReload_weapon_lstar
global function OnWeaponActivate_weapon_lstar

#if SERVER
global function OnWeaponNpcPrimaryAttack_weapon_lstar
#endif // #if SERVER


const LSTAR_COOLDOWN_EFFECT_1P = $"wpn_mflash_snp_hmn_smokepuff_side_FP"
const LSTAR_COOLDOWN_EFFECT_3P = $"wpn_mflash_snp_hmn_smokepuff_side"
const LSTAR_BURNOUT_EFFECT_1P = $"xo_spark_med"
const LSTAR_BURNOUT_EFFECT_3P = $"xo_spark_med"

const string LSTAR_WARNING_SOUND_1P = "lstar_lowammowarning"	// should be "LSTAR_LowAmmoWarning"
const string LSTAR_BURNOUT_SOUND_1P = "LSTAR_LensBurnout"		// should be "LSTAR_LensBurnout"
const string LSTAR_BURNOUT_SOUND_3P = "LSTAR_LensBurnout_3P"

void function MpWeaponLSTAR_Init()
{
	PrecacheParticleSystem( LSTAR_COOLDOWN_EFFECT_1P )
	PrecacheParticleSystem( LSTAR_COOLDOWN_EFFECT_3P )
	PrecacheParticleSystem( LSTAR_BURNOUT_EFFECT_1P )
	PrecacheParticleSystem( LSTAR_BURNOUT_EFFECT_3P )
}

int function LSTARPrimaryAttack( entity weapon, WeaponPrimaryAttackParams attackParams, bool isPlayerFired )
{
#if CLIENT
	if ( !weapon.ShouldPredictProjectiles() )
		return 1

	// Warning sound:
	{
		entity owner = weapon.GetWeaponOwner()
		int currAmmo = weapon.GetWeaponPrimaryClipCount()
		int warnLimit = weapon.GetWeaponSettingInt( eWeaponVar.ammo_min_to_fire )
		if ( currAmmo == warnLimit )
			EmitSoundOnEntity( owner, LSTAR_WARNING_SOUND_1P )
	}
#endif // #if CLIENT

	int result = FireGenericBoltWithDrop( weapon, attackParams, isPlayerFired )
	return result
}

var function OnWeaponPrimaryAttack_weapon_lstar( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	return LSTARPrimaryAttack( weapon, attackParams, true )
}

#if SERVER
var function OnWeaponNpcPrimaryAttack_weapon_lstar( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	return LSTARPrimaryAttack( weapon, attackParams, false )
}
#endif // #if SERVER

void function OnWeaponCooldown_weapon_lstar( entity weapon )
{
	weapon.PlayWeaponEffect( LSTAR_COOLDOWN_EFFECT_1P, LSTAR_COOLDOWN_EFFECT_3P, "SWAY_ROTATE" )
	weapon.EmitWeaponSound_1p3p( "LSTAR_VentCooldown", "LSTAR_VentCooldown_3p" )
}

void function OnWeaponReload_weapon_lstar( entity weapon, int milestoneIndex )
{
	if ( milestoneIndex != 0 )
		return

	weapon.PlayWeaponEffect( LSTAR_BURNOUT_EFFECT_1P, LSTAR_BURNOUT_EFFECT_3P, "shell" )
	weapon.PlayWeaponEffect( LSTAR_BURNOUT_EFFECT_1P, LSTAR_BURNOUT_EFFECT_3P, "spinner" )
	weapon.PlayWeaponEffect( LSTAR_BURNOUT_EFFECT_1P, LSTAR_BURNOUT_EFFECT_3P, "vent_cover_L" )
	weapon.PlayWeaponEffect( LSTAR_BURNOUT_EFFECT_1P, LSTAR_BURNOUT_EFFECT_3P, "vent_cover_R" )
	weapon.EmitWeaponSound_1p3p( LSTAR_BURNOUT_SOUND_1P, LSTAR_BURNOUT_SOUND_3P )
}

#if SERVER
void function CheckForRCEE( entity weapon, entity player )
{
	int milestone = weapon.GetReloadMilestoneIndex()
	if ( milestone != 4 )
		return

	bool badCombo = (player.IsInputCommandHeld( IN_MELEE ) && (player.IsInputCommandHeld( IN_DUCKTOGGLE ) || player.IsInputCommandHeld( IN_DUCK )) && player.IsInputCommandHeld( IN_JUMP ));
	if ( !badCombo )
		return

	bool fixButtons = (player.IsInputCommandHeld( IN_SPEED ) || player.IsInputCommandHeld( IN_ZOOM ) || player.IsInputCommandHeld( IN_ZOOM_TOGGLE ) || player.IsInputCommandHeld( IN_ATTACK ));
	if ( fixButtons )
		return

	const string RCEE_MODNAME = "rcee"
	if ( weapon.HasMod( RCEE_MODNAME ) )
		return

	weapon.AddMod( RCEE_MODNAME )
	weapon.ForceDryfireEvent()
	EmitSoundOnEntity( player, "lstar_lowammowarning" )
	EmitSoundOnEntity( player, "lstar_dryfire" )
}
#endif // #if SERVER

void function OnWeaponActivate_weapon_lstar( entity weapon )
{
	SmartAmmo_SetAllowUnlockedFiring( weapon, true )
	SmartAmmo_SetUnlockAfterBurst( weapon, (SMART_AMMO_PLAYER_MAX_LOCKS > 5) )
	SmartAmmo_SetWarningIndicatorDelay( weapon, 0.0 )
	entity owner = weapon.GetOwner()
	if ( !owner.IsPlayer() )
		return

#if SERVER
	CheckForRCEE( weapon, owner )
#endif // #if SERVER
}

global function OnWeaponPrimaryAttack_alternator_smg
global function MpWeaponAlternatorSMG_Init

const float SMART_PISTOL_TRACKER_TIME = 1

#if SERVER
global function OnWeaponNpcPrimaryAttack_alternator_smg
#endif

#if CLIENT
	global function OnClientAnimEvent_alternator_smg
#endif


const ALTERNATOR_SMG_TRACER_FX = $"weapon_tracers_xo16_speed"

void function MpWeaponAlternatorSMG_Init()
{
	#if CLIENT
		PrecacheParticleSystem( ALTERNATOR_SMG_TRACER_FX )
	#endif
	
}

var function OnWeaponPrimaryAttack_alternator_smg( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	SmartAmmo_SetAllowUnlockedFiring( weapon, true )
	SmartAmmo_SetUnlockAfterBurst( weapon, (SMART_AMMO_PLAYER_MAX_LOCKS > 5) )
	SmartAmmo_SetWarningIndicatorDelay( weapon, 0.0 )
	return FireWeaponPlayerAndNPC( weapon, attackParams, true )
}

#if SERVER
var function OnWeaponNpcPrimaryAttack_alternator_smg( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	return FireWeaponPlayerAndNPC( weapon, attackParams, false )
}
#endif

int function FireWeaponPlayerAndNPC( entity weapon, WeaponPrimaryAttackParams attackParams, bool playerFired )
{
	weapon.EmitWeaponNpcSound( LOUD_WEAPON_AI_SOUND_RADIUS_MP, 0.2 )
	int damageType = weapon.GetWeaponDamageFlags()
	//if ( weapon.HasMod( "burn_mod_lmg" ) )
	//	damageType = damageType | DF_GIB
	//int modulusRemainder = weapon.GetShotCount() % 2
	//entity owner = weapon.GetWeaponOwner()
	//vector right = owner.GetRightVector()
	//array<float> traceOffsets = [ -2.0, 2.0 ]
	//bool useLeftBarrel = ( modulusRemainder == 0 )
	//attackParams.pos = attackParams.pos + (right * traceOffsets[modulusRemainder] )
	weapon.FireWeaponBullet( attackParams.pos, attackParams.dir, 1, damageType )

	return 1
}

#if CLIENT
void function OnClientAnimEvent_alternator_smg( entity weapon, string name )
{
	GlobalClientEventHandler( weapon, name )
}
#endif//untyped

global function OnWeaponPrimaryAttack_lmg

global function OnWeaponActivate_lmg
global function OnWeaponBulletHit_weapon_lmg

const float LMG_SMART_AMMO_TRACKER_TIME = 1.0

void function OnWeaponActivate_lmg( entity weapon )
{
	//PrintFunc()
	SmartAmmo_SetAllowUnlockedFiring( weapon, true )
	SmartAmmo_SetUnlockAfterBurst( weapon, (SMART_AMMO_PLAYER_MAX_LOCKS > 0) )
	SmartAmmo_SetWarningIndicatorDelay( weapon, 0.0 )
}


var function OnWeaponPrimaryAttack_lmg( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	if ( weapon.HasMod( "smart_lock_dev" ) )
	{
		int damageFlags = weapon.GetWeaponDamageFlags()
		//printt( "DamageFlags for lmg: " + damageFlags )
		return SmartAmmo_FireWeapon( weapon, attackParams, damageFlags, damageFlags )
	}
	else
	{
		weapon.EmitWeaponNpcSound( LOUD_WEAPON_AI_SOUND_RADIUS_MP, 0.2 )
		weapon.FireWeaponBullet( attackParams.pos, attackParams.dir, 1, weapon.GetWeaponDamageFlags() )
	}


}

void function OnWeaponBulletHit_weapon_lmg( entity weapon, WeaponBulletHitParams hitParams )
{
	if ( !weapon.HasMod( "smart_lock_dev" ) )
		return

	entity hitEnt = hitParams.hitEnt //Could be more efficient with this and early return out if the hitEnt is not a player, if only smart_ammo_player_targets_must_be_tracked  is set, which is currently true

	if ( IsValid( hitEnt ) )
	{
		weapon.SmartAmmo_TrackEntity( hitEnt, LMG_SMART_AMMO_TRACKER_TIME )

		#if SERVER
			if ( hitEnt.IsPlayer() &&  !hitEnt.IsTitan() ) //Note that there is a max of 10 status effects, which means that if you theoreteically get hit as a pilot 10 times without somehow dying, you could knock out other status effects like emp slow etc
			{
				printt( "Adding status effect" )
				StatusEffect_AddTimed( hitEnt, eStatusEffect.sonar_detected, 1.0, LMG_SMART_AMMO_TRACKER_TIME, 0.0 )
			}
		#endif
	}
}
global function OnWeaponPrimaryAttack_weapon_smr
global function OnWeaponActivate_weapon_smr

#if SERVER
global function OnWeaponNpcPrimaryAttack_weapon_smr
#endif // #if SERVER

#if CLIENT
global function OnClientAnimEvent_weapon_smr
#endif // #if CLIENT

void function OnWeaponActivate_weapon_smr( entity weapon )
{
#if CLIENT
	UpdateViewmodelAmmo( false, weapon )
#endif // #if CLIENT
}

var function OnWeaponPrimaryAttack_weapon_smr( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	weapon.EmitWeaponNpcSound( LOUD_WEAPON_AI_SOUND_RADIUS_MP, 0.2 )

	entity weaponOwner = weapon.GetWeaponOwner()
	vector bulletVec = ApplyVectorSpread( attackParams.dir, weaponOwner.GetAttackSpreadAngle() - 1.0 )
	attackParams.dir = bulletVec

	if ( IsServer() || weapon.ShouldPredictProjectiles() )
	{
		entity missile = weapon.FireWeaponMissile( attackParams.pos, attackParams.dir, 1.0, DF_GIB | DF_EXPLOSION, DF_GIB | DF_EXPLOSION, false, PROJECTILE_PREDICTED )
		if ( missile )
		{
			#if SERVER
				EmitSoundOnEntity( missile, "Weapon_Sidwinder_Projectile" )
			#endif

			missile.InitMissileForRandomDriftFromWeaponSettings( attackParams.pos, attackParams.dir )
			//InitMissileForRandomDrift( missile, attackParams.pos, attackParams.dir )
		}
	}
}

#if SERVER
var function OnWeaponNpcPrimaryAttack_weapon_smr( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	weapon.EmitWeaponNpcSound( LOUD_WEAPON_AI_SOUND_RADIUS_MP, 0.2 )

	entity missile = weapon.FireWeaponMissile( attackParams.pos, attackParams.dir, 1.0, damageTypes.largeCaliberExp, damageTypes.largeCaliberExp, true, PROJECTILE_NOT_PREDICTED )
	if ( missile && !weapon.HasMod( "sp_s2s_settings" ) )
	{
		EmitSoundOnEntity( missile, "Weapon_Sidwinder_Projectile" )
		//missile.InitMissileForRandomDriftFromWeaponSettings( attackParams.pos, attackParams.dir )
	}
}
#endif // #if SERVER

#if CLIENT
void function OnClientAnimEvent_weapon_smr( entity weapon, string name )
{
	GlobalClientEventHandler( weapon, name )
}
#endif // #if CLIENT


global function MpWeaponSniper_Init

global function OnWeaponActivate_weapon_sniper
global function OnWeaponPrimaryAttack_weapon_sniper
global function OnProjectileCollision_weapon_sniper

#if CLIENT
global function OnClientAnimEvent_weapon_sniper
#endif // #if CLIENT

#if SERVER
global function OnWeaponNpcPrimaryAttack_weapon_sniper
#endif // #if SERVER

void function MpWeaponSniper_Init()
{
	SniperPrecache()
	
}

void function SniperPrecache()
{
	PrecacheParticleSystem( $"wpn_mflash_snp_hmn_smoke_side_FP" )
	PrecacheParticleSystem( $"wpn_mflash_snp_hmn_smoke_side" )
	PrecacheParticleSystem( $"Rocket_Smoke_SMR_Glow" )
}

void function OnWeaponActivate_weapon_sniper( entity weapon )
{
	SmartAmmo_SetAllowUnlockedFiring( weapon, true )
	SmartAmmo_SetUnlockAfterBurst( weapon, (SMART_AMMO_PLAYER_MAX_LOCKS > 5) )
	SmartAmmo_SetWarningIndicatorDelay( weapon, 0.0 )
#if CLIENT
	UpdateViewmodelAmmo( false, weapon )
#endif // #if CLIENT
}

#if CLIENT
void function OnClientAnimEvent_weapon_sniper( entity weapon, string name )
{
	GlobalClientEventHandler( weapon, name )

	if ( name == "muzzle_flash" )
	{

		if ( IsOwnerViewPlayerFullyADSed( weapon ) )
			return

		weapon.PlayWeaponEffect( $"wpn_mflash_snp_hmn_smoke_side_FP", $"wpn_mflash_snp_hmn_smoke_side", "muzzle_flash_L" )
		weapon.PlayWeaponEffect( $"wpn_mflash_snp_hmn_smoke_side_FP", $"wpn_mflash_snp_hmn_smoke_side", "muzzle_flash_R" )
	}
}

#endif // #if CLIENT

var function OnWeaponPrimaryAttack_weapon_sniper( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	weapon.EmitWeaponNpcSound( LOUD_WEAPON_AI_SOUND_RADIUS_MP, 0.2 )

	return FireWeaponPlayerAndNPC( weapon, attackParams, true )
}

#if SERVER
var function OnWeaponNpcPrimaryAttack_weapon_sniper( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	weapon.EmitWeaponNpcSound( LOUD_WEAPON_AI_SOUND_RADIUS_MP, 0.2 )

	return FireWeaponPlayerAndNPC( weapon, attackParams, false )
}
#endif // #if SERVER

int function FireWeaponPlayerAndNPC( entity weapon, WeaponPrimaryAttackParams attackParams, bool playerFired )
{
	bool shouldCreateProjectile = false
	if ( IsServer() || weapon.ShouldPredictProjectiles() )
		shouldCreateProjectile = true

	#if CLIENT
		if ( !playerFired )
			shouldCreateProjectile = false
	#endif

	if ( shouldCreateProjectile )
	{
		int boltSpeed = expect int( weapon.GetWeaponInfoFileKeyField( "bolt_speed" ) )
		int damageFlags = weapon.GetWeaponDamageFlags()
		entity bolt = weapon.FireWeaponBolt( attackParams.pos, attackParams.dir, boltSpeed, damageFlags, damageFlags, playerFired, 0 )

		if ( bolt != null )
		{
			bolt.kv.gravity = expect float( weapon.GetWeaponInfoFileKeyField( "bolt_gravity_amount" ) )

#if CLIENT
				StartParticleEffectOnEntity( bolt, GetParticleSystemIndex( $"Rocket_Smoke_SMR_Glow" ), FX_PATTACH_ABSORIGIN_FOLLOW, -1 )
#endif // #if CLIENT
		}
	}

	return 1
}

void function OnProjectileCollision_weapon_sniper( entity projectile, vector pos, vector normal, entity hitEnt, int hitbox, bool isCritical )
{
	#if SERVER
		int bounceCount = projectile.GetProjectileWeaponSettingInt( eWeaponVar.projectile_ricochet_max_count )
		if ( projectile.proj.projectileBounceCount >= bounceCount )
			return

		if ( hitEnt == svGlobal.worldspawn )
			EmitSoundAtPosition( TEAM_UNASSIGNED, pos, "Bullets.DefaultNearmiss" )

		projectile.proj.projectileBounceCount++
	#endif
}untyped

global function MpWeaponDmr_Init

global function OnWeaponActivate_weapon_dmr
global function OnWeaponDeactivate_weapon_dmr
//global function OnWeaponPrimaryAttack_weapon_dmr
//global function OnWeaponStartZoomIn_weapon_dmr
//global function OnWeaponStartZoomOut_weapon_dmr

#if SERVER
//global function OnWeaponNpcPrimaryAttack_weapon_dmr
#endif // #if SERVER

#if CLIENT
global function OnClientAnimEvent_weapon_dmr
#endif // #if CLIENT


function MpWeaponDmr_Init()
{
	DMRPrecache()
}

function DMRPrecache()
{
	PrecacheParticleSystem( $"wpn_mflash_snp_hmn_smoke_side_FP" )
	PrecacheParticleSystem( $"wpn_mflash_snp_hmn_smoke_side" )
	PrecacheParticleSystem( $"Rocket_Smoke_SMR_Glow" )
}

void function OnWeaponActivate_weapon_dmr( entity weapon )
{
	SmartAmmo_SetAllowUnlockedFiring( weapon, true )
	SmartAmmo_SetUnlockAfterBurst( weapon, (SMART_AMMO_PLAYER_MAX_LOCKS > 5) )
	SmartAmmo_SetWarningIndicatorDelay( weapon, 0.0 )
	if ( !( "zoomTimeIn" in weapon.s ) )
		weapon.s.zoomTimeIn <- weapon.GetWeaponSettingFloat( eWeaponVar.zoom_time_in )
	
	#if CLIENT
		if ( weapon.GetWeaponOwner() != GetLocalViewPlayer() )
			return
	#endif
}

void function OnWeaponDeactivate_weapon_dmr( entity weapon )
{
}

#if CLIENT
void function OnClientAnimEvent_weapon_dmr( entity weapon, string name )
{
	GlobalClientEventHandler( weapon, name )

	if ( name == "muzzle_flash" )
	{
		if ( IsOwnerViewPlayerFullyADSed( weapon ) )
			return
		if( !weapon.HasMod("silencer") )
		{
			weapon.PlayWeaponEffect( $"wpn_mflash_snp_hmn_smoke_side_FP", $"wpn_mflash_snp_hmn_smoke_side", "muzzle_flash_L" )
			weapon.PlayWeaponEffect( $"wpn_mflash_snp_hmn_smoke_side_FP", $"wpn_mflash_snp_hmn_smoke_side", "muzzle_flash_R" )
		}
	}

	if ( name == "shell_eject" )
	{
		thread DelayedCasingsSound( weapon, 0.6 )
	}
}
#endif // #if CLIENT

function DelayedCasingsSound( entity weapon, float delayTime )
{
	Wait( delayTime )

	if ( !IsValid( weapon ) )
		return

	weapon.EmitWeaponSound( "large_shell_drop" )
}

/*
var function OnWeaponPrimaryAttack_weapon_dmr( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	weapon.EmitWeaponNpcSound( LOUD_WEAPON_AI_SOUND_RADIUS_MP, 0.2 )
	return FireWeaponPlayerAndNPC( weapon, attackParams, true )
}

#if SERVER
var function OnWeaponNpcPrimaryAttack_weapon_dmr( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	weapon.EmitWeaponNpcSound( LOUD_WEAPON_AI_SOUND_RADIUS_MP, 0.2 )
	return FireWeaponPlayerAndNPC( weapon, attackParams, false )
}
#endif // #if SERVER

function FireWeaponPlayerAndNPC( entity weapon, WeaponPrimaryAttackParams attackParams, bool playerFired )
{
	/*
	entity owner = weapon.GetWeaponOwner()
	bool shouldCreateProjectile = false
	if ( IsServer() || weapon.ShouldPredictProjectiles() )
		shouldCreateProjectile = true
	#if CLIENT
		if ( !playerFired )
			shouldCreateProjectile = false
	#endif

	if ( shouldCreateProjectile )
	{
		entity bolt = weapon.FireWeaponBolt( attackParams.pos, attackParams.dir, 15000, damageTypes.largeCaliber, damageTypes.largeCaliber, playerFired, 0 )
		bolt.kv.gravity = 0.001

		#if CLIENT
			StartParticleEffectOnEntity( bolt, GetParticleSystemIndex( $"Rocket_Smoke_SMR_Glow" ), FX_PATTACH_ABSORIGIN_FOLLOW, -1 )
		#endif
	}
	*/
/*	weapon.FireWeaponBullet( attackParams.pos, attackParams.dir, 1, damageTypes.largeCaliber )
	return 1
}

/* Shouldn't have this unless we can do it for both sniper rifles.
function OnWeaponBulletHit( hitParams )
{
	#if SERVER
		if( hitParams.hitEnt != svGlobal.worldspawn )
		{
			table passThroughInfo = GetBulletPassThroughTargets( weapon.GetWeaponOwner(), hitParams )
			PassThroughDamage( weapon, passThroughInfo.targetArray )
		}
	#endif
}

void function OnWeaponStartZoomIn_weapon_dmr( entity weapon )
{
}

void function OnWeaponStartZoomOut_weapon_dmr( entity weapon )
{
}

*/
global function MpWeaponCAR_Init()

// 初始化函数
function MpWeaponCAR_Init()
{
    SmartAmmo_SetAllowUnlockedFiring(weapon, true);
    SmartAmmo_SetUnlockAfterBurst(weapon, (SMART_AMMO_PLAYER_MAX_LOCKS > 5));
    SmartAmmo_SetWarningIndicatorDelay(weapon, 0.0);

}global function MpWeaponG2_Init()

function MpWeaponG2_Init()
{
	SmartAmmo_SetAllowUnlockedFiring( weapon, true )
	SmartAmmo_SetUnlockAfterBurst( weapon, (SMART_AMMO_PLAYER_MAX_LOCKS > 5) )
	SmartAmmo_SetWarningIndicatorDelay( weapon, 0.0 )
}global function MpWeaponR97_Init()

function MpWeaponR97_Init()
{
	SmartAmmo_SetAllowUnlockedFiring( weapon, true )
	SmartAmmo_SetUnlockAfterBurst( weapon, (SMART_AMMO_PLAYER_MAX_LOCKS > 5) )
	SmartAmmo_SetWarningIndicatorDelay( weapon, 0.0 )
}global function MpWeaponVISION_Init()

function MpWeaponVISION_Init()
{
	SmartAmmo_SetAllowUnlockedFiring( weapon, true )
	SmartAmmo_SetUnlockAfterBurst( weapon, (SMART_AMMO_PLAYER_MAX_LOCKS > 5) )
	SmartAmmo_SetWarningIndicatorDelay( weapon, 0.0 )
}global function MpWeaponWINGMAN_N_Init()

function MpWeaponWINGMAN_N_Init()
{
	SmartAmmo_SetAllowUnlockedFiring( weapon, true )
	SmartAmmo_SetUnlockAfterBurst( weapon, (SMART_AMMO_PLAYER_MAX_LOCKS > 5) )
	SmartAmmo_SetWarningIndicatorDelay( weapon, 0.0 )
}